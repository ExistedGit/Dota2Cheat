// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dota_gcmessages_client_battle_report.proto

#include "dota_gcmessages_client_battle_report.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR CMsgClientToGCGetBattleReport::CMsgClientToGCGetBattleReport(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.account_id_)*/0u
  , /*decltype(_impl_.timestamp_)*/0u
  , /*decltype(_impl_.duration_)*/0u} {}
struct CMsgClientToGCGetBattleReportDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgClientToGCGetBattleReportDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgClientToGCGetBattleReportDefaultTypeInternal() {}
  union {
    CMsgClientToGCGetBattleReport _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgClientToGCGetBattleReportDefaultTypeInternal _CMsgClientToGCGetBattleReport_default_instance_;
PROTOBUF_CONSTEXPR CMsgBattleReport_Game::CMsgBattleReport_Game(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.hero_id_)*/0u
  , /*decltype(_impl_.kills_)*/0u
  , /*decltype(_impl_.deaths_)*/0u
  , /*decltype(_impl_.assists_)*/0u
  , /*decltype(_impl_.rank_change_)*/0
  , /*decltype(_impl_.last_hits_)*/0u
  , /*decltype(_impl_.gpm_)*/0u
  , /*decltype(_impl_.xpm_)*/0u
  , /*decltype(_impl_.outcome_)*/0
  , /*decltype(_impl_.lane_selection_flags_)*/0u
  , /*decltype(_impl_.match_id_)*/uint64_t{0u}
  , /*decltype(_impl_.predicted_position_)*/0u
  , /*decltype(_impl_.ranked_)*/false
  , /*decltype(_impl_.party_game_)*/false
  , /*decltype(_impl_.seconds_dead_)*/0u
  , /*decltype(_impl_.winning_team_)*/0u
  , /*decltype(_impl_.start_time_)*/0u
  , /*decltype(_impl_.denies_)*/0u
  , /*decltype(_impl_.bounty_runes_)*/0u
  , /*decltype(_impl_.water_runes_)*/0u
  , /*decltype(_impl_.power_runes_)*/0u
  , /*decltype(_impl_.time_enemy_t1_tower_destroyed_)*/0u
  , /*decltype(_impl_.time_friendly_t1_tower_destroyed_)*/0u
  , /*decltype(_impl_.enemy_roshan_kills_)*/0u
  , /*decltype(_impl_.player_slot_)*/0u
  , /*decltype(_impl_.teleports_used_)*/0u
  , /*decltype(_impl_.dewards_)*/0u
  , /*decltype(_impl_.camps_stacked_)*/0u
  , /*decltype(_impl_.support_gold_)*/0u
  , /*decltype(_impl_.hero_damage_)*/0u
  , /*decltype(_impl_.hero_healing_)*/0u
  , /*decltype(_impl_.tower_damage_)*/0u
  , /*decltype(_impl_.successful_smokes_)*/0u
  , /*decltype(_impl_.stun_duration_)*/0u
  , /*decltype(_impl_.duration_)*/0u
  , /*decltype(_impl_.friendly_roshan_kills_)*/0u
  , /*decltype(_impl_.previous_rank_)*/0
  , /*decltype(_impl_.game_mode_)*/0u
  , /*decltype(_impl_.lobby_type_)*/0u
  , /*decltype(_impl_.time_purchased_shard_)*/0
  , /*decltype(_impl_.time_purchased_scepter_)*/0
  , /*decltype(_impl_.role_)*/-1
  , /*decltype(_impl_.lane_outcome_)*/-1
  , /*decltype(_impl_.item0_)*/-1
  , /*decltype(_impl_.item1_)*/-1
  , /*decltype(_impl_.item2_)*/-1
  , /*decltype(_impl_.item3_)*/-1
  , /*decltype(_impl_.item4_)*/-1
  , /*decltype(_impl_.item5_)*/-1} {}
struct CMsgBattleReport_GameDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgBattleReport_GameDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgBattleReport_GameDefaultTypeInternal() {}
  union {
    CMsgBattleReport_Game _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgBattleReport_GameDefaultTypeInternal _CMsgBattleReport_Game_default_instance_;
PROTOBUF_CONSTEXPR CMsgBattleReport_GameList::CMsgBattleReport_GameList(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.games_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CMsgBattleReport_GameListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgBattleReport_GameListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgBattleReport_GameListDefaultTypeInternal() {}
  union {
    CMsgBattleReport_GameList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgBattleReport_GameListDefaultTypeInternal _CMsgBattleReport_GameList_default_instance_;
PROTOBUF_CONSTEXPR CMsgBattleReport_HighlightGeneral::CMsgBattleReport_HighlightGeneral(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.win_loss_window_)*/0
  , /*decltype(_impl_.win_percent_)*/0
  , /*decltype(_impl_.mmr_delta_)*/0
  , /*decltype(_impl_.highlight_score_)*/0} {}
struct CMsgBattleReport_HighlightGeneralDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgBattleReport_HighlightGeneralDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgBattleReport_HighlightGeneralDefaultTypeInternal() {}
  union {
    CMsgBattleReport_HighlightGeneral _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgBattleReport_HighlightGeneralDefaultTypeInternal _CMsgBattleReport_HighlightGeneral_default_instance_;
PROTOBUF_CONSTEXPR CMsgBattleReport_Highlight::CMsgBattleReport_Highlight(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.highlight_id_)*/0u
  , /*decltype(_impl_.category_)*/0
  , /*decltype(_impl_.rarity_)*/0
  , /*decltype(_impl_.score_)*/0
  , /*decltype(_impl_.confidence_)*/0
  , /*decltype(_impl_.hero_id_)*/0u
  , /*decltype(_impl_.comparison_delta_value_)*/0
  , /*decltype(_impl_.context_)*/-1
  , /*decltype(_impl_.tier_)*/-1
  , /*decltype(_impl_.role_)*/-1} {}
struct CMsgBattleReport_HighlightDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgBattleReport_HighlightDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgBattleReport_HighlightDefaultTypeInternal() {}
  union {
    CMsgBattleReport_Highlight _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgBattleReport_HighlightDefaultTypeInternal _CMsgBattleReport_Highlight_default_instance_;
PROTOBUF_CONSTEXPR CMsgBattleReport::CMsgBattleReport(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.games_)*/{}
  , /*decltype(_impl_.highlights_)*/nullptr} {}
struct CMsgBattleReportDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgBattleReportDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgBattleReportDefaultTypeInternal() {}
  union {
    CMsgBattleReport _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgBattleReportDefaultTypeInternal _CMsgBattleReport_default_instance_;
PROTOBUF_CONSTEXPR CMsgBattleReportInfo::CMsgBattleReportInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.medal_counts_)*/{}
  , /*decltype(_impl_.timestamp_)*/0u
  , /*decltype(_impl_.duration_)*/0u
  , /*decltype(_impl_.acknowledged_)*/false
  , /*decltype(_impl_.featured_hero_id_)*/0u
  , /*decltype(_impl_.featured_position_)*/0u
  , /*decltype(_impl_.games_played_)*/0u} {}
struct CMsgBattleReportInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgBattleReportInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgBattleReportInfoDefaultTypeInternal() {}
  union {
    CMsgBattleReportInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgBattleReportInfoDefaultTypeInternal _CMsgBattleReportInfo_default_instance_;
PROTOBUF_CONSTEXPR CMsgBattleReportInfoList::CMsgBattleReportInfoList(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.battle_report_info_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CMsgBattleReportInfoListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgBattleReportInfoListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgBattleReportInfoListDefaultTypeInternal() {}
  union {
    CMsgBattleReportInfoList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgBattleReportInfoListDefaultTypeInternal _CMsgBattleReportInfoList_default_instance_;
PROTOBUF_CONSTEXPR CMsgBattleReportHighlights::CMsgBattleReportHighlights(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.highlights_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CMsgBattleReportHighlightsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgBattleReportHighlightsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgBattleReportHighlightsDefaultTypeInternal() {}
  union {
    CMsgBattleReportHighlights _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgBattleReportHighlightsDefaultTypeInternal _CMsgBattleReportHighlights_default_instance_;
PROTOBUF_CONSTEXPR CMsgBattleReportAggregateStats_CMsgBattleReportStat::CMsgBattleReportAggregateStats_CMsgBattleReportStat(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.mean_)*/0
  , /*decltype(_impl_.stdev_)*/0} {}
struct CMsgBattleReportAggregateStats_CMsgBattleReportStatDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgBattleReportAggregateStats_CMsgBattleReportStatDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgBattleReportAggregateStats_CMsgBattleReportStatDefaultTypeInternal() {}
  union {
    CMsgBattleReportAggregateStats_CMsgBattleReportStat _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgBattleReportAggregateStats_CMsgBattleReportStatDefaultTypeInternal _CMsgBattleReportAggregateStats_CMsgBattleReportStat_default_instance_;
PROTOBUF_CONSTEXPR CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::CMsgBattleReportAggregateStats_CMsgBattleReportAggregate(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.kills_)*/nullptr
  , /*decltype(_impl_.deaths_)*/nullptr
  , /*decltype(_impl_.assists_)*/nullptr
  , /*decltype(_impl_.rank_change_)*/nullptr
  , /*decltype(_impl_.last_hits_)*/nullptr
  , /*decltype(_impl_.denies_)*/nullptr
  , /*decltype(_impl_.gpm_)*/nullptr
  , /*decltype(_impl_.xpm_)*/nullptr
  , /*decltype(_impl_.seconds_dead_)*/nullptr
  , /*decltype(_impl_.bounty_runes_)*/nullptr
  , /*decltype(_impl_.water_runes_)*/nullptr
  , /*decltype(_impl_.power_runes_)*/nullptr
  , /*decltype(_impl_.time_enemy_t1_tower_destroyed_)*/nullptr
  , /*decltype(_impl_.time_friendly_t1_tower_destroyed_)*/nullptr
  , /*decltype(_impl_.enemy_roshan_kills_)*/nullptr
  , /*decltype(_impl_.teleports_used_)*/nullptr
  , /*decltype(_impl_.dewards_)*/nullptr
  , /*decltype(_impl_.camps_stacked_)*/nullptr
  , /*decltype(_impl_.support_gold_)*/nullptr
  , /*decltype(_impl_.hero_damage_)*/nullptr
  , /*decltype(_impl_.hero_healing_)*/nullptr
  , /*decltype(_impl_.tower_damage_)*/nullptr
  , /*decltype(_impl_.successful_smokes_)*/nullptr
  , /*decltype(_impl_.stun_duration_)*/nullptr
  , /*decltype(_impl_.duration_)*/nullptr
  , /*decltype(_impl_.friendly_roshan_kills_)*/nullptr
  , /*decltype(_impl_.hero_id_)*/0u
  , /*decltype(_impl_.predicted_position_)*/0u
  , /*decltype(_impl_.game_count_)*/0u
  , /*decltype(_impl_.win_count_)*/0u
  , /*decltype(_impl_.lane_win_count_)*/0u} {}
struct CMsgBattleReportAggregateStats_CMsgBattleReportAggregateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgBattleReportAggregateStats_CMsgBattleReportAggregateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgBattleReportAggregateStats_CMsgBattleReportAggregateDefaultTypeInternal() {}
  union {
    CMsgBattleReportAggregateStats_CMsgBattleReportAggregate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgBattleReportAggregateStats_CMsgBattleReportAggregateDefaultTypeInternal _CMsgBattleReportAggregateStats_CMsgBattleReportAggregate_default_instance_;
PROTOBUF_CONSTEXPR CMsgBattleReportAggregateStats::CMsgBattleReportAggregateStats(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.result_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CMsgBattleReportAggregateStatsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgBattleReportAggregateStatsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgBattleReportAggregateStatsDefaultTypeInternal() {}
  union {
    CMsgBattleReportAggregateStats _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgBattleReportAggregateStatsDefaultTypeInternal _CMsgBattleReportAggregateStats_default_instance_;
PROTOBUF_CONSTEXPR CMsgBattleReportAggregatedGeneralStats::CMsgBattleReportAggregatedGeneralStats(
    ::_pbi::ConstantInitialized) {}
struct CMsgBattleReportAggregatedGeneralStatsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgBattleReportAggregatedGeneralStatsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgBattleReportAggregatedGeneralStatsDefaultTypeInternal() {}
  union {
    CMsgBattleReportAggregatedGeneralStats _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgBattleReportAggregatedGeneralStatsDefaultTypeInternal _CMsgBattleReportAggregatedGeneralStats_default_instance_;
PROTOBUF_CONSTEXPR CMsgClientToGCGetBattleReportResponse::CMsgClientToGCGetBattleReportResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.report_)*/nullptr
  , /*decltype(_impl_.aggregate_stats_)*/nullptr
  , /*decltype(_impl_.info_)*/nullptr
  , /*decltype(_impl_.response_)*/0} {}
struct CMsgClientToGCGetBattleReportResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgClientToGCGetBattleReportResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgClientToGCGetBattleReportResponseDefaultTypeInternal() {}
  union {
    CMsgClientToGCGetBattleReportResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgClientToGCGetBattleReportResponseDefaultTypeInternal _CMsgClientToGCGetBattleReportResponse_default_instance_;
PROTOBUF_CONSTEXPR CMsgClientToGCGetBattleReportAggregateStats_CMsgBattleReportAggregateKey::CMsgClientToGCGetBattleReportAggregateStats_CMsgBattleReportAggregateKey(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.hero_id_)*/0u
  , /*decltype(_impl_.predicted_position_)*/0u} {}
struct CMsgClientToGCGetBattleReportAggregateStats_CMsgBattleReportAggregateKeyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgClientToGCGetBattleReportAggregateStats_CMsgBattleReportAggregateKeyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgClientToGCGetBattleReportAggregateStats_CMsgBattleReportAggregateKeyDefaultTypeInternal() {}
  union {
    CMsgClientToGCGetBattleReportAggregateStats_CMsgBattleReportAggregateKey _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgClientToGCGetBattleReportAggregateStats_CMsgBattleReportAggregateKeyDefaultTypeInternal _CMsgClientToGCGetBattleReportAggregateStats_CMsgBattleReportAggregateKey_default_instance_;
PROTOBUF_CONSTEXPR CMsgClientToGCGetBattleReportAggregateStats::CMsgClientToGCGetBattleReportAggregateStats(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.aggregate_keys_)*/{}
  , /*decltype(_impl_.timestamp_)*/0u
  , /*decltype(_impl_.duration_)*/0u
  , /*decltype(_impl_.rank_)*/0u} {}
struct CMsgClientToGCGetBattleReportAggregateStatsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgClientToGCGetBattleReportAggregateStatsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgClientToGCGetBattleReportAggregateStatsDefaultTypeInternal() {}
  union {
    CMsgClientToGCGetBattleReportAggregateStats _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgClientToGCGetBattleReportAggregateStatsDefaultTypeInternal _CMsgClientToGCGetBattleReportAggregateStats_default_instance_;
PROTOBUF_CONSTEXPR CMsgClientToGCGetBattleReportAggregateStatsResponse::CMsgClientToGCGetBattleReportAggregateStatsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.aggregate_stats_)*/nullptr
  , /*decltype(_impl_.response_)*/0} {}
struct CMsgClientToGCGetBattleReportAggregateStatsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgClientToGCGetBattleReportAggregateStatsResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgClientToGCGetBattleReportAggregateStatsResponseDefaultTypeInternal() {}
  union {
    CMsgClientToGCGetBattleReportAggregateStatsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgClientToGCGetBattleReportAggregateStatsResponseDefaultTypeInternal _CMsgClientToGCGetBattleReportAggregateStatsResponse_default_instance_;
PROTOBUF_CONSTEXPR CMsgClientToGCGetBattleReportInfo::CMsgClientToGCGetBattleReportInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.account_id_)*/0u} {}
struct CMsgClientToGCGetBattleReportInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgClientToGCGetBattleReportInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgClientToGCGetBattleReportInfoDefaultTypeInternal() {}
  union {
    CMsgClientToGCGetBattleReportInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgClientToGCGetBattleReportInfoDefaultTypeInternal _CMsgClientToGCGetBattleReportInfo_default_instance_;
PROTOBUF_CONSTEXPR CMsgClientToGCGetBattleReportInfoResponse::CMsgClientToGCGetBattleReportInfoResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.battle_report_info_list_)*/nullptr
  , /*decltype(_impl_.response_)*/0} {}
struct CMsgClientToGCGetBattleReportInfoResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgClientToGCGetBattleReportInfoResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgClientToGCGetBattleReportInfoResponseDefaultTypeInternal() {}
  union {
    CMsgClientToGCGetBattleReportInfoResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgClientToGCGetBattleReportInfoResponseDefaultTypeInternal _CMsgClientToGCGetBattleReportInfoResponse_default_instance_;
PROTOBUF_CONSTEXPR CMsgClientToGCAcknowledgeBattleReport::CMsgClientToGCAcknowledgeBattleReport(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.account_id_)*/0u
  , /*decltype(_impl_.timestamp_)*/0u
  , /*decltype(_impl_.duration_)*/0u} {}
struct CMsgClientToGCAcknowledgeBattleReportDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgClientToGCAcknowledgeBattleReportDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgClientToGCAcknowledgeBattleReportDefaultTypeInternal() {}
  union {
    CMsgClientToGCAcknowledgeBattleReport _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgClientToGCAcknowledgeBattleReportDefaultTypeInternal _CMsgClientToGCAcknowledgeBattleReport_default_instance_;
PROTOBUF_CONSTEXPR CMsgClientToGCAcknowledgeBattleReportResponse::CMsgClientToGCAcknowledgeBattleReportResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.response_)*/0
  , /*decltype(_impl_.shards_awarded_)*/0u} {}
struct CMsgClientToGCAcknowledgeBattleReportResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgClientToGCAcknowledgeBattleReportResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgClientToGCAcknowledgeBattleReportResponseDefaultTypeInternal() {}
  union {
    CMsgClientToGCAcknowledgeBattleReportResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgClientToGCAcknowledgeBattleReportResponseDefaultTypeInternal _CMsgClientToGCAcknowledgeBattleReportResponse_default_instance_;
PROTOBUF_CONSTEXPR CMsgClientToGCGetBattleReportMatchHistory::CMsgClientToGCGetBattleReportMatchHistory(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.account_id_)*/0u
  , /*decltype(_impl_.timestamp_)*/0u
  , /*decltype(_impl_.duration_)*/0u} {}
struct CMsgClientToGCGetBattleReportMatchHistoryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgClientToGCGetBattleReportMatchHistoryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgClientToGCGetBattleReportMatchHistoryDefaultTypeInternal() {}
  union {
    CMsgClientToGCGetBattleReportMatchHistory _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgClientToGCGetBattleReportMatchHistoryDefaultTypeInternal _CMsgClientToGCGetBattleReportMatchHistory_default_instance_;
PROTOBUF_CONSTEXPR CMsgClientToGCGetBattleReportMatchHistoryResponse::CMsgClientToGCGetBattleReportMatchHistoryResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.games_)*/nullptr
  , /*decltype(_impl_.response_)*/0} {}
struct CMsgClientToGCGetBattleReportMatchHistoryResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgClientToGCGetBattleReportMatchHistoryResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgClientToGCGetBattleReportMatchHistoryResponseDefaultTypeInternal() {}
  union {
    CMsgClientToGCGetBattleReportMatchHistoryResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgClientToGCGetBattleReportMatchHistoryResponseDefaultTypeInternal _CMsgClientToGCGetBattleReportMatchHistoryResponse_default_instance_;
static ::_pb::Metadata file_level_metadata_dota_5fgcmessages_5fclient_5fbattle_5freport_2eproto[23];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_dota_5fgcmessages_5fclient_5fbattle_5freport_2eproto[13];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_dota_5fgcmessages_5fclient_5fbattle_5freport_2eproto = nullptr;

const uint32_t TableStruct_dota_5fgcmessages_5fclient_5fbattle_5freport_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCGetBattleReport, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCGetBattleReport, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCGetBattleReport, _impl_.account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCGetBattleReport, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCGetBattleReport, _impl_.duration_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgBattleReport_Game, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgBattleReport_Game, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgBattleReport_Game, _impl_.hero_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgBattleReport_Game, _impl_.kills_),
  PROTOBUF_FIELD_OFFSET(::CMsgBattleReport_Game, _impl_.deaths_),
  PROTOBUF_FIELD_OFFSET(::CMsgBattleReport_Game, _impl_.assists_),
  PROTOBUF_FIELD_OFFSET(::CMsgBattleReport_Game, _impl_.rank_change_),
  PROTOBUF_FIELD_OFFSET(::CMsgBattleReport_Game, _impl_.last_hits_),
  PROTOBUF_FIELD_OFFSET(::CMsgBattleReport_Game, _impl_.denies_),
  PROTOBUF_FIELD_OFFSET(::CMsgBattleReport_Game, _impl_.gpm_),
  PROTOBUF_FIELD_OFFSET(::CMsgBattleReport_Game, _impl_.xpm_),
  PROTOBUF_FIELD_OFFSET(::CMsgBattleReport_Game, _impl_.role_),
  PROTOBUF_FIELD_OFFSET(::CMsgBattleReport_Game, _impl_.outcome_),
  PROTOBUF_FIELD_OFFSET(::CMsgBattleReport_Game, _impl_.lane_outcome_),
  PROTOBUF_FIELD_OFFSET(::CMsgBattleReport_Game, _impl_.ranked_),
  PROTOBUF_FIELD_OFFSET(::CMsgBattleReport_Game, _impl_.match_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgBattleReport_Game, _impl_.lane_selection_flags_),
  PROTOBUF_FIELD_OFFSET(::CMsgBattleReport_Game, _impl_.predicted_position_),
  PROTOBUF_FIELD_OFFSET(::CMsgBattleReport_Game, _impl_.seconds_dead_),
  PROTOBUF_FIELD_OFFSET(::CMsgBattleReport_Game, _impl_.winning_team_),
  PROTOBUF_FIELD_OFFSET(::CMsgBattleReport_Game, _impl_.player_slot_),
  PROTOBUF_FIELD_OFFSET(::CMsgBattleReport_Game, _impl_.party_game_),
  PROTOBUF_FIELD_OFFSET(::CMsgBattleReport_Game, _impl_.start_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgBattleReport_Game, _impl_.bounty_runes_),
  PROTOBUF_FIELD_OFFSET(::CMsgBattleReport_Game, _impl_.water_runes_),
  PROTOBUF_FIELD_OFFSET(::CMsgBattleReport_Game, _impl_.power_runes_),
  PROTOBUF_FIELD_OFFSET(::CMsgBattleReport_Game, _impl_.time_enemy_t1_tower_destroyed_),
  PROTOBUF_FIELD_OFFSET(::CMsgBattleReport_Game, _impl_.time_friendly_t1_tower_destroyed_),
  PROTOBUF_FIELD_OFFSET(::CMsgBattleReport_Game, _impl_.enemy_roshan_kills_),
  PROTOBUF_FIELD_OFFSET(::CMsgBattleReport_Game, _impl_.teleports_used_),
  PROTOBUF_FIELD_OFFSET(::CMsgBattleReport_Game, _impl_.dewards_),
  PROTOBUF_FIELD_OFFSET(::CMsgBattleReport_Game, _impl_.camps_stacked_),
  PROTOBUF_FIELD_OFFSET(::CMsgBattleReport_Game, _impl_.support_gold_),
  PROTOBUF_FIELD_OFFSET(::CMsgBattleReport_Game, _impl_.hero_damage_),
  PROTOBUF_FIELD_OFFSET(::CMsgBattleReport_Game, _impl_.hero_healing_),
  PROTOBUF_FIELD_OFFSET(::CMsgBattleReport_Game, _impl_.tower_damage_),
  PROTOBUF_FIELD_OFFSET(::CMsgBattleReport_Game, _impl_.successful_smokes_),
  PROTOBUF_FIELD_OFFSET(::CMsgBattleReport_Game, _impl_.stun_duration_),
  PROTOBUF_FIELD_OFFSET(::CMsgBattleReport_Game, _impl_.duration_),
  PROTOBUF_FIELD_OFFSET(::CMsgBattleReport_Game, _impl_.friendly_roshan_kills_),
  PROTOBUF_FIELD_OFFSET(::CMsgBattleReport_Game, _impl_.previous_rank_),
  PROTOBUF_FIELD_OFFSET(::CMsgBattleReport_Game, _impl_.game_mode_),
  PROTOBUF_FIELD_OFFSET(::CMsgBattleReport_Game, _impl_.lobby_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgBattleReport_Game, _impl_.time_purchased_shard_),
  PROTOBUF_FIELD_OFFSET(::CMsgBattleReport_Game, _impl_.time_purchased_scepter_),
  PROTOBUF_FIELD_OFFSET(::CMsgBattleReport_Game, _impl_.item0_),
  PROTOBUF_FIELD_OFFSET(::CMsgBattleReport_Game, _impl_.item1_),
  PROTOBUF_FIELD_OFFSET(::CMsgBattleReport_Game, _impl_.item2_),
  PROTOBUF_FIELD_OFFSET(::CMsgBattleReport_Game, _impl_.item3_),
  PROTOBUF_FIELD_OFFSET(::CMsgBattleReport_Game, _impl_.item4_),
  PROTOBUF_FIELD_OFFSET(::CMsgBattleReport_Game, _impl_.item5_),
  0,
  1,
  2,
  3,
  4,
  5,
  17,
  6,
  7,
  41,
  8,
  42,
  12,
  10,
  9,
  11,
  14,
  15,
  24,
  13,
  16,
  18,
  19,
  20,
  21,
  22,
  23,
  25,
  26,
  27,
  28,
  29,
  30,
  31,
  32,
  33,
  34,
  35,
  36,
  37,
  38,
  39,
  40,
  43,
  44,
  45,
  46,
  47,
  48,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgBattleReport_GameList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgBattleReport_GameList, _impl_.games_),
  PROTOBUF_FIELD_OFFSET(::CMsgBattleReport_HighlightGeneral, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgBattleReport_HighlightGeneral, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgBattleReport_HighlightGeneral, _impl_.win_loss_window_),
  PROTOBUF_FIELD_OFFSET(::CMsgBattleReport_HighlightGeneral, _impl_.win_percent_),
  PROTOBUF_FIELD_OFFSET(::CMsgBattleReport_HighlightGeneral, _impl_.mmr_delta_),
  PROTOBUF_FIELD_OFFSET(::CMsgBattleReport_HighlightGeneral, _impl_.highlight_score_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsgBattleReport_Highlight, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgBattleReport_Highlight, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgBattleReport_Highlight, _impl_.highlight_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgBattleReport_Highlight, _impl_.category_),
  PROTOBUF_FIELD_OFFSET(::CMsgBattleReport_Highlight, _impl_.tier_),
  PROTOBUF_FIELD_OFFSET(::CMsgBattleReport_Highlight, _impl_.rarity_),
  PROTOBUF_FIELD_OFFSET(::CMsgBattleReport_Highlight, _impl_.score_),
  PROTOBUF_FIELD_OFFSET(::CMsgBattleReport_Highlight, _impl_.confidence_),
  PROTOBUF_FIELD_OFFSET(::CMsgBattleReport_Highlight, _impl_.hero_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgBattleReport_Highlight, _impl_.role_),
  PROTOBUF_FIELD_OFFSET(::CMsgBattleReport_Highlight, _impl_.comparison_delta_value_),
  PROTOBUF_FIELD_OFFSET(::CMsgBattleReport_Highlight, _impl_.context_),
  0,
  1,
  8,
  2,
  3,
  4,
  5,
  9,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::CMsgBattleReport, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgBattleReport, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgBattleReport, _impl_.games_),
  PROTOBUF_FIELD_OFFSET(::CMsgBattleReport, _impl_.highlights_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgBattleReportInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgBattleReportInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgBattleReportInfo, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::CMsgBattleReportInfo, _impl_.duration_),
  PROTOBUF_FIELD_OFFSET(::CMsgBattleReportInfo, _impl_.acknowledged_),
  PROTOBUF_FIELD_OFFSET(::CMsgBattleReportInfo, _impl_.featured_hero_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgBattleReportInfo, _impl_.featured_position_),
  PROTOBUF_FIELD_OFFSET(::CMsgBattleReportInfo, _impl_.games_played_),
  PROTOBUF_FIELD_OFFSET(::CMsgBattleReportInfo, _impl_.medal_counts_),
  0,
  1,
  2,
  3,
  4,
  5,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgBattleReportInfoList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgBattleReportInfoList, _impl_.battle_report_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgBattleReportHighlights, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgBattleReportHighlights, _impl_.highlights_),
  PROTOBUF_FIELD_OFFSET(::CMsgBattleReportAggregateStats_CMsgBattleReportStat, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgBattleReportAggregateStats_CMsgBattleReportStat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgBattleReportAggregateStats_CMsgBattleReportStat, _impl_.mean_),
  PROTOBUF_FIELD_OFFSET(::CMsgBattleReportAggregateStats_CMsgBattleReportStat, _impl_.stdev_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgBattleReportAggregateStats_CMsgBattleReportAggregate, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgBattleReportAggregateStats_CMsgBattleReportAggregate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgBattleReportAggregateStats_CMsgBattleReportAggregate, _impl_.hero_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgBattleReportAggregateStats_CMsgBattleReportAggregate, _impl_.predicted_position_),
  PROTOBUF_FIELD_OFFSET(::CMsgBattleReportAggregateStats_CMsgBattleReportAggregate, _impl_.game_count_),
  PROTOBUF_FIELD_OFFSET(::CMsgBattleReportAggregateStats_CMsgBattleReportAggregate, _impl_.win_count_),
  PROTOBUF_FIELD_OFFSET(::CMsgBattleReportAggregateStats_CMsgBattleReportAggregate, _impl_.lane_win_count_),
  PROTOBUF_FIELD_OFFSET(::CMsgBattleReportAggregateStats_CMsgBattleReportAggregate, _impl_.kills_),
  PROTOBUF_FIELD_OFFSET(::CMsgBattleReportAggregateStats_CMsgBattleReportAggregate, _impl_.deaths_),
  PROTOBUF_FIELD_OFFSET(::CMsgBattleReportAggregateStats_CMsgBattleReportAggregate, _impl_.assists_),
  PROTOBUF_FIELD_OFFSET(::CMsgBattleReportAggregateStats_CMsgBattleReportAggregate, _impl_.rank_change_),
  PROTOBUF_FIELD_OFFSET(::CMsgBattleReportAggregateStats_CMsgBattleReportAggregate, _impl_.last_hits_),
  PROTOBUF_FIELD_OFFSET(::CMsgBattleReportAggregateStats_CMsgBattleReportAggregate, _impl_.denies_),
  PROTOBUF_FIELD_OFFSET(::CMsgBattleReportAggregateStats_CMsgBattleReportAggregate, _impl_.gpm_),
  PROTOBUF_FIELD_OFFSET(::CMsgBattleReportAggregateStats_CMsgBattleReportAggregate, _impl_.xpm_),
  PROTOBUF_FIELD_OFFSET(::CMsgBattleReportAggregateStats_CMsgBattleReportAggregate, _impl_.seconds_dead_),
  PROTOBUF_FIELD_OFFSET(::CMsgBattleReportAggregateStats_CMsgBattleReportAggregate, _impl_.bounty_runes_),
  PROTOBUF_FIELD_OFFSET(::CMsgBattleReportAggregateStats_CMsgBattleReportAggregate, _impl_.water_runes_),
  PROTOBUF_FIELD_OFFSET(::CMsgBattleReportAggregateStats_CMsgBattleReportAggregate, _impl_.power_runes_),
  PROTOBUF_FIELD_OFFSET(::CMsgBattleReportAggregateStats_CMsgBattleReportAggregate, _impl_.time_enemy_t1_tower_destroyed_),
  PROTOBUF_FIELD_OFFSET(::CMsgBattleReportAggregateStats_CMsgBattleReportAggregate, _impl_.time_friendly_t1_tower_destroyed_),
  PROTOBUF_FIELD_OFFSET(::CMsgBattleReportAggregateStats_CMsgBattleReportAggregate, _impl_.enemy_roshan_kills_),
  PROTOBUF_FIELD_OFFSET(::CMsgBattleReportAggregateStats_CMsgBattleReportAggregate, _impl_.teleports_used_),
  PROTOBUF_FIELD_OFFSET(::CMsgBattleReportAggregateStats_CMsgBattleReportAggregate, _impl_.dewards_),
  PROTOBUF_FIELD_OFFSET(::CMsgBattleReportAggregateStats_CMsgBattleReportAggregate, _impl_.camps_stacked_),
  PROTOBUF_FIELD_OFFSET(::CMsgBattleReportAggregateStats_CMsgBattleReportAggregate, _impl_.support_gold_),
  PROTOBUF_FIELD_OFFSET(::CMsgBattleReportAggregateStats_CMsgBattleReportAggregate, _impl_.hero_damage_),
  PROTOBUF_FIELD_OFFSET(::CMsgBattleReportAggregateStats_CMsgBattleReportAggregate, _impl_.hero_healing_),
  PROTOBUF_FIELD_OFFSET(::CMsgBattleReportAggregateStats_CMsgBattleReportAggregate, _impl_.tower_damage_),
  PROTOBUF_FIELD_OFFSET(::CMsgBattleReportAggregateStats_CMsgBattleReportAggregate, _impl_.successful_smokes_),
  PROTOBUF_FIELD_OFFSET(::CMsgBattleReportAggregateStats_CMsgBattleReportAggregate, _impl_.stun_duration_),
  PROTOBUF_FIELD_OFFSET(::CMsgBattleReportAggregateStats_CMsgBattleReportAggregate, _impl_.duration_),
  PROTOBUF_FIELD_OFFSET(::CMsgBattleReportAggregateStats_CMsgBattleReportAggregate, _impl_.friendly_roshan_kills_),
  26,
  27,
  28,
  29,
  30,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgBattleReportAggregateStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgBattleReportAggregateStats, _impl_.result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgBattleReportAggregatedGeneralStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCGetBattleReportResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCGetBattleReportResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCGetBattleReportResponse, _impl_.report_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCGetBattleReportResponse, _impl_.response_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCGetBattleReportResponse, _impl_.aggregate_stats_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCGetBattleReportResponse, _impl_.info_),
  0,
  3,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCGetBattleReportAggregateStats_CMsgBattleReportAggregateKey, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCGetBattleReportAggregateStats_CMsgBattleReportAggregateKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCGetBattleReportAggregateStats_CMsgBattleReportAggregateKey, _impl_.hero_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCGetBattleReportAggregateStats_CMsgBattleReportAggregateKey, _impl_.predicted_position_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCGetBattleReportAggregateStats, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCGetBattleReportAggregateStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCGetBattleReportAggregateStats, _impl_.aggregate_keys_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCGetBattleReportAggregateStats, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCGetBattleReportAggregateStats, _impl_.duration_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCGetBattleReportAggregateStats, _impl_.rank_),
  ~0u,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCGetBattleReportAggregateStatsResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCGetBattleReportAggregateStatsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCGetBattleReportAggregateStatsResponse, _impl_.aggregate_stats_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCGetBattleReportAggregateStatsResponse, _impl_.response_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCGetBattleReportInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCGetBattleReportInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCGetBattleReportInfo, _impl_.account_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCGetBattleReportInfoResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCGetBattleReportInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCGetBattleReportInfoResponse, _impl_.battle_report_info_list_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCGetBattleReportInfoResponse, _impl_.response_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCAcknowledgeBattleReport, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCAcknowledgeBattleReport, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCAcknowledgeBattleReport, _impl_.account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCAcknowledgeBattleReport, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCAcknowledgeBattleReport, _impl_.duration_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCAcknowledgeBattleReportResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCAcknowledgeBattleReportResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCAcknowledgeBattleReportResponse, _impl_.response_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCAcknowledgeBattleReportResponse, _impl_.shards_awarded_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCGetBattleReportMatchHistory, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCGetBattleReportMatchHistory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCGetBattleReportMatchHistory, _impl_.account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCGetBattleReportMatchHistory, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCGetBattleReportMatchHistory, _impl_.duration_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCGetBattleReportMatchHistoryResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCGetBattleReportMatchHistoryResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCGetBattleReportMatchHistoryResponse, _impl_.response_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCGetBattleReportMatchHistoryResponse, _impl_.games_),
  1,
  0,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, -1, sizeof(::CMsgClientToGCGetBattleReport)},
  { 12, 67, -1, sizeof(::CMsgBattleReport_Game)},
  { 116, -1, -1, sizeof(::CMsgBattleReport_GameList)},
  { 123, 133, -1, sizeof(::CMsgBattleReport_HighlightGeneral)},
  { 137, 153, -1, sizeof(::CMsgBattleReport_Highlight)},
  { 163, 171, -1, sizeof(::CMsgBattleReport)},
  { 173, 186, -1, sizeof(::CMsgBattleReportInfo)},
  { 193, -1, -1, sizeof(::CMsgBattleReportInfoList)},
  { 200, -1, -1, sizeof(::CMsgBattleReportHighlights)},
  { 207, 215, -1, sizeof(::CMsgBattleReportAggregateStats_CMsgBattleReportStat)},
  { 217, 254, -1, sizeof(::CMsgBattleReportAggregateStats_CMsgBattleReportAggregate)},
  { 285, -1, -1, sizeof(::CMsgBattleReportAggregateStats)},
  { 292, -1, -1, sizeof(::CMsgBattleReportAggregatedGeneralStats)},
  { 298, 308, -1, sizeof(::CMsgClientToGCGetBattleReportResponse)},
  { 312, 320, -1, sizeof(::CMsgClientToGCGetBattleReportAggregateStats_CMsgBattleReportAggregateKey)},
  { 322, 332, -1, sizeof(::CMsgClientToGCGetBattleReportAggregateStats)},
  { 336, 344, -1, sizeof(::CMsgClientToGCGetBattleReportAggregateStatsResponse)},
  { 346, 353, -1, sizeof(::CMsgClientToGCGetBattleReportInfo)},
  { 354, 362, -1, sizeof(::CMsgClientToGCGetBattleReportInfoResponse)},
  { 364, 373, -1, sizeof(::CMsgClientToGCAcknowledgeBattleReport)},
  { 376, 384, -1, sizeof(::CMsgClientToGCAcknowledgeBattleReportResponse)},
  { 386, 395, -1, sizeof(::CMsgClientToGCGetBattleReportMatchHistory)},
  { 398, 406, -1, sizeof(::CMsgClientToGCGetBattleReportMatchHistoryResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_CMsgClientToGCGetBattleReport_default_instance_._instance,
  &::_CMsgBattleReport_Game_default_instance_._instance,
  &::_CMsgBattleReport_GameList_default_instance_._instance,
  &::_CMsgBattleReport_HighlightGeneral_default_instance_._instance,
  &::_CMsgBattleReport_Highlight_default_instance_._instance,
  &::_CMsgBattleReport_default_instance_._instance,
  &::_CMsgBattleReportInfo_default_instance_._instance,
  &::_CMsgBattleReportInfoList_default_instance_._instance,
  &::_CMsgBattleReportHighlights_default_instance_._instance,
  &::_CMsgBattleReportAggregateStats_CMsgBattleReportStat_default_instance_._instance,
  &::_CMsgBattleReportAggregateStats_CMsgBattleReportAggregate_default_instance_._instance,
  &::_CMsgBattleReportAggregateStats_default_instance_._instance,
  &::_CMsgBattleReportAggregatedGeneralStats_default_instance_._instance,
  &::_CMsgClientToGCGetBattleReportResponse_default_instance_._instance,
  &::_CMsgClientToGCGetBattleReportAggregateStats_CMsgBattleReportAggregateKey_default_instance_._instance,
  &::_CMsgClientToGCGetBattleReportAggregateStats_default_instance_._instance,
  &::_CMsgClientToGCGetBattleReportAggregateStatsResponse_default_instance_._instance,
  &::_CMsgClientToGCGetBattleReportInfo_default_instance_._instance,
  &::_CMsgClientToGCGetBattleReportInfoResponse_default_instance_._instance,
  &::_CMsgClientToGCAcknowledgeBattleReport_default_instance_._instance,
  &::_CMsgClientToGCAcknowledgeBattleReportResponse_default_instance_._instance,
  &::_CMsgClientToGCGetBattleReportMatchHistory_default_instance_._instance,
  &::_CMsgClientToGCGetBattleReportMatchHistoryResponse_default_instance_._instance,
};

const char descriptor_table_protodef_dota_5fgcmessages_5fclient_5fbattle_5freport_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n*dota_gcmessages_client_battle_report.p"
  "roto\032\023steammessages.proto\032\027dota_shared_e"
  "nums.proto\032\034dota_gcmessages_common.proto"
  "\032\034dota_gcmessages_webapi.proto\032\026gcsdk_gc"
  "messages.proto\032\025base_gcmessages.proto\032\025e"
  "con_gcmessages.proto\032\034dota_gcmessages_cl"
  "ient.proto\032\025valveextensions.proto\"X\n\035CMs"
  "gClientToGCGetBattleReport\022\022\n\naccount_id"
  "\030\001 \001(\r\022\021\n\ttimestamp\030\002 \001(\r\022\020\n\010duration\030\003 "
  "\001(\r\"\274\t\n\025CMsgBattleReport_Game\022\017\n\007hero_id"
  "\030\001 \001(\r\022\r\n\005kills\030\002 \001(\r\022\016\n\006deaths\030\003 \001(\r\022\017\n"
  "\007assists\030\004 \001(\r\022\023\n\013rank_change\030\005 \001(\005\022\021\n\tl"
  "ast_hits\030\006 \001(\r\022\016\n\006denies\030\025 \001(\r\022\013\n\003gpm\030\007 "
  "\001(\r\022\013\n\003xpm\030\010 \001(\r\0224\n\004role\030\t \001(\0162\026.CMsgBat"
  "tleReport_Role:\016k_eUnknownRole\0223\n\007outcom"
  "e\030\n \001(\0162\032.CMsgBattleReport_EOutcome:\006k_e"
  "Win\022K\n\014lane_outcome\030\013 \001(\0162\036.CMsgBattleRe"
  "port_ELaneOutcome:\025k_eUnknownLaneOutcome"
  "\022\016\n\006ranked\030\014 \001(\010\022\020\n\010match_id\030\r \001(\004\022\034\n\024la"
  "ne_selection_flags\030\016 \001(\r\022\032\n\022predicted_po"
  "sition\030\017 \001(\r\022\024\n\014seconds_dead\030\020 \001(\r\022\024\n\014wi"
  "nning_team\030\021 \001(\r\022\023\n\013player_slot\030\034 \001(\r\022\022\n"
  "\nparty_game\030\023 \001(\010\022\022\n\nstart_time\030\024 \001(\r\022\024\n"
  "\014bounty_runes\030\026 \001(\r\022\023\n\013water_runes\030\027 \001(\r"
  "\022\023\n\013power_runes\030\030 \001(\r\022%\n\035time_enemy_t1_t"
  "ower_destroyed\030\031 \001(\r\022(\n time_friendly_t1"
  "_tower_destroyed\030\032 \001(\r\022\032\n\022enemy_roshan_k"
  "ills\030\033 \001(\r\022\026\n\016teleports_used\030\035 \001(\r\022\017\n\007de"
  "wards\030\036 \001(\r\022\025\n\rcamps_stacked\030\037 \001(\r\022\024\n\014su"
  "pport_gold\030  \001(\r\022\023\n\013hero_damage\030! \001(\r\022\024\n"
  "\014hero_healing\030\" \001(\r\022\024\n\014tower_damage\030# \001("
  "\r\022\031\n\021successful_smokes\030$ \001(\r\022\025\n\rstun_dur"
  "ation\030% \001(\r\022\020\n\010duration\030& \001(\r\022\035\n\025friendl"
  "y_roshan_kills\030\' \001(\r\022\025\n\rprevious_rank\030( "
  "\001(\005\022\021\n\tgame_mode\030) \001(\r\022\022\n\nlobby_type\030* \001"
  "(\r\022\034\n\024time_purchased_shard\030+ \001(\002\022\036\n\026time"
  "_purchased_scepter\030, \001(\002\022\021\n\005item0\030- \001(\005:"
  "\002-1\022\021\n\005item1\030. \001(\005:\002-1\022\021\n\005item2\030/ \001(\005:\002-"
  "1\022\021\n\005item3\0300 \001(\005:\002-1\022\021\n\005item4\0301 \001(\005:\002-1\022"
  "\021\n\005item5\0302 \001(\005:\002-1\"B\n\031CMsgBattleReport_G"
  "ameList\022%\n\005games\030\001 \003(\0132\026.CMsgBattleRepor"
  "t_Game\"\252\005\n\020CMsgBattleReport\022%\n\005games\030\001 \003"
  "(\0132\026.CMsgBattleReport_Game\022/\n\nhighlights"
  "\030\003 \001(\0132\033.CMsgBattleReportHighlights\032l\n\020H"
  "ighlightGeneral\022\027\n\017win_loss_window\030\001 \001(\005"
  "\022\023\n\013win_percent\030\002 \001(\002\022\021\n\tmmr_delta\030\003 \001(\005"
  "\022\027\n\017highlight_score\030\004 \001(\002\032\317\003\n\tHighlight\022"
  "\024\n\014highlight_id\030\001 \002(\r\022J\n\010category\030\002 \002(\0162"
  "#.CMsgBattleReport_HighlightCategory:\023k_"
  "eHighlightGeneral\022B\n\004tier\030\003 \001(\0162\037.CMsgBa"
  "ttleReport_HighlightTier:\023k_eHighlightTi"
  "erLow\022E\n\006rarity\030\004 \001(\0162!.CMsgBattleReport"
  "_HighlightRarity:\022k_eHighlightCommon\022\r\n\005"
  "score\030\005 \001(\002\022\022\n\nconfidence\030\006 \001(\002\022\017\n\007hero_"
  "id\030\007 \001(\r\0224\n\004role\030\010 \001(\0162\026.CMsgBattleRepor"
  "t_Role:\016k_eUnknownRole\022\036\n\026comparison_del"
  "ta_value\030\t \001(\002\022K\n\007context\030\n \001(\0162 .CMsgBa"
  "ttleReport_CompareContext:\030k_eCompareCon"
  "textInvalid\"\262\001\n\024CMsgBattleReportInfo\022\021\n\t"
  "timestamp\030\001 \001(\r\022\020\n\010duration\030\002 \001(\r\022\024\n\014ack"
  "nowledged\030\003 \001(\010\022\030\n\020featured_hero_id\030\004 \001("
  "\r\022\031\n\021featured_position\030\005 \001(\r\022\024\n\014games_pl"
  "ayed\030\006 \001(\r\022\024\n\014medal_counts\030\007 \003(\r\"M\n\030CMsg"
  "BattleReportInfoList\0221\n\022battle_report_in"
  "fo\030\001 \003(\0132\025.CMsgBattleReportInfo\"M\n\032CMsgB"
  "attleReportHighlights\022/\n\nhighlights\030\001 \003("
  "\0132\033.CMsgBattleReport.Highlight\"\345\021\n\036CMsgB"
  "attleReportAggregateStats\022I\n\006result\030\001 \003("
  "\01329.CMsgBattleReportAggregateStats.CMsgB"
  "attleReportAggregate\0323\n\024CMsgBattleReport"
  "Stat\022\014\n\004mean\030\001 \001(\002\022\r\n\005stdev\030\002 \001(\002\032\302\020\n\031CM"
  "sgBattleReportAggregate\022\017\n\007hero_id\030\001 \001(\r"
  "\022\032\n\022predicted_position\030\002 \001(\r\022\022\n\ngame_cou"
  "nt\030\003 \001(\r\022\021\n\twin_count\030\004 \001(\r\022\026\n\016lane_win_"
  "count\030\005 \001(\r\022C\n\005kills\030\006 \001(\01324.CMsgBattleR"
  "eportAggregateStats.CMsgBattleReportStat"
  "\022D\n\006deaths\030\007 \001(\01324.CMsgBattleReportAggre"
  "gateStats.CMsgBattleReportStat\022E\n\007assist"
  "s\030\010 \001(\01324.CMsgBattleReportAggregateStats"
  ".CMsgBattleReportStat\022I\n\013rank_change\030\t \001"
  "(\01324.CMsgBattleReportAggregateStats.CMsg"
  "BattleReportStat\022G\n\tlast_hits\030\n \001(\01324.CM"
  "sgBattleReportAggregateStats.CMsgBattleR"
  "eportStat\022D\n\006denies\030\013 \001(\01324.CMsgBattleRe"
  "portAggregateStats.CMsgBattleReportStat\022"
  "A\n\003gpm\030\014 \001(\01324.CMsgBattleReportAggregate"
  "Stats.CMsgBattleReportStat\022A\n\003xpm\030\r \001(\0132"
  "4.CMsgBattleReportAggregateStats.CMsgBat"
  "tleReportStat\022J\n\014seconds_dead\030\016 \001(\01324.CM"
  "sgBattleReportAggregateStats.CMsgBattleR"
  "eportStat\022J\n\014bounty_runes\030\017 \001(\01324.CMsgBa"
  "ttleReportAggregateStats.CMsgBattleRepor"
  "tStat\022I\n\013water_runes\030\020 \001(\01324.CMsgBattleR"
  "eportAggregateStats.CMsgBattleReportStat"
  "\022I\n\013power_runes\030\021 \001(\01324.CMsgBattleReport"
  "AggregateStats.CMsgBattleReportStat\022[\n\035t"
  "ime_enemy_t1_tower_destroyed\030\022 \001(\01324.CMs"
  "gBattleReportAggregateStats.CMsgBattleRe"
  "portStat\022^\n time_friendly_t1_tower_destr"
  "oyed\030\023 \001(\01324.CMsgBattleReportAggregateSt"
  "ats.CMsgBattleReportStat\022P\n\022enemy_roshan"
  "_kills\030\024 \001(\01324.CMsgBattleReportAggregate"
  "Stats.CMsgBattleReportStat\022L\n\016teleports_"
  "used\030\025 \001(\01324.CMsgBattleReportAggregateSt"
  "ats.CMsgBattleReportStat\022E\n\007dewards\030\026 \001("
  "\01324.CMsgBattleReportAggregateStats.CMsgB"
  "attleReportStat\022K\n\rcamps_stacked\030\027 \001(\01324"
  ".CMsgBattleReportAggregateStats.CMsgBatt"
  "leReportStat\022J\n\014support_gold\030\030 \001(\01324.CMs"
  "gBattleReportAggregateStats.CMsgBattleRe"
  "portStat\022I\n\013hero_damage\030\031 \001(\01324.CMsgBatt"
  "leReportAggregateStats.CMsgBattleReportS"
  "tat\022J\n\014hero_healing\030\032 \001(\01324.CMsgBattleRe"
  "portAggregateStats.CMsgBattleReportStat\022"
  "J\n\014tower_damage\030\033 \001(\01324.CMsgBattleReport"
  "AggregateStats.CMsgBattleReportStat\022O\n\021s"
  "uccessful_smokes\030\034 \001(\01324.CMsgBattleRepor"
  "tAggregateStats.CMsgBattleReportStat\022K\n\r"
  "stun_duration\030\035 \001(\01324.CMsgBattleReportAg"
  "gregateStats.CMsgBattleReportStat\022F\n\010dur"
  "ation\030\036 \001(\01324.CMsgBattleReportAggregateS"
  "tats.CMsgBattleReportStat\022S\n\025friendly_ro"
  "shan_kills\030\037 \001(\01324.CMsgBattleReportAggre"
  "gateStats.CMsgBattleReportStat\"(\n&CMsgBa"
  "ttleReportAggregatedGeneralStats\"\303\004\n%CMs"
  "gClientToGCGetBattleReportResponse\022!\n\006re"
  "port\030\001 \001(\0132\021.CMsgBattleReport\022T\n\010respons"
  "e\030\002 \001(\01620.CMsgClientToGCGetBattleReportR"
  "esponse.EResponse:\020k_eInternalError\0228\n\017a"
  "ggregate_stats\030\003 \001(\0132\037.CMsgBattleReportA"
  "ggregateStats\022#\n\004info\030\004 \001(\0132\025.CMsgBattle"
  "ReportInfo\"\301\002\n\tEResponse\022\024\n\020k_eInternalE"
  "rror\020\000\022\016\n\nk_eSuccess\020\001\022\016\n\nk_eTooBusy\020\002\022\017"
  "\n\013k_eDisabled\020\003\022\027\n\023k_ePermissionDenied\020\004"
  "\022\036\n\032k_eNotSubscribedToDotaPlus\020\005\022\030\n\024k_eI"
  "nvalidParameters\020\006\022\035\n\031k_eUnableToGetPlus"
  "SubInfo\020\007\022\037\n\033k_eUnableToLoadBattleReport"
  "\020\010\022\037\n\033k_eUnableToSaveBattleReport\020\t\022\034\n\030k"
  "_eUnableToGetAggregates\020\n\022\033\n\027k_eNotEnoug"
  "hGamesPlayed\020\013\"\220\002\n+CMsgClientToGCGetBatt"
  "leReportAggregateStats\022a\n\016aggregate_keys"
  "\030\001 \003(\0132I.CMsgClientToGCGetBattleReportAg"
  "gregateStats.CMsgBattleReportAggregateKe"
  "y\022\021\n\ttimestamp\030\002 \001(\r\022\020\n\010duration\030\003 \001(\r\022\014"
  "\n\004rank\030\004 \001(\r\032K\n\034CMsgBattleReportAggregat"
  "eKey\022\017\n\007hero_id\030\001 \001(\r\022\032\n\022predicted_posit"
  "ion\030\002 \001(\r\"\367\002\n3CMsgClientToGCGetBattleRep"
  "ortAggregateStatsResponse\0228\n\017aggregate_s"
  "tats\030\001 \001(\0132\037.CMsgBattleReportAggregateSt"
  "ats\022b\n\010response\030\002 \001(\0162>.CMsgClientToGCGe"
  "tBattleReportAggregateStatsResponse.ERes"
  "ponse:\020k_eInternalError\"\241\001\n\tEResponse\022\024\n"
  "\020k_eInternalError\020\000\022\016\n\nk_eSuccess\020\001\022\016\n\nk"
  "_eTooBusy\020\002\022\017\n\013k_eDisabled\020\003\022\027\n\023k_ePermi"
  "ssionDenied\020\004\022\024\n\020k_eInvalidParams\020\005\022\036\n\032k"
  "_eNotSubscribedToDotaPlus\020\006\"7\n!CMsgClien"
  "tToGCGetBattleReportInfo\022\022\n\naccount_id\030\001"
  " \001(\r\"\317\002\n)CMsgClientToGCGetBattleReportIn"
  "foResponse\022:\n\027battle_report_info_list\030\001 "
  "\001(\0132\031.CMsgBattleReportInfoList\022X\n\010respon"
  "se\030\002 \001(\01624.CMsgClientToGCGetBattleReport"
  "InfoResponse.EResponse:\020k_eInternalError"
  "\"\213\001\n\tEResponse\022\024\n\020k_eInternalError\020\000\022\016\n\n"
  "k_eSuccess\020\001\022\016\n\nk_eTooBusy\020\002\022\017\n\013k_eDisab"
  "led\020\003\022\027\n\023k_ePermissionDenied\020\004\022\036\n\032k_eNot"
  "SubscribedToDotaPlus\020\005\"`\n%CMsgClientToGC"
  "AcknowledgeBattleReport\022\022\n\naccount_id\030\001 "
  "\001(\r\022\021\n\ttimestamp\030\002 \001(\r\022\020\n\010duration\030\003 \001(\r"
  "\"\263\003\n-CMsgClientToGCAcknowledgeBattleRepo"
  "rtResponse\022\\\n\010response\030\001 \001(\01628.CMsgClien"
  "tToGCAcknowledgeBattleReportResponse.ERe"
  "sponse:\020k_eInternalError\022\026\n\016shards_award"
  "ed\030\002 \001(\r\"\213\002\n\tEResponse\022\024\n\020k_eInternalErr"
  "or\020\000\022\016\n\nk_eSuccess\020\001\022\016\n\nk_eTooBusy\020\002\022\017\n\013"
  "k_eDisabled\020\003\022\016\n\nk_eTimeout\020\004\022\027\n\023k_ePerm"
  "issionDenied\020\005\022\037\n\033k_eUnableToLoadBattleR"
  "eport\020\006\022\032\n\026k_eAlreadyAcknowledged\020\007\022\024\n\020k"
  "_eUnknownReport\020\010\022\036\n\032k_eNotSubscribedToD"
  "otaPlus\020\t\022\033\n\027k_eNotEnoughGamesPlayed\020\n\"d"
  "\n)CMsgClientToGCGetBattleReportMatchHist"
  "ory\022\022\n\naccount_id\030\001 \001(\r\022\021\n\ttimestamp\030\002 \001"
  "(\r\022\020\n\010duration\030\003 \001(\r\"\336\002\n1CMsgClientToGCG"
  "etBattleReportMatchHistoryResponse\022`\n\010re"
  "sponse\030\001 \001(\0162<.CMsgClientToGCGetBattleRe"
  "portMatchHistoryResponse.EResponse:\020k_eI"
  "nternalError\022)\n\005games\030\002 \001(\0132\032.CMsgBattle"
  "Report_GameList\"\233\001\n\tEResponse\022\024\n\020k_eInte"
  "rnalError\020\000\022\016\n\nk_eSuccess\020\001\022\016\n\nk_eTooBus"
  "y\020\002\022\017\n\013k_eDisabled\020\003\022\016\n\nk_eTimeout\020\004\022\027\n\023"
  "k_ePermissionDenied\020\005\022\036\n\032k_eNotSubscribe"
  "dToDotaPlus\020\006*\353\030\n\036CMsgBattleReport_Highl"
  "ightType\022)\n\027k_eHighlightTypeInvalid\020\377\377\377\377"
  "\377\377\377\377\377\001\032\003\320>\001\022#\n\016k_eGameWinrate\020\000\032\017\302>\014Game"
  " Winrate\022#\n\016k_eLaneWinrate\020\001\032\017\302>\014Lane Wi"
  "nrate\022$\n\013k_eMMRDelta\020\002\032\023\302>\020Ranked MMR De"
  "lta\0222\n\022k_eNumHeroesPlayed\020\003\032\032\302>\027Number o"
  "f Heroes Played\0220\n\021k_eNumGamesPlayed\020\004\032\031"
  "\302>\026Number of Games Played\022;\n\031k_eAverageP"
  "owerRunesTaken\020\005\032\034\302>\031Average Power Runes"
  " Taken\022=\n\032k_eAverageBountyRunesTaken\020\006\032\035"
  "\302>\032Average Bounty Runes Taken\022\?\n\030k_eTota"
  "lKillEnemyT1First\020\007\032!\302>\036Total Enemy T1 D"
  "estroyed First\022.\n\023k_eTotalRoshanKills\020\010\032"
  "\025\302>\022Total Roshan Kills\022%\n\017k_eTotalDeward"
  "s\020\t\032\020\302>\rTotal Dewards\0220\n\024k_eTotalCampsSt"
  "acked\020\n\032\026\302>\023Total Camps Stacked\022&\n\017k_eMa"
  "xWinstreak\020\013\032\021\302>\016Max Win Streak\022)\n\021k_eAv"
  "erageDewards\020\014\032\022\302>\017Average Dewards\022%\n\017k_"
  "eAverageKills\020\r\032\020\302>\rAverage Kills\022\035\n\013k_e"
  "MaxKills\020\016\032\014\302>\tMax Kills\022)\n\021k_eAverageAs"
  "sists\020\017\032\022\302>\017Average Assists\022!\n\rk_eMaxAss"
  "ists\020\020\032\016\302>\013Max Assists\022\'\n\020k_eAverageDeat"
  "hs\020\021\032\021\302>\016Average Deaths\022\037\n\014k_eMinDeaths\020"
  "\022\032\r\302>\nMin Deaths\0224\n\026k_eAverageCampsStack"
  "ed\020\023\032\030\302>\025Average Camps Stacked\022(\n\020k_eTot"
  "alLastHits\020\024\032\022\302>\017Total Last Hits\022,\n\022k_eA"
  "verageLastHits\020\025\032\024\302>\021Average Last Hits\022#"
  "\n\016k_eTotalDenies\020\026\032\017\302>\014Total Denies\022\'\n\020k"
  "_eAverageDenies\020\027\032\021\302>\016Average Denies\022q\n "
  "k_eTotalGamesWithRoshanAdvantage\020\030\032K\302>HT"
  "otal Games With Roshan Advantage (Player"
  " team killed Roshan more times)\022q\n\"k_ePe"
  "rcentGamesWithRoshanAdvantage\020\031\032I\302>FPct "
  "Games With Roshan Advantage (Player team"
  " killed Roshan more times)\0224\n\026k_eAverage"
  "StunDuration\020\032\032\030\302>\025Average Stun Duration"
  "\0220\n\024k_eTotalStunDuration\020\033\032\026\302>\023Total Stu"
  "n Duration\0226\n\027k_eAverageTeleportsUsed\020\034\032"
  "\031\302>\026Average Teleports Used\0222\n\025k_eTotalTe"
  "leportsUsed\020\035\032\027\302>\024Total Teleports Used\0220"
  "\n\024k_eAverageHeroDamage\020\036\032\026\302>\023Average Her"
  "o Damage\022,\n\022k_eTotalHeroDamage\020\037\032\024\302>\021Tot"
  "al Hero Damage\0222\n\025k_eAverageHeroHealing\020"
  " \032\027\302>\024Average Hero Healing\022.\n\023k_eTotalHe"
  "roHealing\020!\032\025\302>\022Total Hero Healing\0222\n\025k_"
  "eAverageTowerDamage\020\"\032\027\302>\024Average Tower "
  "Damage\022.\n\023k_eTotalTowerDamage\020#\032\025\302>\022Tota"
  "l Tower Damage\022(\n\020k_eMaxLossStreak\020$\032\022\302>"
  "\017Max Loss Streak\0224\n\026k_eAverageGameDurati"
  "on\020%\032\030\302>\025Average Game Duration\022,\n\022k_eMax"
  "GameDuration\020&\032\024\302>\021Max Game Duration\022,\n\022"
  "k_eMinGameDuration\020\'\032\024\302>\021Min Game Durati"
  "on\0222\n\025k_eAverageWinDuration\020(\032\027\302>\024Averag"
  "e Win Duration\022*\n\021k_eMaxWinDuration\020)\032\023\302"
  ">\020Max Win Duration\022*\n\021k_eMinWinDuration\020"
  "*\032\023\302>\020Min Win Duration\0224\n\026k_eAverageLoss"
  "Duration\020+\032\030\302>\025Average Loss Duration\022,\n\022"
  "k_eMaxLossDuration\020,\032\024\302>\021Max Loss Durati"
  "on\022,\n\022k_eMinLossDuration\020-\032\024\302>\021Min Loss "
  "Duration\022M\n\034k_ePctGamesEnemyT1TakenFirst"
  "\020.\032+\302>(Pct Games With Enemy Lane T1 Take"
  "n First\022,\n\022k_eMaxCampsStacked\020/\032\024\302>\021Max "
  "Camps Stacked\022!\n\rk_eMaxDewards\0200\032\016\302>\013Max"
  " Dewards\022*\n\021k_eMaxRoshanKills\0201\032\023\302>\020Max "
  "Roshan Kills\0225\n\026k_eMaxBountyRunesTaken\0202"
  "\032\031\302>\026Max Bounty Runes Taken\0223\n\025k_eMaxPow"
  "erRunesTaken\0203\032\030\302>\025Max Power Runes Taken"
  "\022\037\n\014k_eMaxDeaths\0204\032\r\302>\nMax Deaths\022$\n\016k_e"
  "MaxLastHits\0205\032\020\302>\rMax Last Hits\022\037\n\014k_eMa"
  "xDenies\0206\032\r\302>\nMax Denies\022)\n\021k_eRadiantWi"
  "nRate\0207\032\022\302>\017Radiant Winrate\022#\n\016k_eDireWi"
  "nRate\0208\032\017\302>\014Dire Winrate\022.\n\023k_eRadiantGa"
  "meCount\0209\032\025\302>\022Radiant Game Count\022(\n\020k_eD"
  "ireGameCount\020:\032\022\302>\017Dire Game Count\022$\n\014k_"
  "eMaxDamage\020;\032\022\302>\017Max Hero Damage\022!\n\rk_eM"
  "axHealing\020<\032\016\302>\013Max Healing\022*\n\021k_eMaxTow"
  "erDamage\020=\032\023\302>\020Max Tower Damage\022!\n\rk_eAv"
  "erageGPM\020>\032\016\302>\013Average GPM\022\031\n\tk_eMaxGPM\020"
  "\?\032\n\302>\007Max GPM\022!\n\rk_eAverageXPM\020@\032\016\302>\013Ave"
  "rage XPM\022\031\n\tk_eMaxXPM\020A\032\n\302>\007Max XPM*\207\001\n\""
  "CMsgBattleReport_HighlightCategory\022#\n\023k_"
  "eHighlightGeneral\020\000\032\n\302>\007General\022\035\n\020k_eHi"
  "ghlightHero\020\001\032\007\302>\004Hero\022\035\n\020k_eHighlightRo"
  "le\020\002\032\007\302>\004Role*\334\001\n\025CMsgBattleReport_Role\022"
  " \n\016k_eUnknownRole\020\377\377\377\377\377\377\377\377\377\001\032\003\320>\001\022\035\n\013k_e"
  "Safelane\020\000\032\014\302>\tSafe Lane\022\033\n\nk_eMidlane\020\001"
  "\032\013\302>\010Mid Lane\022\033\n\nk_eOfflane\020\002\032\013\302>\010Off La"
  "ne\022#\n\016k_eSoftSupport\020\003\032\017\302>\014Soft Support\022"
  "#\n\016k_eHardSupport\020\004\032\017\302>\014Hard Support*\206\002\n"
  "\037CMsgBattleReport_CompareContext\022*\n\030k_eC"
  "ompareContextInvalid\020\377\377\377\377\377\377\377\377\377\001\032\003\320>\001\022&\n\020"
  "k_eAbsoluteValue\020\000\032\020\302>\rOverall Value\0222\n\027"
  "k_ePlayersOfSimilarRank\020\001\032\025\302>\022Vs Rank Po"
  "pulation\022$\n\rk_eAllPlayers\020\002\032\021\302>\016Vs All P"
  "layers\0225\n\031k_ePlayersPersonalHistory\020\003\032\026\302"
  ">\023Vs Personal History*\373\001\n\036CMsgBattleRepo"
  "rt_HighlightTier\022-\n\023k_eHighlightTierLow\020"
  "\377\377\377\377\377\377\377\377\377\001\032\013\302>\010Tier Low\022\035\n\024k_eHighlightT"
  "ierNone\020\000\032\003\320>\001\022 \n\021k_eHighlightTier1\020\001\032\t\302"
  ">\006Tier 1\022 \n\021k_eHighlightTier2\020\002\032\t\302>\006Tier"
  " 2\022 \n\021k_eHighlightTier3\020\003\032\t\302>\006Tier 3\022%\n\026"
  "k_eHighlightTierCustom\020\004\032\t\302>\006Custom*\213\001\n "
  "CMsgBattleReport_HighlightRarity\022!\n\022k_eH"
  "ighlightCommon\020\000\032\t\302>\006Common\022%\n\024k_eHighli"
  "ghtUncommon\020\001\032\013\302>\010Uncommon\022\035\n\020k_eHighlig"
  "htRare\020\002\032\007\302>\004Rare*4\n\031CMsgBattleReport_EO"
  "utcome\022\n\n\006k_eWin\020\000\022\013\n\007k_eLoss\020\001*u\n\035CMsgB"
  "attleReport_ELaneOutcome\022\"\n\025k_eUnknownLa"
  "neOutcome\020\377\377\377\377\377\377\377\377\377\001\022\016\n\nk_eWonLane\020\000\022\017\n\013"
  "k_eLostLane\020\001\022\017\n\013k_eEvenLane\020\002"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_dota_5fgcmessages_5fclient_5fbattle_5freport_2eproto_deps[9] = {
  &::descriptor_table_base_5fgcmessages_2eproto,
  &::descriptor_table_dota_5fgcmessages_5fclient_2eproto,
  &::descriptor_table_dota_5fgcmessages_5fcommon_2eproto,
  &::descriptor_table_dota_5fgcmessages_5fwebapi_2eproto,
  &::descriptor_table_dota_5fshared_5fenums_2eproto,
  &::descriptor_table_econ_5fgcmessages_2eproto,
  &::descriptor_table_gcsdk_5fgcmessages_2eproto,
  &::descriptor_table_steammessages_2eproto,
  &::descriptor_table_valveextensions_2eproto,
};
static ::_pbi::once_flag descriptor_table_dota_5fgcmessages_5fclient_5fbattle_5freport_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_dota_5fgcmessages_5fclient_5fbattle_5freport_2eproto = {
    false, false, 11990, descriptor_table_protodef_dota_5fgcmessages_5fclient_5fbattle_5freport_2eproto,
    "dota_gcmessages_client_battle_report.proto",
    &descriptor_table_dota_5fgcmessages_5fclient_5fbattle_5freport_2eproto_once, descriptor_table_dota_5fgcmessages_5fclient_5fbattle_5freport_2eproto_deps, 9, 23,
    schemas, file_default_instances, TableStruct_dota_5fgcmessages_5fclient_5fbattle_5freport_2eproto::offsets,
    file_level_metadata_dota_5fgcmessages_5fclient_5fbattle_5freport_2eproto, file_level_enum_descriptors_dota_5fgcmessages_5fclient_5fbattle_5freport_2eproto,
    file_level_service_descriptors_dota_5fgcmessages_5fclient_5fbattle_5freport_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_dota_5fgcmessages_5fclient_5fbattle_5freport_2eproto_getter() {
  return &descriptor_table_dota_5fgcmessages_5fclient_5fbattle_5freport_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_dota_5fgcmessages_5fclient_5fbattle_5freport_2eproto(&descriptor_table_dota_5fgcmessages_5fclient_5fbattle_5freport_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgClientToGCGetBattleReportResponse_EResponse_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fclient_5fbattle_5freport_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fclient_5fbattle_5freport_2eproto[0];
}
bool CMsgClientToGCGetBattleReportResponse_EResponse_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CMsgClientToGCGetBattleReportResponse_EResponse CMsgClientToGCGetBattleReportResponse::k_eInternalError;
constexpr CMsgClientToGCGetBattleReportResponse_EResponse CMsgClientToGCGetBattleReportResponse::k_eSuccess;
constexpr CMsgClientToGCGetBattleReportResponse_EResponse CMsgClientToGCGetBattleReportResponse::k_eTooBusy;
constexpr CMsgClientToGCGetBattleReportResponse_EResponse CMsgClientToGCGetBattleReportResponse::k_eDisabled;
constexpr CMsgClientToGCGetBattleReportResponse_EResponse CMsgClientToGCGetBattleReportResponse::k_ePermissionDenied;
constexpr CMsgClientToGCGetBattleReportResponse_EResponse CMsgClientToGCGetBattleReportResponse::k_eNotSubscribedToDotaPlus;
constexpr CMsgClientToGCGetBattleReportResponse_EResponse CMsgClientToGCGetBattleReportResponse::k_eInvalidParameters;
constexpr CMsgClientToGCGetBattleReportResponse_EResponse CMsgClientToGCGetBattleReportResponse::k_eUnableToGetPlusSubInfo;
constexpr CMsgClientToGCGetBattleReportResponse_EResponse CMsgClientToGCGetBattleReportResponse::k_eUnableToLoadBattleReport;
constexpr CMsgClientToGCGetBattleReportResponse_EResponse CMsgClientToGCGetBattleReportResponse::k_eUnableToSaveBattleReport;
constexpr CMsgClientToGCGetBattleReportResponse_EResponse CMsgClientToGCGetBattleReportResponse::k_eUnableToGetAggregates;
constexpr CMsgClientToGCGetBattleReportResponse_EResponse CMsgClientToGCGetBattleReportResponse::k_eNotEnoughGamesPlayed;
constexpr CMsgClientToGCGetBattleReportResponse_EResponse CMsgClientToGCGetBattleReportResponse::EResponse_MIN;
constexpr CMsgClientToGCGetBattleReportResponse_EResponse CMsgClientToGCGetBattleReportResponse::EResponse_MAX;
constexpr int CMsgClientToGCGetBattleReportResponse::EResponse_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgClientToGCGetBattleReportAggregateStatsResponse_EResponse_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fclient_5fbattle_5freport_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fclient_5fbattle_5freport_2eproto[1];
}
bool CMsgClientToGCGetBattleReportAggregateStatsResponse_EResponse_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CMsgClientToGCGetBattleReportAggregateStatsResponse_EResponse CMsgClientToGCGetBattleReportAggregateStatsResponse::k_eInternalError;
constexpr CMsgClientToGCGetBattleReportAggregateStatsResponse_EResponse CMsgClientToGCGetBattleReportAggregateStatsResponse::k_eSuccess;
constexpr CMsgClientToGCGetBattleReportAggregateStatsResponse_EResponse CMsgClientToGCGetBattleReportAggregateStatsResponse::k_eTooBusy;
constexpr CMsgClientToGCGetBattleReportAggregateStatsResponse_EResponse CMsgClientToGCGetBattleReportAggregateStatsResponse::k_eDisabled;
constexpr CMsgClientToGCGetBattleReportAggregateStatsResponse_EResponse CMsgClientToGCGetBattleReportAggregateStatsResponse::k_ePermissionDenied;
constexpr CMsgClientToGCGetBattleReportAggregateStatsResponse_EResponse CMsgClientToGCGetBattleReportAggregateStatsResponse::k_eInvalidParams;
constexpr CMsgClientToGCGetBattleReportAggregateStatsResponse_EResponse CMsgClientToGCGetBattleReportAggregateStatsResponse::k_eNotSubscribedToDotaPlus;
constexpr CMsgClientToGCGetBattleReportAggregateStatsResponse_EResponse CMsgClientToGCGetBattleReportAggregateStatsResponse::EResponse_MIN;
constexpr CMsgClientToGCGetBattleReportAggregateStatsResponse_EResponse CMsgClientToGCGetBattleReportAggregateStatsResponse::EResponse_MAX;
constexpr int CMsgClientToGCGetBattleReportAggregateStatsResponse::EResponse_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgClientToGCGetBattleReportInfoResponse_EResponse_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fclient_5fbattle_5freport_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fclient_5fbattle_5freport_2eproto[2];
}
bool CMsgClientToGCGetBattleReportInfoResponse_EResponse_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CMsgClientToGCGetBattleReportInfoResponse_EResponse CMsgClientToGCGetBattleReportInfoResponse::k_eInternalError;
constexpr CMsgClientToGCGetBattleReportInfoResponse_EResponse CMsgClientToGCGetBattleReportInfoResponse::k_eSuccess;
constexpr CMsgClientToGCGetBattleReportInfoResponse_EResponse CMsgClientToGCGetBattleReportInfoResponse::k_eTooBusy;
constexpr CMsgClientToGCGetBattleReportInfoResponse_EResponse CMsgClientToGCGetBattleReportInfoResponse::k_eDisabled;
constexpr CMsgClientToGCGetBattleReportInfoResponse_EResponse CMsgClientToGCGetBattleReportInfoResponse::k_ePermissionDenied;
constexpr CMsgClientToGCGetBattleReportInfoResponse_EResponse CMsgClientToGCGetBattleReportInfoResponse::k_eNotSubscribedToDotaPlus;
constexpr CMsgClientToGCGetBattleReportInfoResponse_EResponse CMsgClientToGCGetBattleReportInfoResponse::EResponse_MIN;
constexpr CMsgClientToGCGetBattleReportInfoResponse_EResponse CMsgClientToGCGetBattleReportInfoResponse::EResponse_MAX;
constexpr int CMsgClientToGCGetBattleReportInfoResponse::EResponse_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgClientToGCAcknowledgeBattleReportResponse_EResponse_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fclient_5fbattle_5freport_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fclient_5fbattle_5freport_2eproto[3];
}
bool CMsgClientToGCAcknowledgeBattleReportResponse_EResponse_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CMsgClientToGCAcknowledgeBattleReportResponse_EResponse CMsgClientToGCAcknowledgeBattleReportResponse::k_eInternalError;
constexpr CMsgClientToGCAcknowledgeBattleReportResponse_EResponse CMsgClientToGCAcknowledgeBattleReportResponse::k_eSuccess;
constexpr CMsgClientToGCAcknowledgeBattleReportResponse_EResponse CMsgClientToGCAcknowledgeBattleReportResponse::k_eTooBusy;
constexpr CMsgClientToGCAcknowledgeBattleReportResponse_EResponse CMsgClientToGCAcknowledgeBattleReportResponse::k_eDisabled;
constexpr CMsgClientToGCAcknowledgeBattleReportResponse_EResponse CMsgClientToGCAcknowledgeBattleReportResponse::k_eTimeout;
constexpr CMsgClientToGCAcknowledgeBattleReportResponse_EResponse CMsgClientToGCAcknowledgeBattleReportResponse::k_ePermissionDenied;
constexpr CMsgClientToGCAcknowledgeBattleReportResponse_EResponse CMsgClientToGCAcknowledgeBattleReportResponse::k_eUnableToLoadBattleReport;
constexpr CMsgClientToGCAcknowledgeBattleReportResponse_EResponse CMsgClientToGCAcknowledgeBattleReportResponse::k_eAlreadyAcknowledged;
constexpr CMsgClientToGCAcknowledgeBattleReportResponse_EResponse CMsgClientToGCAcknowledgeBattleReportResponse::k_eUnknownReport;
constexpr CMsgClientToGCAcknowledgeBattleReportResponse_EResponse CMsgClientToGCAcknowledgeBattleReportResponse::k_eNotSubscribedToDotaPlus;
constexpr CMsgClientToGCAcknowledgeBattleReportResponse_EResponse CMsgClientToGCAcknowledgeBattleReportResponse::k_eNotEnoughGamesPlayed;
constexpr CMsgClientToGCAcknowledgeBattleReportResponse_EResponse CMsgClientToGCAcknowledgeBattleReportResponse::EResponse_MIN;
constexpr CMsgClientToGCAcknowledgeBattleReportResponse_EResponse CMsgClientToGCAcknowledgeBattleReportResponse::EResponse_MAX;
constexpr int CMsgClientToGCAcknowledgeBattleReportResponse::EResponse_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgClientToGCGetBattleReportMatchHistoryResponse_EResponse_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fclient_5fbattle_5freport_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fclient_5fbattle_5freport_2eproto[4];
}
bool CMsgClientToGCGetBattleReportMatchHistoryResponse_EResponse_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CMsgClientToGCGetBattleReportMatchHistoryResponse_EResponse CMsgClientToGCGetBattleReportMatchHistoryResponse::k_eInternalError;
constexpr CMsgClientToGCGetBattleReportMatchHistoryResponse_EResponse CMsgClientToGCGetBattleReportMatchHistoryResponse::k_eSuccess;
constexpr CMsgClientToGCGetBattleReportMatchHistoryResponse_EResponse CMsgClientToGCGetBattleReportMatchHistoryResponse::k_eTooBusy;
constexpr CMsgClientToGCGetBattleReportMatchHistoryResponse_EResponse CMsgClientToGCGetBattleReportMatchHistoryResponse::k_eDisabled;
constexpr CMsgClientToGCGetBattleReportMatchHistoryResponse_EResponse CMsgClientToGCGetBattleReportMatchHistoryResponse::k_eTimeout;
constexpr CMsgClientToGCGetBattleReportMatchHistoryResponse_EResponse CMsgClientToGCGetBattleReportMatchHistoryResponse::k_ePermissionDenied;
constexpr CMsgClientToGCGetBattleReportMatchHistoryResponse_EResponse CMsgClientToGCGetBattleReportMatchHistoryResponse::k_eNotSubscribedToDotaPlus;
constexpr CMsgClientToGCGetBattleReportMatchHistoryResponse_EResponse CMsgClientToGCGetBattleReportMatchHistoryResponse::EResponse_MIN;
constexpr CMsgClientToGCGetBattleReportMatchHistoryResponse_EResponse CMsgClientToGCGetBattleReportMatchHistoryResponse::EResponse_MAX;
constexpr int CMsgClientToGCGetBattleReportMatchHistoryResponse::EResponse_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgBattleReport_HighlightType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fclient_5fbattle_5freport_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fclient_5fbattle_5freport_2eproto[5];
}
bool CMsgBattleReport_HighlightType_IsValid(int value) {
  switch (value) {
    case -1:
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgBattleReport_HighlightCategory_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fclient_5fbattle_5freport_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fclient_5fbattle_5freport_2eproto[6];
}
bool CMsgBattleReport_HighlightCategory_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgBattleReport_Role_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fclient_5fbattle_5freport_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fclient_5fbattle_5freport_2eproto[7];
}
bool CMsgBattleReport_Role_IsValid(int value) {
  switch (value) {
    case -1:
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgBattleReport_CompareContext_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fclient_5fbattle_5freport_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fclient_5fbattle_5freport_2eproto[8];
}
bool CMsgBattleReport_CompareContext_IsValid(int value) {
  switch (value) {
    case -1:
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgBattleReport_HighlightTier_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fclient_5fbattle_5freport_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fclient_5fbattle_5freport_2eproto[9];
}
bool CMsgBattleReport_HighlightTier_IsValid(int value) {
  switch (value) {
    case -1:
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgBattleReport_HighlightRarity_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fclient_5fbattle_5freport_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fclient_5fbattle_5freport_2eproto[10];
}
bool CMsgBattleReport_HighlightRarity_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgBattleReport_EOutcome_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fclient_5fbattle_5freport_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fclient_5fbattle_5freport_2eproto[11];
}
bool CMsgBattleReport_EOutcome_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgBattleReport_ELaneOutcome_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fclient_5fbattle_5freport_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fclient_5fbattle_5freport_2eproto[12];
}
bool CMsgBattleReport_ELaneOutcome_IsValid(int value) {
  switch (value) {
    case -1:
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class CMsgClientToGCGetBattleReport::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCGetBattleReport>()._impl_._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgClientToGCGetBattleReport::CMsgClientToGCGetBattleReport(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCGetBattleReport)
}
CMsgClientToGCGetBattleReport::CMsgClientToGCGetBattleReport(const CMsgClientToGCGetBattleReport& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgClientToGCGetBattleReport* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.account_id_){}
    , decltype(_impl_.timestamp_){}
    , decltype(_impl_.duration_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.account_id_, &from._impl_.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.duration_) -
    reinterpret_cast<char*>(&_impl_.account_id_)) + sizeof(_impl_.duration_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCGetBattleReport)
}

inline void CMsgClientToGCGetBattleReport::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.account_id_){0u}
    , decltype(_impl_.timestamp_){0u}
    , decltype(_impl_.duration_){0u}
  };
}

CMsgClientToGCGetBattleReport::~CMsgClientToGCGetBattleReport() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCGetBattleReport)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgClientToGCGetBattleReport::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientToGCGetBattleReport::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgClientToGCGetBattleReport::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCGetBattleReport)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.duration_) -
        reinterpret_cast<char*>(&_impl_.account_id_)) + sizeof(_impl_.duration_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCGetBattleReport::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          _impl_.account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_timestamp(&has_bits);
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 duration = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_duration(&has_bits);
          _impl_.duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientToGCGetBattleReport::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCGetBattleReport)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional uint32 timestamp = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_timestamp(), target);
  }

  // optional uint32 duration = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_duration(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCGetBattleReport)
  return target;
}

size_t CMsgClientToGCGetBattleReport::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCGetBattleReport)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_account_id());
    }

    // optional uint32 timestamp = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_timestamp());
    }

    // optional uint32 duration = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_duration());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientToGCGetBattleReport::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgClientToGCGetBattleReport::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientToGCGetBattleReport::GetClassData() const { return &_class_data_; }


void CMsgClientToGCGetBattleReport::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgClientToGCGetBattleReport*>(&to_msg);
  auto& from = static_cast<const CMsgClientToGCGetBattleReport&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCGetBattleReport)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.account_id_ = from._impl_.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.timestamp_ = from._impl_.timestamp_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.duration_ = from._impl_.duration_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientToGCGetBattleReport::CopyFrom(const CMsgClientToGCGetBattleReport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCGetBattleReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCGetBattleReport::IsInitialized() const {
  return true;
}

void CMsgClientToGCGetBattleReport::InternalSwap(CMsgClientToGCGetBattleReport* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientToGCGetBattleReport, _impl_.duration_)
      + sizeof(CMsgClientToGCGetBattleReport::_impl_.duration_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientToGCGetBattleReport, _impl_.account_id_)>(
          reinterpret_cast<char*>(&_impl_.account_id_),
          reinterpret_cast<char*>(&other->_impl_.account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCGetBattleReport::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fbattle_5freport_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fbattle_5freport_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fbattle_5freport_2eproto[0]);
}

// ===================================================================

class CMsgBattleReport_Game::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgBattleReport_Game>()._impl_._has_bits_);
  static void set_has_hero_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_kills(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_deaths(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_assists(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_rank_change(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_last_hits(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_denies(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_gpm(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_xpm(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_role(HasBits* has_bits) {
    (*has_bits)[1] |= 512u;
  }
  static void set_has_outcome(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_lane_outcome(HasBits* has_bits) {
    (*has_bits)[1] |= 1024u;
  }
  static void set_has_ranked(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_match_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_lane_selection_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_predicted_position(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_seconds_dead(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_winning_team(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_player_slot(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_party_game(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_start_time(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_bounty_runes(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_water_runes(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_power_runes(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_time_enemy_t1_tower_destroyed(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_time_friendly_t1_tower_destroyed(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_enemy_roshan_kills(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_teleports_used(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_dewards(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_camps_stacked(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_support_gold(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_hero_damage(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_hero_healing(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_tower_damage(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_successful_smokes(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static void set_has_stun_duration(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static void set_has_duration(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static void set_has_friendly_roshan_kills(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static void set_has_previous_rank(HasBits* has_bits) {
    (*has_bits)[1] |= 16u;
  }
  static void set_has_game_mode(HasBits* has_bits) {
    (*has_bits)[1] |= 32u;
  }
  static void set_has_lobby_type(HasBits* has_bits) {
    (*has_bits)[1] |= 64u;
  }
  static void set_has_time_purchased_shard(HasBits* has_bits) {
    (*has_bits)[1] |= 128u;
  }
  static void set_has_time_purchased_scepter(HasBits* has_bits) {
    (*has_bits)[1] |= 256u;
  }
  static void set_has_item0(HasBits* has_bits) {
    (*has_bits)[1] |= 2048u;
  }
  static void set_has_item1(HasBits* has_bits) {
    (*has_bits)[1] |= 4096u;
  }
  static void set_has_item2(HasBits* has_bits) {
    (*has_bits)[1] |= 8192u;
  }
  static void set_has_item3(HasBits* has_bits) {
    (*has_bits)[1] |= 16384u;
  }
  static void set_has_item4(HasBits* has_bits) {
    (*has_bits)[1] |= 32768u;
  }
  static void set_has_item5(HasBits* has_bits) {
    (*has_bits)[1] |= 65536u;
  }
};

CMsgBattleReport_Game::CMsgBattleReport_Game(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgBattleReport_Game)
}
CMsgBattleReport_Game::CMsgBattleReport_Game(const CMsgBattleReport_Game& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgBattleReport_Game* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.hero_id_){}
    , decltype(_impl_.kills_){}
    , decltype(_impl_.deaths_){}
    , decltype(_impl_.assists_){}
    , decltype(_impl_.rank_change_){}
    , decltype(_impl_.last_hits_){}
    , decltype(_impl_.gpm_){}
    , decltype(_impl_.xpm_){}
    , decltype(_impl_.outcome_){}
    , decltype(_impl_.lane_selection_flags_){}
    , decltype(_impl_.match_id_){}
    , decltype(_impl_.predicted_position_){}
    , decltype(_impl_.ranked_){}
    , decltype(_impl_.party_game_){}
    , decltype(_impl_.seconds_dead_){}
    , decltype(_impl_.winning_team_){}
    , decltype(_impl_.start_time_){}
    , decltype(_impl_.denies_){}
    , decltype(_impl_.bounty_runes_){}
    , decltype(_impl_.water_runes_){}
    , decltype(_impl_.power_runes_){}
    , decltype(_impl_.time_enemy_t1_tower_destroyed_){}
    , decltype(_impl_.time_friendly_t1_tower_destroyed_){}
    , decltype(_impl_.enemy_roshan_kills_){}
    , decltype(_impl_.player_slot_){}
    , decltype(_impl_.teleports_used_){}
    , decltype(_impl_.dewards_){}
    , decltype(_impl_.camps_stacked_){}
    , decltype(_impl_.support_gold_){}
    , decltype(_impl_.hero_damage_){}
    , decltype(_impl_.hero_healing_){}
    , decltype(_impl_.tower_damage_){}
    , decltype(_impl_.successful_smokes_){}
    , decltype(_impl_.stun_duration_){}
    , decltype(_impl_.duration_){}
    , decltype(_impl_.friendly_roshan_kills_){}
    , decltype(_impl_.previous_rank_){}
    , decltype(_impl_.game_mode_){}
    , decltype(_impl_.lobby_type_){}
    , decltype(_impl_.time_purchased_shard_){}
    , decltype(_impl_.time_purchased_scepter_){}
    , decltype(_impl_.role_){}
    , decltype(_impl_.lane_outcome_){}
    , decltype(_impl_.item0_){}
    , decltype(_impl_.item1_){}
    , decltype(_impl_.item2_){}
    , decltype(_impl_.item3_){}
    , decltype(_impl_.item4_){}
    , decltype(_impl_.item5_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.hero_id_, &from._impl_.hero_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.item5_) -
    reinterpret_cast<char*>(&_impl_.hero_id_)) + sizeof(_impl_.item5_));
  // @@protoc_insertion_point(copy_constructor:CMsgBattleReport_Game)
}

inline void CMsgBattleReport_Game::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.hero_id_){0u}
    , decltype(_impl_.kills_){0u}
    , decltype(_impl_.deaths_){0u}
    , decltype(_impl_.assists_){0u}
    , decltype(_impl_.rank_change_){0}
    , decltype(_impl_.last_hits_){0u}
    , decltype(_impl_.gpm_){0u}
    , decltype(_impl_.xpm_){0u}
    , decltype(_impl_.outcome_){0}
    , decltype(_impl_.lane_selection_flags_){0u}
    , decltype(_impl_.match_id_){uint64_t{0u}}
    , decltype(_impl_.predicted_position_){0u}
    , decltype(_impl_.ranked_){false}
    , decltype(_impl_.party_game_){false}
    , decltype(_impl_.seconds_dead_){0u}
    , decltype(_impl_.winning_team_){0u}
    , decltype(_impl_.start_time_){0u}
    , decltype(_impl_.denies_){0u}
    , decltype(_impl_.bounty_runes_){0u}
    , decltype(_impl_.water_runes_){0u}
    , decltype(_impl_.power_runes_){0u}
    , decltype(_impl_.time_enemy_t1_tower_destroyed_){0u}
    , decltype(_impl_.time_friendly_t1_tower_destroyed_){0u}
    , decltype(_impl_.enemy_roshan_kills_){0u}
    , decltype(_impl_.player_slot_){0u}
    , decltype(_impl_.teleports_used_){0u}
    , decltype(_impl_.dewards_){0u}
    , decltype(_impl_.camps_stacked_){0u}
    , decltype(_impl_.support_gold_){0u}
    , decltype(_impl_.hero_damage_){0u}
    , decltype(_impl_.hero_healing_){0u}
    , decltype(_impl_.tower_damage_){0u}
    , decltype(_impl_.successful_smokes_){0u}
    , decltype(_impl_.stun_duration_){0u}
    , decltype(_impl_.duration_){0u}
    , decltype(_impl_.friendly_roshan_kills_){0u}
    , decltype(_impl_.previous_rank_){0}
    , decltype(_impl_.game_mode_){0u}
    , decltype(_impl_.lobby_type_){0u}
    , decltype(_impl_.time_purchased_shard_){0}
    , decltype(_impl_.time_purchased_scepter_){0}
    , decltype(_impl_.role_){-1}
    , decltype(_impl_.lane_outcome_){-1}
    , decltype(_impl_.item0_){-1}
    , decltype(_impl_.item1_){-1}
    , decltype(_impl_.item2_){-1}
    , decltype(_impl_.item3_){-1}
    , decltype(_impl_.item4_){-1}
    , decltype(_impl_.item5_){-1}
  };
}

CMsgBattleReport_Game::~CMsgBattleReport_Game() {
  // @@protoc_insertion_point(destructor:CMsgBattleReport_Game)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgBattleReport_Game::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgBattleReport_Game::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgBattleReport_Game::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgBattleReport_Game)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.hero_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.xpm_) -
        reinterpret_cast<char*>(&_impl_.hero_id_)) + sizeof(_impl_.xpm_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.outcome_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.winning_team_) -
        reinterpret_cast<char*>(&_impl_.outcome_)) + sizeof(_impl_.winning_team_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&_impl_.start_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.enemy_roshan_kills_) -
        reinterpret_cast<char*>(&_impl_.start_time_)) + sizeof(_impl_.enemy_roshan_kills_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&_impl_.player_slot_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.tower_damage_) -
        reinterpret_cast<char*>(&_impl_.player_slot_)) + sizeof(_impl_.tower_damage_));
  }
  cached_has_bits = _impl_._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.successful_smokes_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.time_purchased_shard_) -
        reinterpret_cast<char*>(&_impl_.successful_smokes_)) + sizeof(_impl_.time_purchased_shard_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    _impl_.time_purchased_scepter_ = 0;
    _impl_.role_ = -1;
    _impl_.lane_outcome_ = -1;
    _impl_.item0_ = -1;
    _impl_.item1_ = -1;
    _impl_.item2_ = -1;
    _impl_.item3_ = -1;
    _impl_.item4_ = -1;
  }
  _impl_.item5_ = -1;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgBattleReport_Game::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 hero_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_hero_id(&_impl_._has_bits_);
          _impl_.hero_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 kills = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_kills(&_impl_._has_bits_);
          _impl_.kills_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 deaths = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_deaths(&_impl_._has_bits_);
          _impl_.deaths_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 assists = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_assists(&_impl_._has_bits_);
          _impl_.assists_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 rank_change = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_rank_change(&_impl_._has_bits_);
          _impl_.rank_change_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 last_hits = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_last_hits(&_impl_._has_bits_);
          _impl_.last_hits_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 gpm = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_gpm(&_impl_._has_bits_);
          _impl_.gpm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 xpm = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_xpm(&_impl_._has_bits_);
          _impl_.xpm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgBattleReport_Role role = 9 [default = k_eUnknownRole];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgBattleReport_Role_IsValid(val))) {
            _internal_set_role(static_cast<::CMsgBattleReport_Role>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(9, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgBattleReport_EOutcome outcome = 10 [default = k_eWin];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgBattleReport_EOutcome_IsValid(val))) {
            _internal_set_outcome(static_cast<::CMsgBattleReport_EOutcome>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(10, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgBattleReport_ELaneOutcome lane_outcome = 11 [default = k_eUnknownLaneOutcome];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgBattleReport_ELaneOutcome_IsValid(val))) {
            _internal_set_lane_outcome(static_cast<::CMsgBattleReport_ELaneOutcome>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(11, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bool ranked = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_ranked(&_impl_._has_bits_);
          _impl_.ranked_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 match_id = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_match_id(&_impl_._has_bits_);
          _impl_.match_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 lane_selection_flags = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_lane_selection_flags(&_impl_._has_bits_);
          _impl_.lane_selection_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 predicted_position = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_predicted_position(&_impl_._has_bits_);
          _impl_.predicted_position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 seconds_dead = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_seconds_dead(&_impl_._has_bits_);
          _impl_.seconds_dead_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 winning_team = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_winning_team(&_impl_._has_bits_);
          _impl_.winning_team_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool party_game = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _Internal::set_has_party_game(&_impl_._has_bits_);
          _impl_.party_game_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 start_time = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _Internal::set_has_start_time(&_impl_._has_bits_);
          _impl_.start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 denies = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _Internal::set_has_denies(&_impl_._has_bits_);
          _impl_.denies_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 bounty_runes = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _Internal::set_has_bounty_runes(&_impl_._has_bits_);
          _impl_.bounty_runes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 water_runes = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _Internal::set_has_water_runes(&_impl_._has_bits_);
          _impl_.water_runes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 power_runes = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          _Internal::set_has_power_runes(&_impl_._has_bits_);
          _impl_.power_runes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 time_enemy_t1_tower_destroyed = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          _Internal::set_has_time_enemy_t1_tower_destroyed(&_impl_._has_bits_);
          _impl_.time_enemy_t1_tower_destroyed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 time_friendly_t1_tower_destroyed = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          _Internal::set_has_time_friendly_t1_tower_destroyed(&_impl_._has_bits_);
          _impl_.time_friendly_t1_tower_destroyed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 enemy_roshan_kills = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          _Internal::set_has_enemy_roshan_kills(&_impl_._has_bits_);
          _impl_.enemy_roshan_kills_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 player_slot = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 224)) {
          _Internal::set_has_player_slot(&_impl_._has_bits_);
          _impl_.player_slot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 teleports_used = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 232)) {
          _Internal::set_has_teleports_used(&_impl_._has_bits_);
          _impl_.teleports_used_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 dewards = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 240)) {
          _Internal::set_has_dewards(&_impl_._has_bits_);
          _impl_.dewards_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 camps_stacked = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 248)) {
          _Internal::set_has_camps_stacked(&_impl_._has_bits_);
          _impl_.camps_stacked_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 support_gold = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 0)) {
          _Internal::set_has_support_gold(&_impl_._has_bits_);
          _impl_.support_gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 hero_damage = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_hero_damage(&_impl_._has_bits_);
          _impl_.hero_damage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 hero_healing = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_hero_healing(&_impl_._has_bits_);
          _impl_.hero_healing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 tower_damage = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_tower_damage(&_impl_._has_bits_);
          _impl_.tower_damage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 successful_smokes = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_successful_smokes(&_impl_._has_bits_);
          _impl_.successful_smokes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 stun_duration = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_stun_duration(&_impl_._has_bits_);
          _impl_.stun_duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 duration = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_duration(&_impl_._has_bits_);
          _impl_.duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 friendly_roshan_kills = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_friendly_roshan_kills(&_impl_._has_bits_);
          _impl_.friendly_roshan_kills_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 previous_rank = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_previous_rank(&_impl_._has_bits_);
          _impl_.previous_rank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 game_mode = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_game_mode(&_impl_._has_bits_);
          _impl_.game_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 lobby_type = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_lobby_type(&_impl_._has_bits_);
          _impl_.lobby_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float time_purchased_shard = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 93)) {
          _Internal::set_has_time_purchased_shard(&_impl_._has_bits_);
          _impl_.time_purchased_shard_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float time_purchased_scepter = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 101)) {
          _Internal::set_has_time_purchased_scepter(&_impl_._has_bits_);
          _impl_.time_purchased_scepter_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional int32 item0 = 45 [default = -1];
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_item0(&_impl_._has_bits_);
          _impl_.item0_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 item1 = 46 [default = -1];
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_item1(&_impl_._has_bits_);
          _impl_.item1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 item2 = 47 [default = -1];
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_item2(&_impl_._has_bits_);
          _impl_.item2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 item3 = 48 [default = -1];
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_item3(&_impl_._has_bits_);
          _impl_.item3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 item4 = 49 [default = -1];
      case 49:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_item4(&_impl_._has_bits_);
          _impl_.item4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 item5 = 50 [default = -1];
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_item5(&_impl_._has_bits_);
          _impl_.item5_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgBattleReport_Game::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgBattleReport_Game)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 hero_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_hero_id(), target);
  }

  // optional uint32 kills = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_kills(), target);
  }

  // optional uint32 deaths = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_deaths(), target);
  }

  // optional uint32 assists = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_assists(), target);
  }

  // optional int32 rank_change = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_rank_change(), target);
  }

  // optional uint32 last_hits = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_last_hits(), target);
  }

  // optional uint32 gpm = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_gpm(), target);
  }

  // optional uint32 xpm = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_xpm(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional .CMsgBattleReport_Role role = 9 [default = k_eUnknownRole];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      9, this->_internal_role(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CMsgBattleReport_EOutcome outcome = 10 [default = k_eWin];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      10, this->_internal_outcome(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional .CMsgBattleReport_ELaneOutcome lane_outcome = 11 [default = k_eUnknownLaneOutcome];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      11, this->_internal_lane_outcome(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool ranked = 12;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(12, this->_internal_ranked(), target);
  }

  // optional uint64 match_id = 13;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(13, this->_internal_match_id(), target);
  }

  // optional uint32 lane_selection_flags = 14;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(14, this->_internal_lane_selection_flags(), target);
  }

  // optional uint32 predicted_position = 15;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(15, this->_internal_predicted_position(), target);
  }

  // optional uint32 seconds_dead = 16;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(16, this->_internal_seconds_dead(), target);
  }

  // optional uint32 winning_team = 17;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(17, this->_internal_winning_team(), target);
  }

  // optional bool party_game = 19;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(19, this->_internal_party_game(), target);
  }

  // optional uint32 start_time = 20;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(20, this->_internal_start_time(), target);
  }

  // optional uint32 denies = 21;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(21, this->_internal_denies(), target);
  }

  // optional uint32 bounty_runes = 22;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(22, this->_internal_bounty_runes(), target);
  }

  // optional uint32 water_runes = 23;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(23, this->_internal_water_runes(), target);
  }

  // optional uint32 power_runes = 24;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(24, this->_internal_power_runes(), target);
  }

  // optional uint32 time_enemy_t1_tower_destroyed = 25;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(25, this->_internal_time_enemy_t1_tower_destroyed(), target);
  }

  // optional uint32 time_friendly_t1_tower_destroyed = 26;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(26, this->_internal_time_friendly_t1_tower_destroyed(), target);
  }

  // optional uint32 enemy_roshan_kills = 27;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(27, this->_internal_enemy_roshan_kills(), target);
  }

  // optional uint32 player_slot = 28;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(28, this->_internal_player_slot(), target);
  }

  // optional uint32 teleports_used = 29;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(29, this->_internal_teleports_used(), target);
  }

  // optional uint32 dewards = 30;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(30, this->_internal_dewards(), target);
  }

  // optional uint32 camps_stacked = 31;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(31, this->_internal_camps_stacked(), target);
  }

  // optional uint32 support_gold = 32;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(32, this->_internal_support_gold(), target);
  }

  // optional uint32 hero_damage = 33;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(33, this->_internal_hero_damage(), target);
  }

  // optional uint32 hero_healing = 34;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(34, this->_internal_hero_healing(), target);
  }

  // optional uint32 tower_damage = 35;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(35, this->_internal_tower_damage(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional uint32 successful_smokes = 36;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(36, this->_internal_successful_smokes(), target);
  }

  // optional uint32 stun_duration = 37;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(37, this->_internal_stun_duration(), target);
  }

  // optional uint32 duration = 38;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(38, this->_internal_duration(), target);
  }

  // optional uint32 friendly_roshan_kills = 39;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(39, this->_internal_friendly_roshan_kills(), target);
  }

  // optional int32 previous_rank = 40;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(40, this->_internal_previous_rank(), target);
  }

  // optional uint32 game_mode = 41;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(41, this->_internal_game_mode(), target);
  }

  // optional uint32 lobby_type = 42;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(42, this->_internal_lobby_type(), target);
  }

  // optional float time_purchased_shard = 43;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(43, this->_internal_time_purchased_shard(), target);
  }

  // optional float time_purchased_scepter = 44;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(44, this->_internal_time_purchased_scepter(), target);
  }

  // optional int32 item0 = 45 [default = -1];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(45, this->_internal_item0(), target);
  }

  // optional int32 item1 = 46 [default = -1];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(46, this->_internal_item1(), target);
  }

  // optional int32 item2 = 47 [default = -1];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(47, this->_internal_item2(), target);
  }

  // optional int32 item3 = 48 [default = -1];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(48, this->_internal_item3(), target);
  }

  // optional int32 item4 = 49 [default = -1];
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(49, this->_internal_item4(), target);
  }

  // optional int32 item5 = 50 [default = -1];
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(50, this->_internal_item5(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgBattleReport_Game)
  return target;
}

size_t CMsgBattleReport_Game::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgBattleReport_Game)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 hero_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_hero_id());
    }

    // optional uint32 kills = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_kills());
    }

    // optional uint32 deaths = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_deaths());
    }

    // optional uint32 assists = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_assists());
    }

    // optional int32 rank_change = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_rank_change());
    }

    // optional uint32 last_hits = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_last_hits());
    }

    // optional uint32 gpm = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_gpm());
    }

    // optional uint32 xpm = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_xpm());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .CMsgBattleReport_EOutcome outcome = 10 [default = k_eWin];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_outcome());
    }

    // optional uint32 lane_selection_flags = 14;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_lane_selection_flags());
    }

    // optional uint64 match_id = 13;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_match_id());
    }

    // optional uint32 predicted_position = 15;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_predicted_position());
    }

    // optional bool ranked = 12;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 1;
    }

    // optional bool party_game = 19;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 + 1;
    }

    // optional uint32 seconds_dead = 16;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_seconds_dead());
    }

    // optional uint32 winning_team = 17;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_winning_team());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional uint32 start_time = 20;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_start_time());
    }

    // optional uint32 denies = 21;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_denies());
    }

    // optional uint32 bounty_runes = 22;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_bounty_runes());
    }

    // optional uint32 water_runes = 23;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_water_runes());
    }

    // optional uint32 power_runes = 24;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_power_runes());
    }

    // optional uint32 time_enemy_t1_tower_destroyed = 25;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_time_enemy_t1_tower_destroyed());
    }

    // optional uint32 time_friendly_t1_tower_destroyed = 26;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_time_friendly_t1_tower_destroyed());
    }

    // optional uint32 enemy_roshan_kills = 27;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_enemy_roshan_kills());
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional uint32 player_slot = 28;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_player_slot());
    }

    // optional uint32 teleports_used = 29;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_teleports_used());
    }

    // optional uint32 dewards = 30;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_dewards());
    }

    // optional uint32 camps_stacked = 31;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_camps_stacked());
    }

    // optional uint32 support_gold = 32;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_support_gold());
    }

    // optional uint32 hero_damage = 33;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_hero_damage());
    }

    // optional uint32 hero_healing = 34;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_hero_healing());
    }

    // optional uint32 tower_damage = 35;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_tower_damage());
    }

  }
  cached_has_bits = _impl_._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 successful_smokes = 36;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_successful_smokes());
    }

    // optional uint32 stun_duration = 37;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_stun_duration());
    }

    // optional uint32 duration = 38;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_duration());
    }

    // optional uint32 friendly_roshan_kills = 39;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_friendly_roshan_kills());
    }

    // optional int32 previous_rank = 40;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_previous_rank());
    }

    // optional uint32 game_mode = 41;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_game_mode());
    }

    // optional uint32 lobby_type = 42;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_lobby_type());
    }

    // optional float time_purchased_shard = 43;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 + 4;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional float time_purchased_scepter = 44;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 + 4;
    }

    // optional .CMsgBattleReport_Role role = 9 [default = k_eUnknownRole];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_role());
    }

    // optional .CMsgBattleReport_ELaneOutcome lane_outcome = 11 [default = k_eUnknownLaneOutcome];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_lane_outcome());
    }

    // optional int32 item0 = 45 [default = -1];
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_item0());
    }

    // optional int32 item1 = 46 [default = -1];
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_item1());
    }

    // optional int32 item2 = 47 [default = -1];
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_item2());
    }

    // optional int32 item3 = 48 [default = -1];
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_item3());
    }

    // optional int32 item4 = 49 [default = -1];
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_item4());
    }

  }
  // optional int32 item5 = 50 [default = -1];
  if (cached_has_bits & 0x00010000u) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_item5());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgBattleReport_Game::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgBattleReport_Game::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgBattleReport_Game::GetClassData() const { return &_class_data_; }


void CMsgBattleReport_Game::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgBattleReport_Game*>(&to_msg);
  auto& from = static_cast<const CMsgBattleReport_Game&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgBattleReport_Game)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.hero_id_ = from._impl_.hero_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.kills_ = from._impl_.kills_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.deaths_ = from._impl_.deaths_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.assists_ = from._impl_.assists_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.rank_change_ = from._impl_.rank_change_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.last_hits_ = from._impl_.last_hits_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.gpm_ = from._impl_.gpm_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.xpm_ = from._impl_.xpm_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.outcome_ = from._impl_.outcome_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.lane_selection_flags_ = from._impl_.lane_selection_flags_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.match_id_ = from._impl_.match_id_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.predicted_position_ = from._impl_.predicted_position_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.ranked_ = from._impl_.ranked_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.party_game_ = from._impl_.party_game_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.seconds_dead_ = from._impl_.seconds_dead_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.winning_team_ = from._impl_.winning_team_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.start_time_ = from._impl_.start_time_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.denies_ = from._impl_.denies_;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.bounty_runes_ = from._impl_.bounty_runes_;
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_impl_.water_runes_ = from._impl_.water_runes_;
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_impl_.power_runes_ = from._impl_.power_runes_;
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_impl_.time_enemy_t1_tower_destroyed_ = from._impl_.time_enemy_t1_tower_destroyed_;
    }
    if (cached_has_bits & 0x00400000u) {
      _this->_impl_.time_friendly_t1_tower_destroyed_ = from._impl_.time_friendly_t1_tower_destroyed_;
    }
    if (cached_has_bits & 0x00800000u) {
      _this->_impl_.enemy_roshan_kills_ = from._impl_.enemy_roshan_kills_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      _this->_impl_.player_slot_ = from._impl_.player_slot_;
    }
    if (cached_has_bits & 0x02000000u) {
      _this->_impl_.teleports_used_ = from._impl_.teleports_used_;
    }
    if (cached_has_bits & 0x04000000u) {
      _this->_impl_.dewards_ = from._impl_.dewards_;
    }
    if (cached_has_bits & 0x08000000u) {
      _this->_impl_.camps_stacked_ = from._impl_.camps_stacked_;
    }
    if (cached_has_bits & 0x10000000u) {
      _this->_impl_.support_gold_ = from._impl_.support_gold_;
    }
    if (cached_has_bits & 0x20000000u) {
      _this->_impl_.hero_damage_ = from._impl_.hero_damage_;
    }
    if (cached_has_bits & 0x40000000u) {
      _this->_impl_.hero_healing_ = from._impl_.hero_healing_;
    }
    if (cached_has_bits & 0x80000000u) {
      _this->_impl_.tower_damage_ = from._impl_.tower_damage_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._impl_._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.successful_smokes_ = from._impl_.successful_smokes_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.stun_duration_ = from._impl_.stun_duration_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.duration_ = from._impl_.duration_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.friendly_roshan_kills_ = from._impl_.friendly_roshan_kills_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.previous_rank_ = from._impl_.previous_rank_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.game_mode_ = from._impl_.game_mode_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.lobby_type_ = from._impl_.lobby_type_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.time_purchased_shard_ = from._impl_.time_purchased_shard_;
    }
    _this->_impl_._has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.time_purchased_scepter_ = from._impl_.time_purchased_scepter_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.role_ = from._impl_.role_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.lane_outcome_ = from._impl_.lane_outcome_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.item0_ = from._impl_.item0_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.item1_ = from._impl_.item1_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.item2_ = from._impl_.item2_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.item3_ = from._impl_.item3_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.item4_ = from._impl_.item4_;
    }
    _this->_impl_._has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00010000u) {
    _this->_internal_set_item5(from._internal_item5());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgBattleReport_Game::CopyFrom(const CMsgBattleReport_Game& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgBattleReport_Game)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBattleReport_Game::IsInitialized() const {
  return true;
}

void CMsgBattleReport_Game::InternalSwap(CMsgBattleReport_Game* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_._has_bits_[1], other->_impl_._has_bits_[1]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgBattleReport_Game, _impl_.time_purchased_scepter_)
      + sizeof(CMsgBattleReport_Game::_impl_.time_purchased_scepter_)
      - PROTOBUF_FIELD_OFFSET(CMsgBattleReport_Game, _impl_.hero_id_)>(
          reinterpret_cast<char*>(&_impl_.hero_id_),
          reinterpret_cast<char*>(&other->_impl_.hero_id_));
  swap(_impl_.role_, other->_impl_.role_);
  swap(_impl_.lane_outcome_, other->_impl_.lane_outcome_);
  swap(_impl_.item0_, other->_impl_.item0_);
  swap(_impl_.item1_, other->_impl_.item1_);
  swap(_impl_.item2_, other->_impl_.item2_);
  swap(_impl_.item3_, other->_impl_.item3_);
  swap(_impl_.item4_, other->_impl_.item4_);
  swap(_impl_.item5_, other->_impl_.item5_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgBattleReport_Game::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fbattle_5freport_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fbattle_5freport_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fbattle_5freport_2eproto[1]);
}

// ===================================================================

class CMsgBattleReport_GameList::_Internal {
 public:
};

CMsgBattleReport_GameList::CMsgBattleReport_GameList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgBattleReport_GameList)
}
CMsgBattleReport_GameList::CMsgBattleReport_GameList(const CMsgBattleReport_GameList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgBattleReport_GameList* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.games_){from._impl_.games_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgBattleReport_GameList)
}

inline void CMsgBattleReport_GameList::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.games_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CMsgBattleReport_GameList::~CMsgBattleReport_GameList() {
  // @@protoc_insertion_point(destructor:CMsgBattleReport_GameList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgBattleReport_GameList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.games_.~RepeatedPtrField();
}

void CMsgBattleReport_GameList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgBattleReport_GameList::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgBattleReport_GameList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.games_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgBattleReport_GameList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CMsgBattleReport_Game games = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_games(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgBattleReport_GameList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgBattleReport_GameList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgBattleReport_Game games = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_games_size()); i < n; i++) {
    const auto& repfield = this->_internal_games(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgBattleReport_GameList)
  return target;
}

size_t CMsgBattleReport_GameList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgBattleReport_GameList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgBattleReport_Game games = 1;
  total_size += 1UL * this->_internal_games_size();
  for (const auto& msg : this->_impl_.games_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgBattleReport_GameList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgBattleReport_GameList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgBattleReport_GameList::GetClassData() const { return &_class_data_; }


void CMsgBattleReport_GameList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgBattleReport_GameList*>(&to_msg);
  auto& from = static_cast<const CMsgBattleReport_GameList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgBattleReport_GameList)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.games_.MergeFrom(from._impl_.games_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgBattleReport_GameList::CopyFrom(const CMsgBattleReport_GameList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgBattleReport_GameList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBattleReport_GameList::IsInitialized() const {
  return true;
}

void CMsgBattleReport_GameList::InternalSwap(CMsgBattleReport_GameList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.games_.InternalSwap(&other->_impl_.games_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgBattleReport_GameList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fbattle_5freport_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fbattle_5freport_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fbattle_5freport_2eproto[2]);
}

// ===================================================================

class CMsgBattleReport_HighlightGeneral::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgBattleReport_HighlightGeneral>()._impl_._has_bits_);
  static void set_has_win_loss_window(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_win_percent(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_mmr_delta(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_highlight_score(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgBattleReport_HighlightGeneral::CMsgBattleReport_HighlightGeneral(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgBattleReport.HighlightGeneral)
}
CMsgBattleReport_HighlightGeneral::CMsgBattleReport_HighlightGeneral(const CMsgBattleReport_HighlightGeneral& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgBattleReport_HighlightGeneral* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.win_loss_window_){}
    , decltype(_impl_.win_percent_){}
    , decltype(_impl_.mmr_delta_){}
    , decltype(_impl_.highlight_score_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.win_loss_window_, &from._impl_.win_loss_window_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.highlight_score_) -
    reinterpret_cast<char*>(&_impl_.win_loss_window_)) + sizeof(_impl_.highlight_score_));
  // @@protoc_insertion_point(copy_constructor:CMsgBattleReport.HighlightGeneral)
}

inline void CMsgBattleReport_HighlightGeneral::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.win_loss_window_){0}
    , decltype(_impl_.win_percent_){0}
    , decltype(_impl_.mmr_delta_){0}
    , decltype(_impl_.highlight_score_){0}
  };
}

CMsgBattleReport_HighlightGeneral::~CMsgBattleReport_HighlightGeneral() {
  // @@protoc_insertion_point(destructor:CMsgBattleReport.HighlightGeneral)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgBattleReport_HighlightGeneral::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgBattleReport_HighlightGeneral::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgBattleReport_HighlightGeneral::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgBattleReport.HighlightGeneral)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.win_loss_window_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.highlight_score_) -
        reinterpret_cast<char*>(&_impl_.win_loss_window_)) + sizeof(_impl_.highlight_score_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgBattleReport_HighlightGeneral::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 win_loss_window = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_win_loss_window(&has_bits);
          _impl_.win_loss_window_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float win_percent = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_win_percent(&has_bits);
          _impl_.win_percent_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional int32 mmr_delta = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_mmr_delta(&has_bits);
          _impl_.mmr_delta_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float highlight_score = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_highlight_score(&has_bits);
          _impl_.highlight_score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgBattleReport_HighlightGeneral::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgBattleReport.HighlightGeneral)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 win_loss_window = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_win_loss_window(), target);
  }

  // optional float win_percent = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_win_percent(), target);
  }

  // optional int32 mmr_delta = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_mmr_delta(), target);
  }

  // optional float highlight_score = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_highlight_score(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgBattleReport.HighlightGeneral)
  return target;
}

size_t CMsgBattleReport_HighlightGeneral::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgBattleReport.HighlightGeneral)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional int32 win_loss_window = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_win_loss_window());
    }

    // optional float win_percent = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional int32 mmr_delta = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mmr_delta());
    }

    // optional float highlight_score = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgBattleReport_HighlightGeneral::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgBattleReport_HighlightGeneral::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgBattleReport_HighlightGeneral::GetClassData() const { return &_class_data_; }


void CMsgBattleReport_HighlightGeneral::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgBattleReport_HighlightGeneral*>(&to_msg);
  auto& from = static_cast<const CMsgBattleReport_HighlightGeneral&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgBattleReport.HighlightGeneral)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.win_loss_window_ = from._impl_.win_loss_window_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.win_percent_ = from._impl_.win_percent_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.mmr_delta_ = from._impl_.mmr_delta_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.highlight_score_ = from._impl_.highlight_score_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgBattleReport_HighlightGeneral::CopyFrom(const CMsgBattleReport_HighlightGeneral& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgBattleReport.HighlightGeneral)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBattleReport_HighlightGeneral::IsInitialized() const {
  return true;
}

void CMsgBattleReport_HighlightGeneral::InternalSwap(CMsgBattleReport_HighlightGeneral* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgBattleReport_HighlightGeneral, _impl_.highlight_score_)
      + sizeof(CMsgBattleReport_HighlightGeneral::_impl_.highlight_score_)
      - PROTOBUF_FIELD_OFFSET(CMsgBattleReport_HighlightGeneral, _impl_.win_loss_window_)>(
          reinterpret_cast<char*>(&_impl_.win_loss_window_),
          reinterpret_cast<char*>(&other->_impl_.win_loss_window_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgBattleReport_HighlightGeneral::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fbattle_5freport_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fbattle_5freport_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fbattle_5freport_2eproto[3]);
}

// ===================================================================

class CMsgBattleReport_Highlight::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgBattleReport_Highlight>()._impl_._has_bits_);
  static void set_has_highlight_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_category(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_tier(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_rarity(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_score(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_confidence(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_hero_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_role(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_comparison_delta_value(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_context(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

CMsgBattleReport_Highlight::CMsgBattleReport_Highlight(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgBattleReport.Highlight)
}
CMsgBattleReport_Highlight::CMsgBattleReport_Highlight(const CMsgBattleReport_Highlight& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgBattleReport_Highlight* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.highlight_id_){}
    , decltype(_impl_.category_){}
    , decltype(_impl_.rarity_){}
    , decltype(_impl_.score_){}
    , decltype(_impl_.confidence_){}
    , decltype(_impl_.hero_id_){}
    , decltype(_impl_.comparison_delta_value_){}
    , decltype(_impl_.context_){}
    , decltype(_impl_.tier_){}
    , decltype(_impl_.role_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.highlight_id_, &from._impl_.highlight_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.role_) -
    reinterpret_cast<char*>(&_impl_.highlight_id_)) + sizeof(_impl_.role_));
  // @@protoc_insertion_point(copy_constructor:CMsgBattleReport.Highlight)
}

inline void CMsgBattleReport_Highlight::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.highlight_id_){0u}
    , decltype(_impl_.category_){0}
    , decltype(_impl_.rarity_){0}
    , decltype(_impl_.score_){0}
    , decltype(_impl_.confidence_){0}
    , decltype(_impl_.hero_id_){0u}
    , decltype(_impl_.comparison_delta_value_){0}
    , decltype(_impl_.context_){-1}
    , decltype(_impl_.tier_){-1}
    , decltype(_impl_.role_){-1}
  };
}

CMsgBattleReport_Highlight::~CMsgBattleReport_Highlight() {
  // @@protoc_insertion_point(destructor:CMsgBattleReport.Highlight)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgBattleReport_Highlight::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgBattleReport_Highlight::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgBattleReport_Highlight::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgBattleReport.Highlight)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.highlight_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.comparison_delta_value_) -
        reinterpret_cast<char*>(&_impl_.highlight_id_)) + sizeof(_impl_.comparison_delta_value_));
    _impl_.context_ = -1;
  }
  if (cached_has_bits & 0x00000300u) {
    _impl_.tier_ = -1;
    _impl_.role_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgBattleReport_Highlight::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 highlight_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_highlight_id(&has_bits);
          _impl_.highlight_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .CMsgBattleReport_HighlightCategory category = 2 [default = k_eHighlightGeneral];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgBattleReport_HighlightCategory_IsValid(val))) {
            _internal_set_category(static_cast<::CMsgBattleReport_HighlightCategory>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgBattleReport_HighlightTier tier = 3 [default = k_eHighlightTierLow];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgBattleReport_HighlightTier_IsValid(val))) {
            _internal_set_tier(static_cast<::CMsgBattleReport_HighlightTier>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgBattleReport_HighlightRarity rarity = 4 [default = k_eHighlightCommon];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgBattleReport_HighlightRarity_IsValid(val))) {
            _internal_set_rarity(static_cast<::CMsgBattleReport_HighlightRarity>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional float score = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _Internal::set_has_score(&has_bits);
          _impl_.score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float confidence = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _Internal::set_has_confidence(&has_bits);
          _impl_.confidence_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 hero_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_hero_id(&has_bits);
          _impl_.hero_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgBattleReport_Role role = 8 [default = k_eUnknownRole];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgBattleReport_Role_IsValid(val))) {
            _internal_set_role(static_cast<::CMsgBattleReport_Role>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(8, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional float comparison_delta_value = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          _Internal::set_has_comparison_delta_value(&has_bits);
          _impl_.comparison_delta_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgBattleReport_CompareContext context = 10 [default = k_eCompareContextInvalid];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgBattleReport_CompareContext_IsValid(val))) {
            _internal_set_context(static_cast<::CMsgBattleReport_CompareContext>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(10, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgBattleReport_Highlight::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgBattleReport.Highlight)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 highlight_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_highlight_id(), target);
  }

  // required .CMsgBattleReport_HighlightCategory category = 2 [default = k_eHighlightGeneral];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_category(), target);
  }

  // optional .CMsgBattleReport_HighlightTier tier = 3 [default = k_eHighlightTierLow];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_tier(), target);
  }

  // optional .CMsgBattleReport_HighlightRarity rarity = 4 [default = k_eHighlightCommon];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_rarity(), target);
  }

  // optional float score = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_score(), target);
  }

  // optional float confidence = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_confidence(), target);
  }

  // optional uint32 hero_id = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_hero_id(), target);
  }

  // optional .CMsgBattleReport_Role role = 8 [default = k_eUnknownRole];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      8, this->_internal_role(), target);
  }

  // optional float comparison_delta_value = 9;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(9, this->_internal_comparison_delta_value(), target);
  }

  // optional .CMsgBattleReport_CompareContext context = 10 [default = k_eCompareContextInvalid];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      10, this->_internal_context(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgBattleReport.Highlight)
  return target;
}

size_t CMsgBattleReport_Highlight::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:CMsgBattleReport.Highlight)
  size_t total_size = 0;

  if (_internal_has_highlight_id()) {
    // required uint32 highlight_id = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_highlight_id());
  }

  if (_internal_has_category()) {
    // required .CMsgBattleReport_HighlightCategory category = 2 [default = k_eHighlightGeneral];
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_category());
  }

  return total_size;
}
size_t CMsgBattleReport_Highlight::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgBattleReport.Highlight)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 highlight_id = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_highlight_id());

    // required .CMsgBattleReport_HighlightCategory category = 2 [default = k_eHighlightGeneral];
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_category());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000fcu) {
    // optional .CMsgBattleReport_HighlightRarity rarity = 4 [default = k_eHighlightCommon];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_rarity());
    }

    // optional float score = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float confidence = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional uint32 hero_id = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_hero_id());
    }

    // optional float comparison_delta_value = 9;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional .CMsgBattleReport_CompareContext context = 10 [default = k_eCompareContextInvalid];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_context());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional .CMsgBattleReport_HighlightTier tier = 3 [default = k_eHighlightTierLow];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_tier());
    }

    // optional .CMsgBattleReport_Role role = 8 [default = k_eUnknownRole];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_role());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgBattleReport_Highlight::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgBattleReport_Highlight::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgBattleReport_Highlight::GetClassData() const { return &_class_data_; }


void CMsgBattleReport_Highlight::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgBattleReport_Highlight*>(&to_msg);
  auto& from = static_cast<const CMsgBattleReport_Highlight&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgBattleReport.Highlight)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.highlight_id_ = from._impl_.highlight_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.category_ = from._impl_.category_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.rarity_ = from._impl_.rarity_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.score_ = from._impl_.score_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.confidence_ = from._impl_.confidence_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.hero_id_ = from._impl_.hero_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.comparison_delta_value_ = from._impl_.comparison_delta_value_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.context_ = from._impl_.context_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.tier_ = from._impl_.tier_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.role_ = from._impl_.role_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgBattleReport_Highlight::CopyFrom(const CMsgBattleReport_Highlight& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgBattleReport.Highlight)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBattleReport_Highlight::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void CMsgBattleReport_Highlight::InternalSwap(CMsgBattleReport_Highlight* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgBattleReport_Highlight, _impl_.comparison_delta_value_)
      + sizeof(CMsgBattleReport_Highlight::_impl_.comparison_delta_value_)
      - PROTOBUF_FIELD_OFFSET(CMsgBattleReport_Highlight, _impl_.highlight_id_)>(
          reinterpret_cast<char*>(&_impl_.highlight_id_),
          reinterpret_cast<char*>(&other->_impl_.highlight_id_));
  swap(_impl_.context_, other->_impl_.context_);
  swap(_impl_.tier_, other->_impl_.tier_);
  swap(_impl_.role_, other->_impl_.role_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgBattleReport_Highlight::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fbattle_5freport_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fbattle_5freport_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fbattle_5freport_2eproto[4]);
}

// ===================================================================

class CMsgBattleReport::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgBattleReport>()._impl_._has_bits_);
  static const ::CMsgBattleReportHighlights& highlights(const CMsgBattleReport* msg);
  static void set_has_highlights(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CMsgBattleReportHighlights&
CMsgBattleReport::_Internal::highlights(const CMsgBattleReport* msg) {
  return *msg->_impl_.highlights_;
}
CMsgBattleReport::CMsgBattleReport(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgBattleReport)
}
CMsgBattleReport::CMsgBattleReport(const CMsgBattleReport& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgBattleReport* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.games_){from._impl_.games_}
    , decltype(_impl_.highlights_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_highlights()) {
    _this->_impl_.highlights_ = new ::CMsgBattleReportHighlights(*from._impl_.highlights_);
  }
  // @@protoc_insertion_point(copy_constructor:CMsgBattleReport)
}

inline void CMsgBattleReport::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.games_){arena}
    , decltype(_impl_.highlights_){nullptr}
  };
}

CMsgBattleReport::~CMsgBattleReport() {
  // @@protoc_insertion_point(destructor:CMsgBattleReport)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgBattleReport::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.games_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.highlights_;
}

void CMsgBattleReport::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgBattleReport::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgBattleReport)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.games_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.highlights_ != nullptr);
    _impl_.highlights_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgBattleReport::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CMsgBattleReport_Game games = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_games(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgBattleReportHighlights highlights = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_highlights(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgBattleReport::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgBattleReport)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgBattleReport_Game games = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_games_size()); i < n; i++) {
    const auto& repfield = this->_internal_games(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CMsgBattleReportHighlights highlights = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::highlights(this),
        _Internal::highlights(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgBattleReport)
  return target;
}

size_t CMsgBattleReport::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgBattleReport)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgBattleReport_Game games = 1;
  total_size += 1UL * this->_internal_games_size();
  for (const auto& msg : this->_impl_.games_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .CMsgBattleReportHighlights highlights = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.highlights_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgBattleReport::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgBattleReport::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgBattleReport::GetClassData() const { return &_class_data_; }


void CMsgBattleReport::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgBattleReport*>(&to_msg);
  auto& from = static_cast<const CMsgBattleReport&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgBattleReport)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.games_.MergeFrom(from._impl_.games_);
  if (from._internal_has_highlights()) {
    _this->_internal_mutable_highlights()->::CMsgBattleReportHighlights::MergeFrom(
        from._internal_highlights());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgBattleReport::CopyFrom(const CMsgBattleReport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgBattleReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBattleReport::IsInitialized() const {
  if (_internal_has_highlights()) {
    if (!_impl_.highlights_->IsInitialized()) return false;
  }
  return true;
}

void CMsgBattleReport::InternalSwap(CMsgBattleReport* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.games_.InternalSwap(&other->_impl_.games_);
  swap(_impl_.highlights_, other->_impl_.highlights_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgBattleReport::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fbattle_5freport_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fbattle_5freport_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fbattle_5freport_2eproto[5]);
}

// ===================================================================

class CMsgBattleReportInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgBattleReportInfo>()._impl_._has_bits_);
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_acknowledged(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_featured_hero_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_featured_position(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_games_played(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

CMsgBattleReportInfo::CMsgBattleReportInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgBattleReportInfo)
}
CMsgBattleReportInfo::CMsgBattleReportInfo(const CMsgBattleReportInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgBattleReportInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.medal_counts_){from._impl_.medal_counts_}
    , decltype(_impl_.timestamp_){}
    , decltype(_impl_.duration_){}
    , decltype(_impl_.acknowledged_){}
    , decltype(_impl_.featured_hero_id_){}
    , decltype(_impl_.featured_position_){}
    , decltype(_impl_.games_played_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.timestamp_, &from._impl_.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.games_played_) -
    reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.games_played_));
  // @@protoc_insertion_point(copy_constructor:CMsgBattleReportInfo)
}

inline void CMsgBattleReportInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.medal_counts_){arena}
    , decltype(_impl_.timestamp_){0u}
    , decltype(_impl_.duration_){0u}
    , decltype(_impl_.acknowledged_){false}
    , decltype(_impl_.featured_hero_id_){0u}
    , decltype(_impl_.featured_position_){0u}
    , decltype(_impl_.games_played_){0u}
  };
}

CMsgBattleReportInfo::~CMsgBattleReportInfo() {
  // @@protoc_insertion_point(destructor:CMsgBattleReportInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgBattleReportInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.medal_counts_.~RepeatedField();
}

void CMsgBattleReportInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgBattleReportInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgBattleReportInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.medal_counts_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&_impl_.timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.games_played_) -
        reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.games_played_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgBattleReportInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_timestamp(&has_bits);
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 duration = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_duration(&has_bits);
          _impl_.duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool acknowledged = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_acknowledged(&has_bits);
          _impl_.acknowledged_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 featured_hero_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_featured_hero_id(&has_bits);
          _impl_.featured_hero_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 featured_position = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_featured_position(&has_bits);
          _impl_.featured_position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 games_played = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_games_played(&has_bits);
          _impl_.games_played_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 medal_counts = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_medal_counts(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<56>(ptr));
        } else if (static_cast<uint8_t>(tag) == 58) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_medal_counts(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgBattleReportInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgBattleReportInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 timestamp = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_timestamp(), target);
  }

  // optional uint32 duration = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_duration(), target);
  }

  // optional bool acknowledged = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_acknowledged(), target);
  }

  // optional uint32 featured_hero_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_featured_hero_id(), target);
  }

  // optional uint32 featured_position = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_featured_position(), target);
  }

  // optional uint32 games_played = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_games_played(), target);
  }

  // repeated uint32 medal_counts = 7;
  for (int i = 0, n = this->_internal_medal_counts_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_medal_counts(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgBattleReportInfo)
  return target;
}

size_t CMsgBattleReportInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgBattleReportInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 medal_counts = 7;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.medal_counts_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_medal_counts_size());
    total_size += data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional uint32 timestamp = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_timestamp());
    }

    // optional uint32 duration = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_duration());
    }

    // optional bool acknowledged = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional uint32 featured_hero_id = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_featured_hero_id());
    }

    // optional uint32 featured_position = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_featured_position());
    }

    // optional uint32 games_played = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_games_played());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgBattleReportInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgBattleReportInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgBattleReportInfo::GetClassData() const { return &_class_data_; }


void CMsgBattleReportInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgBattleReportInfo*>(&to_msg);
  auto& from = static_cast<const CMsgBattleReportInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgBattleReportInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.medal_counts_.MergeFrom(from._impl_.medal_counts_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.timestamp_ = from._impl_.timestamp_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.duration_ = from._impl_.duration_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.acknowledged_ = from._impl_.acknowledged_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.featured_hero_id_ = from._impl_.featured_hero_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.featured_position_ = from._impl_.featured_position_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.games_played_ = from._impl_.games_played_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgBattleReportInfo::CopyFrom(const CMsgBattleReportInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgBattleReportInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBattleReportInfo::IsInitialized() const {
  return true;
}

void CMsgBattleReportInfo::InternalSwap(CMsgBattleReportInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.medal_counts_.InternalSwap(&other->_impl_.medal_counts_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgBattleReportInfo, _impl_.games_played_)
      + sizeof(CMsgBattleReportInfo::_impl_.games_played_)
      - PROTOBUF_FIELD_OFFSET(CMsgBattleReportInfo, _impl_.timestamp_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgBattleReportInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fbattle_5freport_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fbattle_5freport_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fbattle_5freport_2eproto[6]);
}

// ===================================================================

class CMsgBattleReportInfoList::_Internal {
 public:
};

CMsgBattleReportInfoList::CMsgBattleReportInfoList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgBattleReportInfoList)
}
CMsgBattleReportInfoList::CMsgBattleReportInfoList(const CMsgBattleReportInfoList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgBattleReportInfoList* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.battle_report_info_){from._impl_.battle_report_info_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgBattleReportInfoList)
}

inline void CMsgBattleReportInfoList::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.battle_report_info_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CMsgBattleReportInfoList::~CMsgBattleReportInfoList() {
  // @@protoc_insertion_point(destructor:CMsgBattleReportInfoList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgBattleReportInfoList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.battle_report_info_.~RepeatedPtrField();
}

void CMsgBattleReportInfoList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgBattleReportInfoList::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgBattleReportInfoList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.battle_report_info_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgBattleReportInfoList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CMsgBattleReportInfo battle_report_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_battle_report_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgBattleReportInfoList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgBattleReportInfoList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgBattleReportInfo battle_report_info = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_battle_report_info_size()); i < n; i++) {
    const auto& repfield = this->_internal_battle_report_info(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgBattleReportInfoList)
  return target;
}

size_t CMsgBattleReportInfoList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgBattleReportInfoList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgBattleReportInfo battle_report_info = 1;
  total_size += 1UL * this->_internal_battle_report_info_size();
  for (const auto& msg : this->_impl_.battle_report_info_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgBattleReportInfoList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgBattleReportInfoList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgBattleReportInfoList::GetClassData() const { return &_class_data_; }


void CMsgBattleReportInfoList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgBattleReportInfoList*>(&to_msg);
  auto& from = static_cast<const CMsgBattleReportInfoList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgBattleReportInfoList)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.battle_report_info_.MergeFrom(from._impl_.battle_report_info_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgBattleReportInfoList::CopyFrom(const CMsgBattleReportInfoList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgBattleReportInfoList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBattleReportInfoList::IsInitialized() const {
  return true;
}

void CMsgBattleReportInfoList::InternalSwap(CMsgBattleReportInfoList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.battle_report_info_.InternalSwap(&other->_impl_.battle_report_info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgBattleReportInfoList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fbattle_5freport_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fbattle_5freport_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fbattle_5freport_2eproto[7]);
}

// ===================================================================

class CMsgBattleReportHighlights::_Internal {
 public:
};

CMsgBattleReportHighlights::CMsgBattleReportHighlights(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgBattleReportHighlights)
}
CMsgBattleReportHighlights::CMsgBattleReportHighlights(const CMsgBattleReportHighlights& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgBattleReportHighlights* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.highlights_){from._impl_.highlights_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgBattleReportHighlights)
}

inline void CMsgBattleReportHighlights::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.highlights_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CMsgBattleReportHighlights::~CMsgBattleReportHighlights() {
  // @@protoc_insertion_point(destructor:CMsgBattleReportHighlights)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgBattleReportHighlights::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.highlights_.~RepeatedPtrField();
}

void CMsgBattleReportHighlights::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgBattleReportHighlights::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgBattleReportHighlights)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.highlights_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgBattleReportHighlights::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CMsgBattleReport.Highlight highlights = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_highlights(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgBattleReportHighlights::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgBattleReportHighlights)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgBattleReport.Highlight highlights = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_highlights_size()); i < n; i++) {
    const auto& repfield = this->_internal_highlights(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgBattleReportHighlights)
  return target;
}

size_t CMsgBattleReportHighlights::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgBattleReportHighlights)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgBattleReport.Highlight highlights = 1;
  total_size += 1UL * this->_internal_highlights_size();
  for (const auto& msg : this->_impl_.highlights_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgBattleReportHighlights::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgBattleReportHighlights::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgBattleReportHighlights::GetClassData() const { return &_class_data_; }


void CMsgBattleReportHighlights::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgBattleReportHighlights*>(&to_msg);
  auto& from = static_cast<const CMsgBattleReportHighlights&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgBattleReportHighlights)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.highlights_.MergeFrom(from._impl_.highlights_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgBattleReportHighlights::CopyFrom(const CMsgBattleReportHighlights& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgBattleReportHighlights)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBattleReportHighlights::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.highlights_))
    return false;
  return true;
}

void CMsgBattleReportHighlights::InternalSwap(CMsgBattleReportHighlights* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.highlights_.InternalSwap(&other->_impl_.highlights_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgBattleReportHighlights::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fbattle_5freport_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fbattle_5freport_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fbattle_5freport_2eproto[8]);
}

// ===================================================================

class CMsgBattleReportAggregateStats_CMsgBattleReportStat::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgBattleReportAggregateStats_CMsgBattleReportStat>()._impl_._has_bits_);
  static void set_has_mean(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_stdev(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgBattleReportAggregateStats_CMsgBattleReportStat::CMsgBattleReportAggregateStats_CMsgBattleReportStat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgBattleReportAggregateStats.CMsgBattleReportStat)
}
CMsgBattleReportAggregateStats_CMsgBattleReportStat::CMsgBattleReportAggregateStats_CMsgBattleReportStat(const CMsgBattleReportAggregateStats_CMsgBattleReportStat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgBattleReportAggregateStats_CMsgBattleReportStat* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mean_){}
    , decltype(_impl_.stdev_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.mean_, &from._impl_.mean_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.stdev_) -
    reinterpret_cast<char*>(&_impl_.mean_)) + sizeof(_impl_.stdev_));
  // @@protoc_insertion_point(copy_constructor:CMsgBattleReportAggregateStats.CMsgBattleReportStat)
}

inline void CMsgBattleReportAggregateStats_CMsgBattleReportStat::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mean_){0}
    , decltype(_impl_.stdev_){0}
  };
}

CMsgBattleReportAggregateStats_CMsgBattleReportStat::~CMsgBattleReportAggregateStats_CMsgBattleReportStat() {
  // @@protoc_insertion_point(destructor:CMsgBattleReportAggregateStats.CMsgBattleReportStat)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgBattleReportAggregateStats_CMsgBattleReportStat::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgBattleReportAggregateStats_CMsgBattleReportStat::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgBattleReportAggregateStats_CMsgBattleReportStat::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgBattleReportAggregateStats.CMsgBattleReportStat)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.mean_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.stdev_) -
        reinterpret_cast<char*>(&_impl_.mean_)) + sizeof(_impl_.stdev_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgBattleReportAggregateStats_CMsgBattleReportStat::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float mean = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_mean(&has_bits);
          _impl_.mean_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float stdev = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_stdev(&has_bits);
          _impl_.stdev_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgBattleReportAggregateStats_CMsgBattleReportStat::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgBattleReportAggregateStats.CMsgBattleReportStat)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional float mean = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_mean(), target);
  }

  // optional float stdev = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_stdev(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgBattleReportAggregateStats.CMsgBattleReportStat)
  return target;
}

size_t CMsgBattleReportAggregateStats_CMsgBattleReportStat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgBattleReportAggregateStats.CMsgBattleReportStat)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional float mean = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float stdev = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgBattleReportAggregateStats_CMsgBattleReportStat::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgBattleReportAggregateStats_CMsgBattleReportStat::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgBattleReportAggregateStats_CMsgBattleReportStat::GetClassData() const { return &_class_data_; }


void CMsgBattleReportAggregateStats_CMsgBattleReportStat::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgBattleReportAggregateStats_CMsgBattleReportStat*>(&to_msg);
  auto& from = static_cast<const CMsgBattleReportAggregateStats_CMsgBattleReportStat&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgBattleReportAggregateStats.CMsgBattleReportStat)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.mean_ = from._impl_.mean_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.stdev_ = from._impl_.stdev_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgBattleReportAggregateStats_CMsgBattleReportStat::CopyFrom(const CMsgBattleReportAggregateStats_CMsgBattleReportStat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgBattleReportAggregateStats.CMsgBattleReportStat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBattleReportAggregateStats_CMsgBattleReportStat::IsInitialized() const {
  return true;
}

void CMsgBattleReportAggregateStats_CMsgBattleReportStat::InternalSwap(CMsgBattleReportAggregateStats_CMsgBattleReportStat* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgBattleReportAggregateStats_CMsgBattleReportStat, _impl_.stdev_)
      + sizeof(CMsgBattleReportAggregateStats_CMsgBattleReportStat::_impl_.stdev_)
      - PROTOBUF_FIELD_OFFSET(CMsgBattleReportAggregateStats_CMsgBattleReportStat, _impl_.mean_)>(
          reinterpret_cast<char*>(&_impl_.mean_),
          reinterpret_cast<char*>(&other->_impl_.mean_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgBattleReportAggregateStats_CMsgBattleReportStat::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fbattle_5freport_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fbattle_5freport_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fbattle_5freport_2eproto[9]);
}

// ===================================================================

class CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgBattleReportAggregateStats_CMsgBattleReportAggregate>()._impl_._has_bits_);
  static void set_has_hero_id(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_predicted_position(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_game_count(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_win_count(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_lane_win_count(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat& kills(const CMsgBattleReportAggregateStats_CMsgBattleReportAggregate* msg);
  static void set_has_kills(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat& deaths(const CMsgBattleReportAggregateStats_CMsgBattleReportAggregate* msg);
  static void set_has_deaths(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat& assists(const CMsgBattleReportAggregateStats_CMsgBattleReportAggregate* msg);
  static void set_has_assists(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat& rank_change(const CMsgBattleReportAggregateStats_CMsgBattleReportAggregate* msg);
  static void set_has_rank_change(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat& last_hits(const CMsgBattleReportAggregateStats_CMsgBattleReportAggregate* msg);
  static void set_has_last_hits(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat& denies(const CMsgBattleReportAggregateStats_CMsgBattleReportAggregate* msg);
  static void set_has_denies(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat& gpm(const CMsgBattleReportAggregateStats_CMsgBattleReportAggregate* msg);
  static void set_has_gpm(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat& xpm(const CMsgBattleReportAggregateStats_CMsgBattleReportAggregate* msg);
  static void set_has_xpm(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat& seconds_dead(const CMsgBattleReportAggregateStats_CMsgBattleReportAggregate* msg);
  static void set_has_seconds_dead(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat& bounty_runes(const CMsgBattleReportAggregateStats_CMsgBattleReportAggregate* msg);
  static void set_has_bounty_runes(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat& water_runes(const CMsgBattleReportAggregateStats_CMsgBattleReportAggregate* msg);
  static void set_has_water_runes(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat& power_runes(const CMsgBattleReportAggregateStats_CMsgBattleReportAggregate* msg);
  static void set_has_power_runes(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat& time_enemy_t1_tower_destroyed(const CMsgBattleReportAggregateStats_CMsgBattleReportAggregate* msg);
  static void set_has_time_enemy_t1_tower_destroyed(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat& time_friendly_t1_tower_destroyed(const CMsgBattleReportAggregateStats_CMsgBattleReportAggregate* msg);
  static void set_has_time_friendly_t1_tower_destroyed(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat& enemy_roshan_kills(const CMsgBattleReportAggregateStats_CMsgBattleReportAggregate* msg);
  static void set_has_enemy_roshan_kills(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat& teleports_used(const CMsgBattleReportAggregateStats_CMsgBattleReportAggregate* msg);
  static void set_has_teleports_used(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat& dewards(const CMsgBattleReportAggregateStats_CMsgBattleReportAggregate* msg);
  static void set_has_dewards(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat& camps_stacked(const CMsgBattleReportAggregateStats_CMsgBattleReportAggregate* msg);
  static void set_has_camps_stacked(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat& support_gold(const CMsgBattleReportAggregateStats_CMsgBattleReportAggregate* msg);
  static void set_has_support_gold(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat& hero_damage(const CMsgBattleReportAggregateStats_CMsgBattleReportAggregate* msg);
  static void set_has_hero_damage(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat& hero_healing(const CMsgBattleReportAggregateStats_CMsgBattleReportAggregate* msg);
  static void set_has_hero_healing(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat& tower_damage(const CMsgBattleReportAggregateStats_CMsgBattleReportAggregate* msg);
  static void set_has_tower_damage(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat& successful_smokes(const CMsgBattleReportAggregateStats_CMsgBattleReportAggregate* msg);
  static void set_has_successful_smokes(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat& stun_duration(const CMsgBattleReportAggregateStats_CMsgBattleReportAggregate* msg);
  static void set_has_stun_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat& duration(const CMsgBattleReportAggregateStats_CMsgBattleReportAggregate* msg);
  static void set_has_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat& friendly_roshan_kills(const CMsgBattleReportAggregateStats_CMsgBattleReportAggregate* msg);
  static void set_has_friendly_roshan_kills(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
};

const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat&
CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::_Internal::kills(const CMsgBattleReportAggregateStats_CMsgBattleReportAggregate* msg) {
  return *msg->_impl_.kills_;
}
const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat&
CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::_Internal::deaths(const CMsgBattleReportAggregateStats_CMsgBattleReportAggregate* msg) {
  return *msg->_impl_.deaths_;
}
const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat&
CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::_Internal::assists(const CMsgBattleReportAggregateStats_CMsgBattleReportAggregate* msg) {
  return *msg->_impl_.assists_;
}
const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat&
CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::_Internal::rank_change(const CMsgBattleReportAggregateStats_CMsgBattleReportAggregate* msg) {
  return *msg->_impl_.rank_change_;
}
const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat&
CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::_Internal::last_hits(const CMsgBattleReportAggregateStats_CMsgBattleReportAggregate* msg) {
  return *msg->_impl_.last_hits_;
}
const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat&
CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::_Internal::denies(const CMsgBattleReportAggregateStats_CMsgBattleReportAggregate* msg) {
  return *msg->_impl_.denies_;
}
const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat&
CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::_Internal::gpm(const CMsgBattleReportAggregateStats_CMsgBattleReportAggregate* msg) {
  return *msg->_impl_.gpm_;
}
const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat&
CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::_Internal::xpm(const CMsgBattleReportAggregateStats_CMsgBattleReportAggregate* msg) {
  return *msg->_impl_.xpm_;
}
const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat&
CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::_Internal::seconds_dead(const CMsgBattleReportAggregateStats_CMsgBattleReportAggregate* msg) {
  return *msg->_impl_.seconds_dead_;
}
const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat&
CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::_Internal::bounty_runes(const CMsgBattleReportAggregateStats_CMsgBattleReportAggregate* msg) {
  return *msg->_impl_.bounty_runes_;
}
const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat&
CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::_Internal::water_runes(const CMsgBattleReportAggregateStats_CMsgBattleReportAggregate* msg) {
  return *msg->_impl_.water_runes_;
}
const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat&
CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::_Internal::power_runes(const CMsgBattleReportAggregateStats_CMsgBattleReportAggregate* msg) {
  return *msg->_impl_.power_runes_;
}
const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat&
CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::_Internal::time_enemy_t1_tower_destroyed(const CMsgBattleReportAggregateStats_CMsgBattleReportAggregate* msg) {
  return *msg->_impl_.time_enemy_t1_tower_destroyed_;
}
const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat&
CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::_Internal::time_friendly_t1_tower_destroyed(const CMsgBattleReportAggregateStats_CMsgBattleReportAggregate* msg) {
  return *msg->_impl_.time_friendly_t1_tower_destroyed_;
}
const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat&
CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::_Internal::enemy_roshan_kills(const CMsgBattleReportAggregateStats_CMsgBattleReportAggregate* msg) {
  return *msg->_impl_.enemy_roshan_kills_;
}
const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat&
CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::_Internal::teleports_used(const CMsgBattleReportAggregateStats_CMsgBattleReportAggregate* msg) {
  return *msg->_impl_.teleports_used_;
}
const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat&
CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::_Internal::dewards(const CMsgBattleReportAggregateStats_CMsgBattleReportAggregate* msg) {
  return *msg->_impl_.dewards_;
}
const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat&
CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::_Internal::camps_stacked(const CMsgBattleReportAggregateStats_CMsgBattleReportAggregate* msg) {
  return *msg->_impl_.camps_stacked_;
}
const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat&
CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::_Internal::support_gold(const CMsgBattleReportAggregateStats_CMsgBattleReportAggregate* msg) {
  return *msg->_impl_.support_gold_;
}
const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat&
CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::_Internal::hero_damage(const CMsgBattleReportAggregateStats_CMsgBattleReportAggregate* msg) {
  return *msg->_impl_.hero_damage_;
}
const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat&
CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::_Internal::hero_healing(const CMsgBattleReportAggregateStats_CMsgBattleReportAggregate* msg) {
  return *msg->_impl_.hero_healing_;
}
const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat&
CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::_Internal::tower_damage(const CMsgBattleReportAggregateStats_CMsgBattleReportAggregate* msg) {
  return *msg->_impl_.tower_damage_;
}
const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat&
CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::_Internal::successful_smokes(const CMsgBattleReportAggregateStats_CMsgBattleReportAggregate* msg) {
  return *msg->_impl_.successful_smokes_;
}
const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat&
CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::_Internal::stun_duration(const CMsgBattleReportAggregateStats_CMsgBattleReportAggregate* msg) {
  return *msg->_impl_.stun_duration_;
}
const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat&
CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::_Internal::duration(const CMsgBattleReportAggregateStats_CMsgBattleReportAggregate* msg) {
  return *msg->_impl_.duration_;
}
const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat&
CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::_Internal::friendly_roshan_kills(const CMsgBattleReportAggregateStats_CMsgBattleReportAggregate* msg) {
  return *msg->_impl_.friendly_roshan_kills_;
}
CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::CMsgBattleReportAggregateStats_CMsgBattleReportAggregate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgBattleReportAggregateStats.CMsgBattleReportAggregate)
}
CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::CMsgBattleReportAggregateStats_CMsgBattleReportAggregate(const CMsgBattleReportAggregateStats_CMsgBattleReportAggregate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgBattleReportAggregateStats_CMsgBattleReportAggregate* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.kills_){nullptr}
    , decltype(_impl_.deaths_){nullptr}
    , decltype(_impl_.assists_){nullptr}
    , decltype(_impl_.rank_change_){nullptr}
    , decltype(_impl_.last_hits_){nullptr}
    , decltype(_impl_.denies_){nullptr}
    , decltype(_impl_.gpm_){nullptr}
    , decltype(_impl_.xpm_){nullptr}
    , decltype(_impl_.seconds_dead_){nullptr}
    , decltype(_impl_.bounty_runes_){nullptr}
    , decltype(_impl_.water_runes_){nullptr}
    , decltype(_impl_.power_runes_){nullptr}
    , decltype(_impl_.time_enemy_t1_tower_destroyed_){nullptr}
    , decltype(_impl_.time_friendly_t1_tower_destroyed_){nullptr}
    , decltype(_impl_.enemy_roshan_kills_){nullptr}
    , decltype(_impl_.teleports_used_){nullptr}
    , decltype(_impl_.dewards_){nullptr}
    , decltype(_impl_.camps_stacked_){nullptr}
    , decltype(_impl_.support_gold_){nullptr}
    , decltype(_impl_.hero_damage_){nullptr}
    , decltype(_impl_.hero_healing_){nullptr}
    , decltype(_impl_.tower_damage_){nullptr}
    , decltype(_impl_.successful_smokes_){nullptr}
    , decltype(_impl_.stun_duration_){nullptr}
    , decltype(_impl_.duration_){nullptr}
    , decltype(_impl_.friendly_roshan_kills_){nullptr}
    , decltype(_impl_.hero_id_){}
    , decltype(_impl_.predicted_position_){}
    , decltype(_impl_.game_count_){}
    , decltype(_impl_.win_count_){}
    , decltype(_impl_.lane_win_count_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_kills()) {
    _this->_impl_.kills_ = new ::CMsgBattleReportAggregateStats_CMsgBattleReportStat(*from._impl_.kills_);
  }
  if (from._internal_has_deaths()) {
    _this->_impl_.deaths_ = new ::CMsgBattleReportAggregateStats_CMsgBattleReportStat(*from._impl_.deaths_);
  }
  if (from._internal_has_assists()) {
    _this->_impl_.assists_ = new ::CMsgBattleReportAggregateStats_CMsgBattleReportStat(*from._impl_.assists_);
  }
  if (from._internal_has_rank_change()) {
    _this->_impl_.rank_change_ = new ::CMsgBattleReportAggregateStats_CMsgBattleReportStat(*from._impl_.rank_change_);
  }
  if (from._internal_has_last_hits()) {
    _this->_impl_.last_hits_ = new ::CMsgBattleReportAggregateStats_CMsgBattleReportStat(*from._impl_.last_hits_);
  }
  if (from._internal_has_denies()) {
    _this->_impl_.denies_ = new ::CMsgBattleReportAggregateStats_CMsgBattleReportStat(*from._impl_.denies_);
  }
  if (from._internal_has_gpm()) {
    _this->_impl_.gpm_ = new ::CMsgBattleReportAggregateStats_CMsgBattleReportStat(*from._impl_.gpm_);
  }
  if (from._internal_has_xpm()) {
    _this->_impl_.xpm_ = new ::CMsgBattleReportAggregateStats_CMsgBattleReportStat(*from._impl_.xpm_);
  }
  if (from._internal_has_seconds_dead()) {
    _this->_impl_.seconds_dead_ = new ::CMsgBattleReportAggregateStats_CMsgBattleReportStat(*from._impl_.seconds_dead_);
  }
  if (from._internal_has_bounty_runes()) {
    _this->_impl_.bounty_runes_ = new ::CMsgBattleReportAggregateStats_CMsgBattleReportStat(*from._impl_.bounty_runes_);
  }
  if (from._internal_has_water_runes()) {
    _this->_impl_.water_runes_ = new ::CMsgBattleReportAggregateStats_CMsgBattleReportStat(*from._impl_.water_runes_);
  }
  if (from._internal_has_power_runes()) {
    _this->_impl_.power_runes_ = new ::CMsgBattleReportAggregateStats_CMsgBattleReportStat(*from._impl_.power_runes_);
  }
  if (from._internal_has_time_enemy_t1_tower_destroyed()) {
    _this->_impl_.time_enemy_t1_tower_destroyed_ = new ::CMsgBattleReportAggregateStats_CMsgBattleReportStat(*from._impl_.time_enemy_t1_tower_destroyed_);
  }
  if (from._internal_has_time_friendly_t1_tower_destroyed()) {
    _this->_impl_.time_friendly_t1_tower_destroyed_ = new ::CMsgBattleReportAggregateStats_CMsgBattleReportStat(*from._impl_.time_friendly_t1_tower_destroyed_);
  }
  if (from._internal_has_enemy_roshan_kills()) {
    _this->_impl_.enemy_roshan_kills_ = new ::CMsgBattleReportAggregateStats_CMsgBattleReportStat(*from._impl_.enemy_roshan_kills_);
  }
  if (from._internal_has_teleports_used()) {
    _this->_impl_.teleports_used_ = new ::CMsgBattleReportAggregateStats_CMsgBattleReportStat(*from._impl_.teleports_used_);
  }
  if (from._internal_has_dewards()) {
    _this->_impl_.dewards_ = new ::CMsgBattleReportAggregateStats_CMsgBattleReportStat(*from._impl_.dewards_);
  }
  if (from._internal_has_camps_stacked()) {
    _this->_impl_.camps_stacked_ = new ::CMsgBattleReportAggregateStats_CMsgBattleReportStat(*from._impl_.camps_stacked_);
  }
  if (from._internal_has_support_gold()) {
    _this->_impl_.support_gold_ = new ::CMsgBattleReportAggregateStats_CMsgBattleReportStat(*from._impl_.support_gold_);
  }
  if (from._internal_has_hero_damage()) {
    _this->_impl_.hero_damage_ = new ::CMsgBattleReportAggregateStats_CMsgBattleReportStat(*from._impl_.hero_damage_);
  }
  if (from._internal_has_hero_healing()) {
    _this->_impl_.hero_healing_ = new ::CMsgBattleReportAggregateStats_CMsgBattleReportStat(*from._impl_.hero_healing_);
  }
  if (from._internal_has_tower_damage()) {
    _this->_impl_.tower_damage_ = new ::CMsgBattleReportAggregateStats_CMsgBattleReportStat(*from._impl_.tower_damage_);
  }
  if (from._internal_has_successful_smokes()) {
    _this->_impl_.successful_smokes_ = new ::CMsgBattleReportAggregateStats_CMsgBattleReportStat(*from._impl_.successful_smokes_);
  }
  if (from._internal_has_stun_duration()) {
    _this->_impl_.stun_duration_ = new ::CMsgBattleReportAggregateStats_CMsgBattleReportStat(*from._impl_.stun_duration_);
  }
  if (from._internal_has_duration()) {
    _this->_impl_.duration_ = new ::CMsgBattleReportAggregateStats_CMsgBattleReportStat(*from._impl_.duration_);
  }
  if (from._internal_has_friendly_roshan_kills()) {
    _this->_impl_.friendly_roshan_kills_ = new ::CMsgBattleReportAggregateStats_CMsgBattleReportStat(*from._impl_.friendly_roshan_kills_);
  }
  ::memcpy(&_impl_.hero_id_, &from._impl_.hero_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.lane_win_count_) -
    reinterpret_cast<char*>(&_impl_.hero_id_)) + sizeof(_impl_.lane_win_count_));
  // @@protoc_insertion_point(copy_constructor:CMsgBattleReportAggregateStats.CMsgBattleReportAggregate)
}

inline void CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.kills_){nullptr}
    , decltype(_impl_.deaths_){nullptr}
    , decltype(_impl_.assists_){nullptr}
    , decltype(_impl_.rank_change_){nullptr}
    , decltype(_impl_.last_hits_){nullptr}
    , decltype(_impl_.denies_){nullptr}
    , decltype(_impl_.gpm_){nullptr}
    , decltype(_impl_.xpm_){nullptr}
    , decltype(_impl_.seconds_dead_){nullptr}
    , decltype(_impl_.bounty_runes_){nullptr}
    , decltype(_impl_.water_runes_){nullptr}
    , decltype(_impl_.power_runes_){nullptr}
    , decltype(_impl_.time_enemy_t1_tower_destroyed_){nullptr}
    , decltype(_impl_.time_friendly_t1_tower_destroyed_){nullptr}
    , decltype(_impl_.enemy_roshan_kills_){nullptr}
    , decltype(_impl_.teleports_used_){nullptr}
    , decltype(_impl_.dewards_){nullptr}
    , decltype(_impl_.camps_stacked_){nullptr}
    , decltype(_impl_.support_gold_){nullptr}
    , decltype(_impl_.hero_damage_){nullptr}
    , decltype(_impl_.hero_healing_){nullptr}
    , decltype(_impl_.tower_damage_){nullptr}
    , decltype(_impl_.successful_smokes_){nullptr}
    , decltype(_impl_.stun_duration_){nullptr}
    , decltype(_impl_.duration_){nullptr}
    , decltype(_impl_.friendly_roshan_kills_){nullptr}
    , decltype(_impl_.hero_id_){0u}
    , decltype(_impl_.predicted_position_){0u}
    , decltype(_impl_.game_count_){0u}
    , decltype(_impl_.win_count_){0u}
    , decltype(_impl_.lane_win_count_){0u}
  };
}

CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::~CMsgBattleReportAggregateStats_CMsgBattleReportAggregate() {
  // @@protoc_insertion_point(destructor:CMsgBattleReportAggregateStats.CMsgBattleReportAggregate)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.kills_;
  if (this != internal_default_instance()) delete _impl_.deaths_;
  if (this != internal_default_instance()) delete _impl_.assists_;
  if (this != internal_default_instance()) delete _impl_.rank_change_;
  if (this != internal_default_instance()) delete _impl_.last_hits_;
  if (this != internal_default_instance()) delete _impl_.denies_;
  if (this != internal_default_instance()) delete _impl_.gpm_;
  if (this != internal_default_instance()) delete _impl_.xpm_;
  if (this != internal_default_instance()) delete _impl_.seconds_dead_;
  if (this != internal_default_instance()) delete _impl_.bounty_runes_;
  if (this != internal_default_instance()) delete _impl_.water_runes_;
  if (this != internal_default_instance()) delete _impl_.power_runes_;
  if (this != internal_default_instance()) delete _impl_.time_enemy_t1_tower_destroyed_;
  if (this != internal_default_instance()) delete _impl_.time_friendly_t1_tower_destroyed_;
  if (this != internal_default_instance()) delete _impl_.enemy_roshan_kills_;
  if (this != internal_default_instance()) delete _impl_.teleports_used_;
  if (this != internal_default_instance()) delete _impl_.dewards_;
  if (this != internal_default_instance()) delete _impl_.camps_stacked_;
  if (this != internal_default_instance()) delete _impl_.support_gold_;
  if (this != internal_default_instance()) delete _impl_.hero_damage_;
  if (this != internal_default_instance()) delete _impl_.hero_healing_;
  if (this != internal_default_instance()) delete _impl_.tower_damage_;
  if (this != internal_default_instance()) delete _impl_.successful_smokes_;
  if (this != internal_default_instance()) delete _impl_.stun_duration_;
  if (this != internal_default_instance()) delete _impl_.duration_;
  if (this != internal_default_instance()) delete _impl_.friendly_roshan_kills_;
}

void CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgBattleReportAggregateStats.CMsgBattleReportAggregate)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.kills_ != nullptr);
      _impl_.kills_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.deaths_ != nullptr);
      _impl_.deaths_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.assists_ != nullptr);
      _impl_.assists_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.rank_change_ != nullptr);
      _impl_.rank_change_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.last_hits_ != nullptr);
      _impl_.last_hits_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.denies_ != nullptr);
      _impl_.denies_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.gpm_ != nullptr);
      _impl_.gpm_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(_impl_.xpm_ != nullptr);
      _impl_.xpm_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(_impl_.seconds_dead_ != nullptr);
      _impl_.seconds_dead_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(_impl_.bounty_runes_ != nullptr);
      _impl_.bounty_runes_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(_impl_.water_runes_ != nullptr);
      _impl_.water_runes_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(_impl_.power_runes_ != nullptr);
      _impl_.power_runes_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(_impl_.time_enemy_t1_tower_destroyed_ != nullptr);
      _impl_.time_enemy_t1_tower_destroyed_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(_impl_.time_friendly_t1_tower_destroyed_ != nullptr);
      _impl_.time_friendly_t1_tower_destroyed_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(_impl_.enemy_roshan_kills_ != nullptr);
      _impl_.enemy_roshan_kills_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(_impl_.teleports_used_ != nullptr);
      _impl_.teleports_used_->Clear();
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      GOOGLE_DCHECK(_impl_.dewards_ != nullptr);
      _impl_.dewards_->Clear();
    }
    if (cached_has_bits & 0x00020000u) {
      GOOGLE_DCHECK(_impl_.camps_stacked_ != nullptr);
      _impl_.camps_stacked_->Clear();
    }
    if (cached_has_bits & 0x00040000u) {
      GOOGLE_DCHECK(_impl_.support_gold_ != nullptr);
      _impl_.support_gold_->Clear();
    }
    if (cached_has_bits & 0x00080000u) {
      GOOGLE_DCHECK(_impl_.hero_damage_ != nullptr);
      _impl_.hero_damage_->Clear();
    }
    if (cached_has_bits & 0x00100000u) {
      GOOGLE_DCHECK(_impl_.hero_healing_ != nullptr);
      _impl_.hero_healing_->Clear();
    }
    if (cached_has_bits & 0x00200000u) {
      GOOGLE_DCHECK(_impl_.tower_damage_ != nullptr);
      _impl_.tower_damage_->Clear();
    }
    if (cached_has_bits & 0x00400000u) {
      GOOGLE_DCHECK(_impl_.successful_smokes_ != nullptr);
      _impl_.successful_smokes_->Clear();
    }
    if (cached_has_bits & 0x00800000u) {
      GOOGLE_DCHECK(_impl_.stun_duration_ != nullptr);
      _impl_.stun_duration_->Clear();
    }
  }
  if (cached_has_bits & 0x03000000u) {
    if (cached_has_bits & 0x01000000u) {
      GOOGLE_DCHECK(_impl_.duration_ != nullptr);
      _impl_.duration_->Clear();
    }
    if (cached_has_bits & 0x02000000u) {
      GOOGLE_DCHECK(_impl_.friendly_roshan_kills_ != nullptr);
      _impl_.friendly_roshan_kills_->Clear();
    }
  }
  if (cached_has_bits & 0x7c000000u) {
    ::memset(&_impl_.hero_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.lane_win_count_) -
        reinterpret_cast<char*>(&_impl_.hero_id_)) + sizeof(_impl_.lane_win_count_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 hero_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_hero_id(&has_bits);
          _impl_.hero_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 predicted_position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_predicted_position(&has_bits);
          _impl_.predicted_position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 game_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_game_count(&has_bits);
          _impl_.game_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 win_count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_win_count(&has_bits);
          _impl_.win_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 lane_win_count = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_lane_win_count(&has_bits);
          _impl_.lane_win_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgBattleReportAggregateStats.CMsgBattleReportStat kills = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_kills(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgBattleReportAggregateStats.CMsgBattleReportStat deaths = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_deaths(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgBattleReportAggregateStats.CMsgBattleReportStat assists = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_assists(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgBattleReportAggregateStats.CMsgBattleReportStat rank_change = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_rank_change(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgBattleReportAggregateStats.CMsgBattleReportStat last_hits = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_last_hits(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgBattleReportAggregateStats.CMsgBattleReportStat denies = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_denies(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgBattleReportAggregateStats.CMsgBattleReportStat gpm = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_gpm(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgBattleReportAggregateStats.CMsgBattleReportStat xpm = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_xpm(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgBattleReportAggregateStats.CMsgBattleReportStat seconds_dead = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_seconds_dead(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgBattleReportAggregateStats.CMsgBattleReportStat bounty_runes = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_bounty_runes(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgBattleReportAggregateStats.CMsgBattleReportStat water_runes = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_water_runes(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgBattleReportAggregateStats.CMsgBattleReportStat power_runes = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_power_runes(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgBattleReportAggregateStats.CMsgBattleReportStat time_enemy_t1_tower_destroyed = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_time_enemy_t1_tower_destroyed(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgBattleReportAggregateStats.CMsgBattleReportStat time_friendly_t1_tower_destroyed = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_time_friendly_t1_tower_destroyed(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgBattleReportAggregateStats.CMsgBattleReportStat enemy_roshan_kills = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_enemy_roshan_kills(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgBattleReportAggregateStats.CMsgBattleReportStat teleports_used = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_teleports_used(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgBattleReportAggregateStats.CMsgBattleReportStat dewards = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_dewards(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgBattleReportAggregateStats.CMsgBattleReportStat camps_stacked = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_camps_stacked(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgBattleReportAggregateStats.CMsgBattleReportStat support_gold = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_support_gold(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgBattleReportAggregateStats.CMsgBattleReportStat hero_damage = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_hero_damage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgBattleReportAggregateStats.CMsgBattleReportStat hero_healing = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_hero_healing(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgBattleReportAggregateStats.CMsgBattleReportStat tower_damage = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_tower_damage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgBattleReportAggregateStats.CMsgBattleReportStat successful_smokes = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_successful_smokes(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgBattleReportAggregateStats.CMsgBattleReportStat stun_duration = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_stun_duration(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgBattleReportAggregateStats.CMsgBattleReportStat duration = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_duration(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgBattleReportAggregateStats.CMsgBattleReportStat friendly_roshan_kills = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_friendly_roshan_kills(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgBattleReportAggregateStats.CMsgBattleReportAggregate)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 hero_id = 1;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_hero_id(), target);
  }

  // optional uint32 predicted_position = 2;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_predicted_position(), target);
  }

  // optional uint32 game_count = 3;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_game_count(), target);
  }

  // optional uint32 win_count = 4;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_win_count(), target);
  }

  // optional uint32 lane_win_count = 5;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_lane_win_count(), target);
  }

  // optional .CMsgBattleReportAggregateStats.CMsgBattleReportStat kills = 6;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::kills(this),
        _Internal::kills(this).GetCachedSize(), target, stream);
  }

  // optional .CMsgBattleReportAggregateStats.CMsgBattleReportStat deaths = 7;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::deaths(this),
        _Internal::deaths(this).GetCachedSize(), target, stream);
  }

  // optional .CMsgBattleReportAggregateStats.CMsgBattleReportStat assists = 8;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::assists(this),
        _Internal::assists(this).GetCachedSize(), target, stream);
  }

  // optional .CMsgBattleReportAggregateStats.CMsgBattleReportStat rank_change = 9;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::rank_change(this),
        _Internal::rank_change(this).GetCachedSize(), target, stream);
  }

  // optional .CMsgBattleReportAggregateStats.CMsgBattleReportStat last_hits = 10;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::last_hits(this),
        _Internal::last_hits(this).GetCachedSize(), target, stream);
  }

  // optional .CMsgBattleReportAggregateStats.CMsgBattleReportStat denies = 11;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::denies(this),
        _Internal::denies(this).GetCachedSize(), target, stream);
  }

  // optional .CMsgBattleReportAggregateStats.CMsgBattleReportStat gpm = 12;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::gpm(this),
        _Internal::gpm(this).GetCachedSize(), target, stream);
  }

  // optional .CMsgBattleReportAggregateStats.CMsgBattleReportStat xpm = 13;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::xpm(this),
        _Internal::xpm(this).GetCachedSize(), target, stream);
  }

  // optional .CMsgBattleReportAggregateStats.CMsgBattleReportStat seconds_dead = 14;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::seconds_dead(this),
        _Internal::seconds_dead(this).GetCachedSize(), target, stream);
  }

  // optional .CMsgBattleReportAggregateStats.CMsgBattleReportStat bounty_runes = 15;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::bounty_runes(this),
        _Internal::bounty_runes(this).GetCachedSize(), target, stream);
  }

  // optional .CMsgBattleReportAggregateStats.CMsgBattleReportStat water_runes = 16;
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, _Internal::water_runes(this),
        _Internal::water_runes(this).GetCachedSize(), target, stream);
  }

  // optional .CMsgBattleReportAggregateStats.CMsgBattleReportStat power_runes = 17;
  if (cached_has_bits & 0x00000800u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, _Internal::power_runes(this),
        _Internal::power_runes(this).GetCachedSize(), target, stream);
  }

  // optional .CMsgBattleReportAggregateStats.CMsgBattleReportStat time_enemy_t1_tower_destroyed = 18;
  if (cached_has_bits & 0x00001000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(18, _Internal::time_enemy_t1_tower_destroyed(this),
        _Internal::time_enemy_t1_tower_destroyed(this).GetCachedSize(), target, stream);
  }

  // optional .CMsgBattleReportAggregateStats.CMsgBattleReportStat time_friendly_t1_tower_destroyed = 19;
  if (cached_has_bits & 0x00002000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(19, _Internal::time_friendly_t1_tower_destroyed(this),
        _Internal::time_friendly_t1_tower_destroyed(this).GetCachedSize(), target, stream);
  }

  // optional .CMsgBattleReportAggregateStats.CMsgBattleReportStat enemy_roshan_kills = 20;
  if (cached_has_bits & 0x00004000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(20, _Internal::enemy_roshan_kills(this),
        _Internal::enemy_roshan_kills(this).GetCachedSize(), target, stream);
  }

  // optional .CMsgBattleReportAggregateStats.CMsgBattleReportStat teleports_used = 21;
  if (cached_has_bits & 0x00008000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(21, _Internal::teleports_used(this),
        _Internal::teleports_used(this).GetCachedSize(), target, stream);
  }

  // optional .CMsgBattleReportAggregateStats.CMsgBattleReportStat dewards = 22;
  if (cached_has_bits & 0x00010000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(22, _Internal::dewards(this),
        _Internal::dewards(this).GetCachedSize(), target, stream);
  }

  // optional .CMsgBattleReportAggregateStats.CMsgBattleReportStat camps_stacked = 23;
  if (cached_has_bits & 0x00020000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(23, _Internal::camps_stacked(this),
        _Internal::camps_stacked(this).GetCachedSize(), target, stream);
  }

  // optional .CMsgBattleReportAggregateStats.CMsgBattleReportStat support_gold = 24;
  if (cached_has_bits & 0x00040000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(24, _Internal::support_gold(this),
        _Internal::support_gold(this).GetCachedSize(), target, stream);
  }

  // optional .CMsgBattleReportAggregateStats.CMsgBattleReportStat hero_damage = 25;
  if (cached_has_bits & 0x00080000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(25, _Internal::hero_damage(this),
        _Internal::hero_damage(this).GetCachedSize(), target, stream);
  }

  // optional .CMsgBattleReportAggregateStats.CMsgBattleReportStat hero_healing = 26;
  if (cached_has_bits & 0x00100000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(26, _Internal::hero_healing(this),
        _Internal::hero_healing(this).GetCachedSize(), target, stream);
  }

  // optional .CMsgBattleReportAggregateStats.CMsgBattleReportStat tower_damage = 27;
  if (cached_has_bits & 0x00200000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(27, _Internal::tower_damage(this),
        _Internal::tower_damage(this).GetCachedSize(), target, stream);
  }

  // optional .CMsgBattleReportAggregateStats.CMsgBattleReportStat successful_smokes = 28;
  if (cached_has_bits & 0x00400000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(28, _Internal::successful_smokes(this),
        _Internal::successful_smokes(this).GetCachedSize(), target, stream);
  }

  // optional .CMsgBattleReportAggregateStats.CMsgBattleReportStat stun_duration = 29;
  if (cached_has_bits & 0x00800000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(29, _Internal::stun_duration(this),
        _Internal::stun_duration(this).GetCachedSize(), target, stream);
  }

  // optional .CMsgBattleReportAggregateStats.CMsgBattleReportStat duration = 30;
  if (cached_has_bits & 0x01000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(30, _Internal::duration(this),
        _Internal::duration(this).GetCachedSize(), target, stream);
  }

  // optional .CMsgBattleReportAggregateStats.CMsgBattleReportStat friendly_roshan_kills = 31;
  if (cached_has_bits & 0x02000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(31, _Internal::friendly_roshan_kills(this),
        _Internal::friendly_roshan_kills(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgBattleReportAggregateStats.CMsgBattleReportAggregate)
  return target;
}

size_t CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgBattleReportAggregateStats.CMsgBattleReportAggregate)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .CMsgBattleReportAggregateStats.CMsgBattleReportStat kills = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.kills_);
    }

    // optional .CMsgBattleReportAggregateStats.CMsgBattleReportStat deaths = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.deaths_);
    }

    // optional .CMsgBattleReportAggregateStats.CMsgBattleReportStat assists = 8;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.assists_);
    }

    // optional .CMsgBattleReportAggregateStats.CMsgBattleReportStat rank_change = 9;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.rank_change_);
    }

    // optional .CMsgBattleReportAggregateStats.CMsgBattleReportStat last_hits = 10;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.last_hits_);
    }

    // optional .CMsgBattleReportAggregateStats.CMsgBattleReportStat denies = 11;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.denies_);
    }

    // optional .CMsgBattleReportAggregateStats.CMsgBattleReportStat gpm = 12;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.gpm_);
    }

    // optional .CMsgBattleReportAggregateStats.CMsgBattleReportStat xpm = 13;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.xpm_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .CMsgBattleReportAggregateStats.CMsgBattleReportStat seconds_dead = 14;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.seconds_dead_);
    }

    // optional .CMsgBattleReportAggregateStats.CMsgBattleReportStat bounty_runes = 15;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.bounty_runes_);
    }

    // optional .CMsgBattleReportAggregateStats.CMsgBattleReportStat water_runes = 16;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.water_runes_);
    }

    // optional .CMsgBattleReportAggregateStats.CMsgBattleReportStat power_runes = 17;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.power_runes_);
    }

    // optional .CMsgBattleReportAggregateStats.CMsgBattleReportStat time_enemy_t1_tower_destroyed = 18;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.time_enemy_t1_tower_destroyed_);
    }

    // optional .CMsgBattleReportAggregateStats.CMsgBattleReportStat time_friendly_t1_tower_destroyed = 19;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.time_friendly_t1_tower_destroyed_);
    }

    // optional .CMsgBattleReportAggregateStats.CMsgBattleReportStat enemy_roshan_kills = 20;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.enemy_roshan_kills_);
    }

    // optional .CMsgBattleReportAggregateStats.CMsgBattleReportStat teleports_used = 21;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.teleports_used_);
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional .CMsgBattleReportAggregateStats.CMsgBattleReportStat dewards = 22;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.dewards_);
    }

    // optional .CMsgBattleReportAggregateStats.CMsgBattleReportStat camps_stacked = 23;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.camps_stacked_);
    }

    // optional .CMsgBattleReportAggregateStats.CMsgBattleReportStat support_gold = 24;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.support_gold_);
    }

    // optional .CMsgBattleReportAggregateStats.CMsgBattleReportStat hero_damage = 25;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.hero_damage_);
    }

    // optional .CMsgBattleReportAggregateStats.CMsgBattleReportStat hero_healing = 26;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.hero_healing_);
    }

    // optional .CMsgBattleReportAggregateStats.CMsgBattleReportStat tower_damage = 27;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tower_damage_);
    }

    // optional .CMsgBattleReportAggregateStats.CMsgBattleReportStat successful_smokes = 28;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.successful_smokes_);
    }

    // optional .CMsgBattleReportAggregateStats.CMsgBattleReportStat stun_duration = 29;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.stun_duration_);
    }

  }
  if (cached_has_bits & 0x7f000000u) {
    // optional .CMsgBattleReportAggregateStats.CMsgBattleReportStat duration = 30;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.duration_);
    }

    // optional .CMsgBattleReportAggregateStats.CMsgBattleReportStat friendly_roshan_kills = 31;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.friendly_roshan_kills_);
    }

    // optional uint32 hero_id = 1;
    if (cached_has_bits & 0x04000000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_hero_id());
    }

    // optional uint32 predicted_position = 2;
    if (cached_has_bits & 0x08000000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_predicted_position());
    }

    // optional uint32 game_count = 3;
    if (cached_has_bits & 0x10000000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_game_count());
    }

    // optional uint32 win_count = 4;
    if (cached_has_bits & 0x20000000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_win_count());
    }

    // optional uint32 lane_win_count = 5;
    if (cached_has_bits & 0x40000000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_lane_win_count());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::GetClassData() const { return &_class_data_; }


void CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgBattleReportAggregateStats_CMsgBattleReportAggregate*>(&to_msg);
  auto& from = static_cast<const CMsgBattleReportAggregateStats_CMsgBattleReportAggregate&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgBattleReportAggregateStats.CMsgBattleReportAggregate)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_kills()->::CMsgBattleReportAggregateStats_CMsgBattleReportStat::MergeFrom(
          from._internal_kills());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_deaths()->::CMsgBattleReportAggregateStats_CMsgBattleReportStat::MergeFrom(
          from._internal_deaths());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_assists()->::CMsgBattleReportAggregateStats_CMsgBattleReportStat::MergeFrom(
          from._internal_assists());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_rank_change()->::CMsgBattleReportAggregateStats_CMsgBattleReportStat::MergeFrom(
          from._internal_rank_change());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_last_hits()->::CMsgBattleReportAggregateStats_CMsgBattleReportStat::MergeFrom(
          from._internal_last_hits());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_denies()->::CMsgBattleReportAggregateStats_CMsgBattleReportStat::MergeFrom(
          from._internal_denies());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_gpm()->::CMsgBattleReportAggregateStats_CMsgBattleReportStat::MergeFrom(
          from._internal_gpm());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_mutable_xpm()->::CMsgBattleReportAggregateStats_CMsgBattleReportStat::MergeFrom(
          from._internal_xpm());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_mutable_seconds_dead()->::CMsgBattleReportAggregateStats_CMsgBattleReportStat::MergeFrom(
          from._internal_seconds_dead());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_internal_mutable_bounty_runes()->::CMsgBattleReportAggregateStats_CMsgBattleReportStat::MergeFrom(
          from._internal_bounty_runes());
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_internal_mutable_water_runes()->::CMsgBattleReportAggregateStats_CMsgBattleReportStat::MergeFrom(
          from._internal_water_runes());
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_internal_mutable_power_runes()->::CMsgBattleReportAggregateStats_CMsgBattleReportStat::MergeFrom(
          from._internal_power_runes());
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_internal_mutable_time_enemy_t1_tower_destroyed()->::CMsgBattleReportAggregateStats_CMsgBattleReportStat::MergeFrom(
          from._internal_time_enemy_t1_tower_destroyed());
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_internal_mutable_time_friendly_t1_tower_destroyed()->::CMsgBattleReportAggregateStats_CMsgBattleReportStat::MergeFrom(
          from._internal_time_friendly_t1_tower_destroyed());
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_internal_mutable_enemy_roshan_kills()->::CMsgBattleReportAggregateStats_CMsgBattleReportStat::MergeFrom(
          from._internal_enemy_roshan_kills());
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_internal_mutable_teleports_used()->::CMsgBattleReportAggregateStats_CMsgBattleReportStat::MergeFrom(
          from._internal_teleports_used());
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_internal_mutable_dewards()->::CMsgBattleReportAggregateStats_CMsgBattleReportStat::MergeFrom(
          from._internal_dewards());
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_internal_mutable_camps_stacked()->::CMsgBattleReportAggregateStats_CMsgBattleReportStat::MergeFrom(
          from._internal_camps_stacked());
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_internal_mutable_support_gold()->::CMsgBattleReportAggregateStats_CMsgBattleReportStat::MergeFrom(
          from._internal_support_gold());
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_internal_mutable_hero_damage()->::CMsgBattleReportAggregateStats_CMsgBattleReportStat::MergeFrom(
          from._internal_hero_damage());
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_internal_mutable_hero_healing()->::CMsgBattleReportAggregateStats_CMsgBattleReportStat::MergeFrom(
          from._internal_hero_healing());
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_internal_mutable_tower_damage()->::CMsgBattleReportAggregateStats_CMsgBattleReportStat::MergeFrom(
          from._internal_tower_damage());
    }
    if (cached_has_bits & 0x00400000u) {
      _this->_internal_mutable_successful_smokes()->::CMsgBattleReportAggregateStats_CMsgBattleReportStat::MergeFrom(
          from._internal_successful_smokes());
    }
    if (cached_has_bits & 0x00800000u) {
      _this->_internal_mutable_stun_duration()->::CMsgBattleReportAggregateStats_CMsgBattleReportStat::MergeFrom(
          from._internal_stun_duration());
    }
  }
  if (cached_has_bits & 0x7f000000u) {
    if (cached_has_bits & 0x01000000u) {
      _this->_internal_mutable_duration()->::CMsgBattleReportAggregateStats_CMsgBattleReportStat::MergeFrom(
          from._internal_duration());
    }
    if (cached_has_bits & 0x02000000u) {
      _this->_internal_mutable_friendly_roshan_kills()->::CMsgBattleReportAggregateStats_CMsgBattleReportStat::MergeFrom(
          from._internal_friendly_roshan_kills());
    }
    if (cached_has_bits & 0x04000000u) {
      _this->_impl_.hero_id_ = from._impl_.hero_id_;
    }
    if (cached_has_bits & 0x08000000u) {
      _this->_impl_.predicted_position_ = from._impl_.predicted_position_;
    }
    if (cached_has_bits & 0x10000000u) {
      _this->_impl_.game_count_ = from._impl_.game_count_;
    }
    if (cached_has_bits & 0x20000000u) {
      _this->_impl_.win_count_ = from._impl_.win_count_;
    }
    if (cached_has_bits & 0x40000000u) {
      _this->_impl_.lane_win_count_ = from._impl_.lane_win_count_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::CopyFrom(const CMsgBattleReportAggregateStats_CMsgBattleReportAggregate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgBattleReportAggregateStats.CMsgBattleReportAggregate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::IsInitialized() const {
  return true;
}

void CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::InternalSwap(CMsgBattleReportAggregateStats_CMsgBattleReportAggregate* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgBattleReportAggregateStats_CMsgBattleReportAggregate, _impl_.lane_win_count_)
      + sizeof(CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::_impl_.lane_win_count_)
      - PROTOBUF_FIELD_OFFSET(CMsgBattleReportAggregateStats_CMsgBattleReportAggregate, _impl_.kills_)>(
          reinterpret_cast<char*>(&_impl_.kills_),
          reinterpret_cast<char*>(&other->_impl_.kills_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fbattle_5freport_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fbattle_5freport_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fbattle_5freport_2eproto[10]);
}

// ===================================================================

class CMsgBattleReportAggregateStats::_Internal {
 public:
};

CMsgBattleReportAggregateStats::CMsgBattleReportAggregateStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgBattleReportAggregateStats)
}
CMsgBattleReportAggregateStats::CMsgBattleReportAggregateStats(const CMsgBattleReportAggregateStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgBattleReportAggregateStats* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.result_){from._impl_.result_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgBattleReportAggregateStats)
}

inline void CMsgBattleReportAggregateStats::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.result_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CMsgBattleReportAggregateStats::~CMsgBattleReportAggregateStats() {
  // @@protoc_insertion_point(destructor:CMsgBattleReportAggregateStats)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgBattleReportAggregateStats::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.result_.~RepeatedPtrField();
}

void CMsgBattleReportAggregateStats::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgBattleReportAggregateStats::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgBattleReportAggregateStats)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.result_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgBattleReportAggregateStats::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CMsgBattleReportAggregateStats.CMsgBattleReportAggregate result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_result(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgBattleReportAggregateStats::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgBattleReportAggregateStats)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgBattleReportAggregateStats.CMsgBattleReportAggregate result = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_result_size()); i < n; i++) {
    const auto& repfield = this->_internal_result(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgBattleReportAggregateStats)
  return target;
}

size_t CMsgBattleReportAggregateStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgBattleReportAggregateStats)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgBattleReportAggregateStats.CMsgBattleReportAggregate result = 1;
  total_size += 1UL * this->_internal_result_size();
  for (const auto& msg : this->_impl_.result_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgBattleReportAggregateStats::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgBattleReportAggregateStats::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgBattleReportAggregateStats::GetClassData() const { return &_class_data_; }


void CMsgBattleReportAggregateStats::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgBattleReportAggregateStats*>(&to_msg);
  auto& from = static_cast<const CMsgBattleReportAggregateStats&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgBattleReportAggregateStats)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.result_.MergeFrom(from._impl_.result_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgBattleReportAggregateStats::CopyFrom(const CMsgBattleReportAggregateStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgBattleReportAggregateStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBattleReportAggregateStats::IsInitialized() const {
  return true;
}

void CMsgBattleReportAggregateStats::InternalSwap(CMsgBattleReportAggregateStats* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.result_.InternalSwap(&other->_impl_.result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgBattleReportAggregateStats::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fbattle_5freport_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fbattle_5freport_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fbattle_5freport_2eproto[11]);
}

// ===================================================================

class CMsgBattleReportAggregatedGeneralStats::_Internal {
 public:
};

CMsgBattleReportAggregatedGeneralStats::CMsgBattleReportAggregatedGeneralStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CMsgBattleReportAggregatedGeneralStats)
}
CMsgBattleReportAggregatedGeneralStats::CMsgBattleReportAggregatedGeneralStats(const CMsgBattleReportAggregatedGeneralStats& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  CMsgBattleReportAggregatedGeneralStats* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgBattleReportAggregatedGeneralStats)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgBattleReportAggregatedGeneralStats::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgBattleReportAggregatedGeneralStats::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CMsgBattleReportAggregatedGeneralStats::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fbattle_5freport_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fbattle_5freport_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fbattle_5freport_2eproto[12]);
}

// ===================================================================

class CMsgClientToGCGetBattleReportResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCGetBattleReportResponse>()._impl_._has_bits_);
  static const ::CMsgBattleReport& report(const CMsgClientToGCGetBattleReportResponse* msg);
  static void set_has_report(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_response(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::CMsgBattleReportAggregateStats& aggregate_stats(const CMsgClientToGCGetBattleReportResponse* msg);
  static void set_has_aggregate_stats(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CMsgBattleReportInfo& info(const CMsgClientToGCGetBattleReportResponse* msg);
  static void set_has_info(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::CMsgBattleReport&
CMsgClientToGCGetBattleReportResponse::_Internal::report(const CMsgClientToGCGetBattleReportResponse* msg) {
  return *msg->_impl_.report_;
}
const ::CMsgBattleReportAggregateStats&
CMsgClientToGCGetBattleReportResponse::_Internal::aggregate_stats(const CMsgClientToGCGetBattleReportResponse* msg) {
  return *msg->_impl_.aggregate_stats_;
}
const ::CMsgBattleReportInfo&
CMsgClientToGCGetBattleReportResponse::_Internal::info(const CMsgClientToGCGetBattleReportResponse* msg) {
  return *msg->_impl_.info_;
}
CMsgClientToGCGetBattleReportResponse::CMsgClientToGCGetBattleReportResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCGetBattleReportResponse)
}
CMsgClientToGCGetBattleReportResponse::CMsgClientToGCGetBattleReportResponse(const CMsgClientToGCGetBattleReportResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgClientToGCGetBattleReportResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.report_){nullptr}
    , decltype(_impl_.aggregate_stats_){nullptr}
    , decltype(_impl_.info_){nullptr}
    , decltype(_impl_.response_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_report()) {
    _this->_impl_.report_ = new ::CMsgBattleReport(*from._impl_.report_);
  }
  if (from._internal_has_aggregate_stats()) {
    _this->_impl_.aggregate_stats_ = new ::CMsgBattleReportAggregateStats(*from._impl_.aggregate_stats_);
  }
  if (from._internal_has_info()) {
    _this->_impl_.info_ = new ::CMsgBattleReportInfo(*from._impl_.info_);
  }
  _this->_impl_.response_ = from._impl_.response_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCGetBattleReportResponse)
}

inline void CMsgClientToGCGetBattleReportResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.report_){nullptr}
    , decltype(_impl_.aggregate_stats_){nullptr}
    , decltype(_impl_.info_){nullptr}
    , decltype(_impl_.response_){0}
  };
}

CMsgClientToGCGetBattleReportResponse::~CMsgClientToGCGetBattleReportResponse() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCGetBattleReportResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgClientToGCGetBattleReportResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.report_;
  if (this != internal_default_instance()) delete _impl_.aggregate_stats_;
  if (this != internal_default_instance()) delete _impl_.info_;
}

void CMsgClientToGCGetBattleReportResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgClientToGCGetBattleReportResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCGetBattleReportResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.report_ != nullptr);
      _impl_.report_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.aggregate_stats_ != nullptr);
      _impl_.aggregate_stats_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.info_ != nullptr);
      _impl_.info_->Clear();
    }
  }
  _impl_.response_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCGetBattleReportResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CMsgBattleReport report = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_report(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgClientToGCGetBattleReportResponse.EResponse response = 2 [default = k_eInternalError];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgClientToGCGetBattleReportResponse_EResponse_IsValid(val))) {
            _internal_set_response(static_cast<::CMsgClientToGCGetBattleReportResponse_EResponse>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgBattleReportAggregateStats aggregate_stats = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_aggregate_stats(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgBattleReportInfo info = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientToGCGetBattleReportResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCGetBattleReportResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CMsgBattleReport report = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::report(this),
        _Internal::report(this).GetCachedSize(), target, stream);
  }

  // optional .CMsgClientToGCGetBattleReportResponse.EResponse response = 2 [default = k_eInternalError];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_response(), target);
  }

  // optional .CMsgBattleReportAggregateStats aggregate_stats = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::aggregate_stats(this),
        _Internal::aggregate_stats(this).GetCachedSize(), target, stream);
  }

  // optional .CMsgBattleReportInfo info = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::info(this),
        _Internal::info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCGetBattleReportResponse)
  return target;
}

size_t CMsgClientToGCGetBattleReportResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCGetBattleReportResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .CMsgBattleReport report = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.report_);
    }

    // optional .CMsgBattleReportAggregateStats aggregate_stats = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.aggregate_stats_);
    }

    // optional .CMsgBattleReportInfo info = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.info_);
    }

    // optional .CMsgClientToGCGetBattleReportResponse.EResponse response = 2 [default = k_eInternalError];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_response());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientToGCGetBattleReportResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgClientToGCGetBattleReportResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientToGCGetBattleReportResponse::GetClassData() const { return &_class_data_; }


void CMsgClientToGCGetBattleReportResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgClientToGCGetBattleReportResponse*>(&to_msg);
  auto& from = static_cast<const CMsgClientToGCGetBattleReportResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCGetBattleReportResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_report()->::CMsgBattleReport::MergeFrom(
          from._internal_report());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_aggregate_stats()->::CMsgBattleReportAggregateStats::MergeFrom(
          from._internal_aggregate_stats());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_info()->::CMsgBattleReportInfo::MergeFrom(
          from._internal_info());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.response_ = from._impl_.response_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientToGCGetBattleReportResponse::CopyFrom(const CMsgClientToGCGetBattleReportResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCGetBattleReportResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCGetBattleReportResponse::IsInitialized() const {
  if (_internal_has_report()) {
    if (!_impl_.report_->IsInitialized()) return false;
  }
  return true;
}

void CMsgClientToGCGetBattleReportResponse::InternalSwap(CMsgClientToGCGetBattleReportResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientToGCGetBattleReportResponse, _impl_.response_)
      + sizeof(CMsgClientToGCGetBattleReportResponse::_impl_.response_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientToGCGetBattleReportResponse, _impl_.report_)>(
          reinterpret_cast<char*>(&_impl_.report_),
          reinterpret_cast<char*>(&other->_impl_.report_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCGetBattleReportResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fbattle_5freport_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fbattle_5freport_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fbattle_5freport_2eproto[13]);
}

// ===================================================================

class CMsgClientToGCGetBattleReportAggregateStats_CMsgBattleReportAggregateKey::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCGetBattleReportAggregateStats_CMsgBattleReportAggregateKey>()._impl_._has_bits_);
  static void set_has_hero_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_predicted_position(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgClientToGCGetBattleReportAggregateStats_CMsgBattleReportAggregateKey::CMsgClientToGCGetBattleReportAggregateStats_CMsgBattleReportAggregateKey(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCGetBattleReportAggregateStats.CMsgBattleReportAggregateKey)
}
CMsgClientToGCGetBattleReportAggregateStats_CMsgBattleReportAggregateKey::CMsgClientToGCGetBattleReportAggregateStats_CMsgBattleReportAggregateKey(const CMsgClientToGCGetBattleReportAggregateStats_CMsgBattleReportAggregateKey& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgClientToGCGetBattleReportAggregateStats_CMsgBattleReportAggregateKey* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.hero_id_){}
    , decltype(_impl_.predicted_position_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.hero_id_, &from._impl_.hero_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.predicted_position_) -
    reinterpret_cast<char*>(&_impl_.hero_id_)) + sizeof(_impl_.predicted_position_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCGetBattleReportAggregateStats.CMsgBattleReportAggregateKey)
}

inline void CMsgClientToGCGetBattleReportAggregateStats_CMsgBattleReportAggregateKey::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.hero_id_){0u}
    , decltype(_impl_.predicted_position_){0u}
  };
}

CMsgClientToGCGetBattleReportAggregateStats_CMsgBattleReportAggregateKey::~CMsgClientToGCGetBattleReportAggregateStats_CMsgBattleReportAggregateKey() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCGetBattleReportAggregateStats.CMsgBattleReportAggregateKey)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgClientToGCGetBattleReportAggregateStats_CMsgBattleReportAggregateKey::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientToGCGetBattleReportAggregateStats_CMsgBattleReportAggregateKey::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgClientToGCGetBattleReportAggregateStats_CMsgBattleReportAggregateKey::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCGetBattleReportAggregateStats.CMsgBattleReportAggregateKey)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.hero_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.predicted_position_) -
        reinterpret_cast<char*>(&_impl_.hero_id_)) + sizeof(_impl_.predicted_position_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCGetBattleReportAggregateStats_CMsgBattleReportAggregateKey::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 hero_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_hero_id(&has_bits);
          _impl_.hero_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 predicted_position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_predicted_position(&has_bits);
          _impl_.predicted_position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientToGCGetBattleReportAggregateStats_CMsgBattleReportAggregateKey::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCGetBattleReportAggregateStats.CMsgBattleReportAggregateKey)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 hero_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_hero_id(), target);
  }

  // optional uint32 predicted_position = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_predicted_position(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCGetBattleReportAggregateStats.CMsgBattleReportAggregateKey)
  return target;
}

size_t CMsgClientToGCGetBattleReportAggregateStats_CMsgBattleReportAggregateKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCGetBattleReportAggregateStats.CMsgBattleReportAggregateKey)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 hero_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_hero_id());
    }

    // optional uint32 predicted_position = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_predicted_position());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientToGCGetBattleReportAggregateStats_CMsgBattleReportAggregateKey::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgClientToGCGetBattleReportAggregateStats_CMsgBattleReportAggregateKey::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientToGCGetBattleReportAggregateStats_CMsgBattleReportAggregateKey::GetClassData() const { return &_class_data_; }


void CMsgClientToGCGetBattleReportAggregateStats_CMsgBattleReportAggregateKey::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgClientToGCGetBattleReportAggregateStats_CMsgBattleReportAggregateKey*>(&to_msg);
  auto& from = static_cast<const CMsgClientToGCGetBattleReportAggregateStats_CMsgBattleReportAggregateKey&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCGetBattleReportAggregateStats.CMsgBattleReportAggregateKey)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.hero_id_ = from._impl_.hero_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.predicted_position_ = from._impl_.predicted_position_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientToGCGetBattleReportAggregateStats_CMsgBattleReportAggregateKey::CopyFrom(const CMsgClientToGCGetBattleReportAggregateStats_CMsgBattleReportAggregateKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCGetBattleReportAggregateStats.CMsgBattleReportAggregateKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCGetBattleReportAggregateStats_CMsgBattleReportAggregateKey::IsInitialized() const {
  return true;
}

void CMsgClientToGCGetBattleReportAggregateStats_CMsgBattleReportAggregateKey::InternalSwap(CMsgClientToGCGetBattleReportAggregateStats_CMsgBattleReportAggregateKey* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientToGCGetBattleReportAggregateStats_CMsgBattleReportAggregateKey, _impl_.predicted_position_)
      + sizeof(CMsgClientToGCGetBattleReportAggregateStats_CMsgBattleReportAggregateKey::_impl_.predicted_position_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientToGCGetBattleReportAggregateStats_CMsgBattleReportAggregateKey, _impl_.hero_id_)>(
          reinterpret_cast<char*>(&_impl_.hero_id_),
          reinterpret_cast<char*>(&other->_impl_.hero_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCGetBattleReportAggregateStats_CMsgBattleReportAggregateKey::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fbattle_5freport_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fbattle_5freport_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fbattle_5freport_2eproto[14]);
}

// ===================================================================

class CMsgClientToGCGetBattleReportAggregateStats::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCGetBattleReportAggregateStats>()._impl_._has_bits_);
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_rank(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgClientToGCGetBattleReportAggregateStats::CMsgClientToGCGetBattleReportAggregateStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCGetBattleReportAggregateStats)
}
CMsgClientToGCGetBattleReportAggregateStats::CMsgClientToGCGetBattleReportAggregateStats(const CMsgClientToGCGetBattleReportAggregateStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgClientToGCGetBattleReportAggregateStats* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.aggregate_keys_){from._impl_.aggregate_keys_}
    , decltype(_impl_.timestamp_){}
    , decltype(_impl_.duration_){}
    , decltype(_impl_.rank_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.timestamp_, &from._impl_.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.rank_) -
    reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.rank_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCGetBattleReportAggregateStats)
}

inline void CMsgClientToGCGetBattleReportAggregateStats::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.aggregate_keys_){arena}
    , decltype(_impl_.timestamp_){0u}
    , decltype(_impl_.duration_){0u}
    , decltype(_impl_.rank_){0u}
  };
}

CMsgClientToGCGetBattleReportAggregateStats::~CMsgClientToGCGetBattleReportAggregateStats() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCGetBattleReportAggregateStats)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgClientToGCGetBattleReportAggregateStats::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.aggregate_keys_.~RepeatedPtrField();
}

void CMsgClientToGCGetBattleReportAggregateStats::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgClientToGCGetBattleReportAggregateStats::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCGetBattleReportAggregateStats)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.aggregate_keys_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.rank_) -
        reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.rank_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCGetBattleReportAggregateStats::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CMsgClientToGCGetBattleReportAggregateStats.CMsgBattleReportAggregateKey aggregate_keys = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_aggregate_keys(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_timestamp(&has_bits);
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 duration = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_duration(&has_bits);
          _impl_.duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 rank = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_rank(&has_bits);
          _impl_.rank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientToGCGetBattleReportAggregateStats::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCGetBattleReportAggregateStats)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgClientToGCGetBattleReportAggregateStats.CMsgBattleReportAggregateKey aggregate_keys = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_aggregate_keys_size()); i < n; i++) {
    const auto& repfield = this->_internal_aggregate_keys(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 timestamp = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_timestamp(), target);
  }

  // optional uint32 duration = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_duration(), target);
  }

  // optional uint32 rank = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_rank(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCGetBattleReportAggregateStats)
  return target;
}

size_t CMsgClientToGCGetBattleReportAggregateStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCGetBattleReportAggregateStats)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgClientToGCGetBattleReportAggregateStats.CMsgBattleReportAggregateKey aggregate_keys = 1;
  total_size += 1UL * this->_internal_aggregate_keys_size();
  for (const auto& msg : this->_impl_.aggregate_keys_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 timestamp = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_timestamp());
    }

    // optional uint32 duration = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_duration());
    }

    // optional uint32 rank = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_rank());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientToGCGetBattleReportAggregateStats::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgClientToGCGetBattleReportAggregateStats::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientToGCGetBattleReportAggregateStats::GetClassData() const { return &_class_data_; }


void CMsgClientToGCGetBattleReportAggregateStats::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgClientToGCGetBattleReportAggregateStats*>(&to_msg);
  auto& from = static_cast<const CMsgClientToGCGetBattleReportAggregateStats&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCGetBattleReportAggregateStats)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.aggregate_keys_.MergeFrom(from._impl_.aggregate_keys_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.timestamp_ = from._impl_.timestamp_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.duration_ = from._impl_.duration_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.rank_ = from._impl_.rank_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientToGCGetBattleReportAggregateStats::CopyFrom(const CMsgClientToGCGetBattleReportAggregateStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCGetBattleReportAggregateStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCGetBattleReportAggregateStats::IsInitialized() const {
  return true;
}

void CMsgClientToGCGetBattleReportAggregateStats::InternalSwap(CMsgClientToGCGetBattleReportAggregateStats* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.aggregate_keys_.InternalSwap(&other->_impl_.aggregate_keys_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientToGCGetBattleReportAggregateStats, _impl_.rank_)
      + sizeof(CMsgClientToGCGetBattleReportAggregateStats::_impl_.rank_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientToGCGetBattleReportAggregateStats, _impl_.timestamp_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCGetBattleReportAggregateStats::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fbattle_5freport_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fbattle_5freport_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fbattle_5freport_2eproto[15]);
}

// ===================================================================

class CMsgClientToGCGetBattleReportAggregateStatsResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCGetBattleReportAggregateStatsResponse>()._impl_._has_bits_);
  static const ::CMsgBattleReportAggregateStats& aggregate_stats(const CMsgClientToGCGetBattleReportAggregateStatsResponse* msg);
  static void set_has_aggregate_stats(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_response(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::CMsgBattleReportAggregateStats&
CMsgClientToGCGetBattleReportAggregateStatsResponse::_Internal::aggregate_stats(const CMsgClientToGCGetBattleReportAggregateStatsResponse* msg) {
  return *msg->_impl_.aggregate_stats_;
}
CMsgClientToGCGetBattleReportAggregateStatsResponse::CMsgClientToGCGetBattleReportAggregateStatsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCGetBattleReportAggregateStatsResponse)
}
CMsgClientToGCGetBattleReportAggregateStatsResponse::CMsgClientToGCGetBattleReportAggregateStatsResponse(const CMsgClientToGCGetBattleReportAggregateStatsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgClientToGCGetBattleReportAggregateStatsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.aggregate_stats_){nullptr}
    , decltype(_impl_.response_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_aggregate_stats()) {
    _this->_impl_.aggregate_stats_ = new ::CMsgBattleReportAggregateStats(*from._impl_.aggregate_stats_);
  }
  _this->_impl_.response_ = from._impl_.response_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCGetBattleReportAggregateStatsResponse)
}

inline void CMsgClientToGCGetBattleReportAggregateStatsResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.aggregate_stats_){nullptr}
    , decltype(_impl_.response_){0}
  };
}

CMsgClientToGCGetBattleReportAggregateStatsResponse::~CMsgClientToGCGetBattleReportAggregateStatsResponse() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCGetBattleReportAggregateStatsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgClientToGCGetBattleReportAggregateStatsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.aggregate_stats_;
}

void CMsgClientToGCGetBattleReportAggregateStatsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgClientToGCGetBattleReportAggregateStatsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCGetBattleReportAggregateStatsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.aggregate_stats_ != nullptr);
    _impl_.aggregate_stats_->Clear();
  }
  _impl_.response_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCGetBattleReportAggregateStatsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CMsgBattleReportAggregateStats aggregate_stats = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_aggregate_stats(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgClientToGCGetBattleReportAggregateStatsResponse.EResponse response = 2 [default = k_eInternalError];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgClientToGCGetBattleReportAggregateStatsResponse_EResponse_IsValid(val))) {
            _internal_set_response(static_cast<::CMsgClientToGCGetBattleReportAggregateStatsResponse_EResponse>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientToGCGetBattleReportAggregateStatsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCGetBattleReportAggregateStatsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CMsgBattleReportAggregateStats aggregate_stats = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::aggregate_stats(this),
        _Internal::aggregate_stats(this).GetCachedSize(), target, stream);
  }

  // optional .CMsgClientToGCGetBattleReportAggregateStatsResponse.EResponse response = 2 [default = k_eInternalError];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_response(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCGetBattleReportAggregateStatsResponse)
  return target;
}

size_t CMsgClientToGCGetBattleReportAggregateStatsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCGetBattleReportAggregateStatsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .CMsgBattleReportAggregateStats aggregate_stats = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.aggregate_stats_);
    }

    // optional .CMsgClientToGCGetBattleReportAggregateStatsResponse.EResponse response = 2 [default = k_eInternalError];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_response());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientToGCGetBattleReportAggregateStatsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgClientToGCGetBattleReportAggregateStatsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientToGCGetBattleReportAggregateStatsResponse::GetClassData() const { return &_class_data_; }


void CMsgClientToGCGetBattleReportAggregateStatsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgClientToGCGetBattleReportAggregateStatsResponse*>(&to_msg);
  auto& from = static_cast<const CMsgClientToGCGetBattleReportAggregateStatsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCGetBattleReportAggregateStatsResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_aggregate_stats()->::CMsgBattleReportAggregateStats::MergeFrom(
          from._internal_aggregate_stats());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.response_ = from._impl_.response_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientToGCGetBattleReportAggregateStatsResponse::CopyFrom(const CMsgClientToGCGetBattleReportAggregateStatsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCGetBattleReportAggregateStatsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCGetBattleReportAggregateStatsResponse::IsInitialized() const {
  return true;
}

void CMsgClientToGCGetBattleReportAggregateStatsResponse::InternalSwap(CMsgClientToGCGetBattleReportAggregateStatsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientToGCGetBattleReportAggregateStatsResponse, _impl_.response_)
      + sizeof(CMsgClientToGCGetBattleReportAggregateStatsResponse::_impl_.response_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientToGCGetBattleReportAggregateStatsResponse, _impl_.aggregate_stats_)>(
          reinterpret_cast<char*>(&_impl_.aggregate_stats_),
          reinterpret_cast<char*>(&other->_impl_.aggregate_stats_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCGetBattleReportAggregateStatsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fbattle_5freport_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fbattle_5freport_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fbattle_5freport_2eproto[16]);
}

// ===================================================================

class CMsgClientToGCGetBattleReportInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCGetBattleReportInfo>()._impl_._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientToGCGetBattleReportInfo::CMsgClientToGCGetBattleReportInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCGetBattleReportInfo)
}
CMsgClientToGCGetBattleReportInfo::CMsgClientToGCGetBattleReportInfo(const CMsgClientToGCGetBattleReportInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgClientToGCGetBattleReportInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.account_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.account_id_ = from._impl_.account_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCGetBattleReportInfo)
}

inline void CMsgClientToGCGetBattleReportInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.account_id_){0u}
  };
}

CMsgClientToGCGetBattleReportInfo::~CMsgClientToGCGetBattleReportInfo() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCGetBattleReportInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgClientToGCGetBattleReportInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientToGCGetBattleReportInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgClientToGCGetBattleReportInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCGetBattleReportInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.account_id_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCGetBattleReportInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          _impl_.account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientToGCGetBattleReportInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCGetBattleReportInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCGetBattleReportInfo)
  return target;
}

size_t CMsgClientToGCGetBattleReportInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCGetBattleReportInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 account_id = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_account_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientToGCGetBattleReportInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgClientToGCGetBattleReportInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientToGCGetBattleReportInfo::GetClassData() const { return &_class_data_; }


void CMsgClientToGCGetBattleReportInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgClientToGCGetBattleReportInfo*>(&to_msg);
  auto& from = static_cast<const CMsgClientToGCGetBattleReportInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCGetBattleReportInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_account_id()) {
    _this->_internal_set_account_id(from._internal_account_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientToGCGetBattleReportInfo::CopyFrom(const CMsgClientToGCGetBattleReportInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCGetBattleReportInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCGetBattleReportInfo::IsInitialized() const {
  return true;
}

void CMsgClientToGCGetBattleReportInfo::InternalSwap(CMsgClientToGCGetBattleReportInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.account_id_, other->_impl_.account_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCGetBattleReportInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fbattle_5freport_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fbattle_5freport_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fbattle_5freport_2eproto[17]);
}

// ===================================================================

class CMsgClientToGCGetBattleReportInfoResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCGetBattleReportInfoResponse>()._impl_._has_bits_);
  static const ::CMsgBattleReportInfoList& battle_report_info_list(const CMsgClientToGCGetBattleReportInfoResponse* msg);
  static void set_has_battle_report_info_list(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_response(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::CMsgBattleReportInfoList&
CMsgClientToGCGetBattleReportInfoResponse::_Internal::battle_report_info_list(const CMsgClientToGCGetBattleReportInfoResponse* msg) {
  return *msg->_impl_.battle_report_info_list_;
}
CMsgClientToGCGetBattleReportInfoResponse::CMsgClientToGCGetBattleReportInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCGetBattleReportInfoResponse)
}
CMsgClientToGCGetBattleReportInfoResponse::CMsgClientToGCGetBattleReportInfoResponse(const CMsgClientToGCGetBattleReportInfoResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgClientToGCGetBattleReportInfoResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.battle_report_info_list_){nullptr}
    , decltype(_impl_.response_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_battle_report_info_list()) {
    _this->_impl_.battle_report_info_list_ = new ::CMsgBattleReportInfoList(*from._impl_.battle_report_info_list_);
  }
  _this->_impl_.response_ = from._impl_.response_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCGetBattleReportInfoResponse)
}

inline void CMsgClientToGCGetBattleReportInfoResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.battle_report_info_list_){nullptr}
    , decltype(_impl_.response_){0}
  };
}

CMsgClientToGCGetBattleReportInfoResponse::~CMsgClientToGCGetBattleReportInfoResponse() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCGetBattleReportInfoResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgClientToGCGetBattleReportInfoResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.battle_report_info_list_;
}

void CMsgClientToGCGetBattleReportInfoResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgClientToGCGetBattleReportInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCGetBattleReportInfoResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.battle_report_info_list_ != nullptr);
    _impl_.battle_report_info_list_->Clear();
  }
  _impl_.response_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCGetBattleReportInfoResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CMsgBattleReportInfoList battle_report_info_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_battle_report_info_list(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgClientToGCGetBattleReportInfoResponse.EResponse response = 2 [default = k_eInternalError];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgClientToGCGetBattleReportInfoResponse_EResponse_IsValid(val))) {
            _internal_set_response(static_cast<::CMsgClientToGCGetBattleReportInfoResponse_EResponse>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientToGCGetBattleReportInfoResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCGetBattleReportInfoResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CMsgBattleReportInfoList battle_report_info_list = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::battle_report_info_list(this),
        _Internal::battle_report_info_list(this).GetCachedSize(), target, stream);
  }

  // optional .CMsgClientToGCGetBattleReportInfoResponse.EResponse response = 2 [default = k_eInternalError];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_response(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCGetBattleReportInfoResponse)
  return target;
}

size_t CMsgClientToGCGetBattleReportInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCGetBattleReportInfoResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .CMsgBattleReportInfoList battle_report_info_list = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.battle_report_info_list_);
    }

    // optional .CMsgClientToGCGetBattleReportInfoResponse.EResponse response = 2 [default = k_eInternalError];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_response());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientToGCGetBattleReportInfoResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgClientToGCGetBattleReportInfoResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientToGCGetBattleReportInfoResponse::GetClassData() const { return &_class_data_; }


void CMsgClientToGCGetBattleReportInfoResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgClientToGCGetBattleReportInfoResponse*>(&to_msg);
  auto& from = static_cast<const CMsgClientToGCGetBattleReportInfoResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCGetBattleReportInfoResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_battle_report_info_list()->::CMsgBattleReportInfoList::MergeFrom(
          from._internal_battle_report_info_list());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.response_ = from._impl_.response_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientToGCGetBattleReportInfoResponse::CopyFrom(const CMsgClientToGCGetBattleReportInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCGetBattleReportInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCGetBattleReportInfoResponse::IsInitialized() const {
  return true;
}

void CMsgClientToGCGetBattleReportInfoResponse::InternalSwap(CMsgClientToGCGetBattleReportInfoResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientToGCGetBattleReportInfoResponse, _impl_.response_)
      + sizeof(CMsgClientToGCGetBattleReportInfoResponse::_impl_.response_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientToGCGetBattleReportInfoResponse, _impl_.battle_report_info_list_)>(
          reinterpret_cast<char*>(&_impl_.battle_report_info_list_),
          reinterpret_cast<char*>(&other->_impl_.battle_report_info_list_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCGetBattleReportInfoResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fbattle_5freport_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fbattle_5freport_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fbattle_5freport_2eproto[18]);
}

// ===================================================================

class CMsgClientToGCAcknowledgeBattleReport::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCAcknowledgeBattleReport>()._impl_._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgClientToGCAcknowledgeBattleReport::CMsgClientToGCAcknowledgeBattleReport(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCAcknowledgeBattleReport)
}
CMsgClientToGCAcknowledgeBattleReport::CMsgClientToGCAcknowledgeBattleReport(const CMsgClientToGCAcknowledgeBattleReport& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgClientToGCAcknowledgeBattleReport* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.account_id_){}
    , decltype(_impl_.timestamp_){}
    , decltype(_impl_.duration_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.account_id_, &from._impl_.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.duration_) -
    reinterpret_cast<char*>(&_impl_.account_id_)) + sizeof(_impl_.duration_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCAcknowledgeBattleReport)
}

inline void CMsgClientToGCAcknowledgeBattleReport::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.account_id_){0u}
    , decltype(_impl_.timestamp_){0u}
    , decltype(_impl_.duration_){0u}
  };
}

CMsgClientToGCAcknowledgeBattleReport::~CMsgClientToGCAcknowledgeBattleReport() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCAcknowledgeBattleReport)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgClientToGCAcknowledgeBattleReport::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientToGCAcknowledgeBattleReport::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgClientToGCAcknowledgeBattleReport::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCAcknowledgeBattleReport)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.duration_) -
        reinterpret_cast<char*>(&_impl_.account_id_)) + sizeof(_impl_.duration_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCAcknowledgeBattleReport::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          _impl_.account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_timestamp(&has_bits);
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 duration = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_duration(&has_bits);
          _impl_.duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientToGCAcknowledgeBattleReport::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCAcknowledgeBattleReport)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional uint32 timestamp = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_timestamp(), target);
  }

  // optional uint32 duration = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_duration(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCAcknowledgeBattleReport)
  return target;
}

size_t CMsgClientToGCAcknowledgeBattleReport::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCAcknowledgeBattleReport)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_account_id());
    }

    // optional uint32 timestamp = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_timestamp());
    }

    // optional uint32 duration = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_duration());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientToGCAcknowledgeBattleReport::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgClientToGCAcknowledgeBattleReport::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientToGCAcknowledgeBattleReport::GetClassData() const { return &_class_data_; }


void CMsgClientToGCAcknowledgeBattleReport::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgClientToGCAcknowledgeBattleReport*>(&to_msg);
  auto& from = static_cast<const CMsgClientToGCAcknowledgeBattleReport&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCAcknowledgeBattleReport)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.account_id_ = from._impl_.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.timestamp_ = from._impl_.timestamp_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.duration_ = from._impl_.duration_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientToGCAcknowledgeBattleReport::CopyFrom(const CMsgClientToGCAcknowledgeBattleReport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCAcknowledgeBattleReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCAcknowledgeBattleReport::IsInitialized() const {
  return true;
}

void CMsgClientToGCAcknowledgeBattleReport::InternalSwap(CMsgClientToGCAcknowledgeBattleReport* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientToGCAcknowledgeBattleReport, _impl_.duration_)
      + sizeof(CMsgClientToGCAcknowledgeBattleReport::_impl_.duration_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientToGCAcknowledgeBattleReport, _impl_.account_id_)>(
          reinterpret_cast<char*>(&_impl_.account_id_),
          reinterpret_cast<char*>(&other->_impl_.account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCAcknowledgeBattleReport::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fbattle_5freport_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fbattle_5freport_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fbattle_5freport_2eproto[19]);
}

// ===================================================================

class CMsgClientToGCAcknowledgeBattleReportResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCAcknowledgeBattleReportResponse>()._impl_._has_bits_);
  static void set_has_response(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_shards_awarded(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgClientToGCAcknowledgeBattleReportResponse::CMsgClientToGCAcknowledgeBattleReportResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCAcknowledgeBattleReportResponse)
}
CMsgClientToGCAcknowledgeBattleReportResponse::CMsgClientToGCAcknowledgeBattleReportResponse(const CMsgClientToGCAcknowledgeBattleReportResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgClientToGCAcknowledgeBattleReportResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.response_){}
    , decltype(_impl_.shards_awarded_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.response_, &from._impl_.response_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.shards_awarded_) -
    reinterpret_cast<char*>(&_impl_.response_)) + sizeof(_impl_.shards_awarded_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCAcknowledgeBattleReportResponse)
}

inline void CMsgClientToGCAcknowledgeBattleReportResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.response_){0}
    , decltype(_impl_.shards_awarded_){0u}
  };
}

CMsgClientToGCAcknowledgeBattleReportResponse::~CMsgClientToGCAcknowledgeBattleReportResponse() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCAcknowledgeBattleReportResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgClientToGCAcknowledgeBattleReportResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientToGCAcknowledgeBattleReportResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgClientToGCAcknowledgeBattleReportResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCAcknowledgeBattleReportResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.response_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.shards_awarded_) -
        reinterpret_cast<char*>(&_impl_.response_)) + sizeof(_impl_.shards_awarded_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCAcknowledgeBattleReportResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CMsgClientToGCAcknowledgeBattleReportResponse.EResponse response = 1 [default = k_eInternalError];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgClientToGCAcknowledgeBattleReportResponse_EResponse_IsValid(val))) {
            _internal_set_response(static_cast<::CMsgClientToGCAcknowledgeBattleReportResponse_EResponse>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 shards_awarded = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_shards_awarded(&has_bits);
          _impl_.shards_awarded_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientToGCAcknowledgeBattleReportResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCAcknowledgeBattleReportResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CMsgClientToGCAcknowledgeBattleReportResponse.EResponse response = 1 [default = k_eInternalError];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_response(), target);
  }

  // optional uint32 shards_awarded = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_shards_awarded(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCAcknowledgeBattleReportResponse)
  return target;
}

size_t CMsgClientToGCAcknowledgeBattleReportResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCAcknowledgeBattleReportResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .CMsgClientToGCAcknowledgeBattleReportResponse.EResponse response = 1 [default = k_eInternalError];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_response());
    }

    // optional uint32 shards_awarded = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_shards_awarded());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientToGCAcknowledgeBattleReportResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgClientToGCAcknowledgeBattleReportResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientToGCAcknowledgeBattleReportResponse::GetClassData() const { return &_class_data_; }


void CMsgClientToGCAcknowledgeBattleReportResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgClientToGCAcknowledgeBattleReportResponse*>(&to_msg);
  auto& from = static_cast<const CMsgClientToGCAcknowledgeBattleReportResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCAcknowledgeBattleReportResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.response_ = from._impl_.response_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.shards_awarded_ = from._impl_.shards_awarded_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientToGCAcknowledgeBattleReportResponse::CopyFrom(const CMsgClientToGCAcknowledgeBattleReportResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCAcknowledgeBattleReportResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCAcknowledgeBattleReportResponse::IsInitialized() const {
  return true;
}

void CMsgClientToGCAcknowledgeBattleReportResponse::InternalSwap(CMsgClientToGCAcknowledgeBattleReportResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientToGCAcknowledgeBattleReportResponse, _impl_.shards_awarded_)
      + sizeof(CMsgClientToGCAcknowledgeBattleReportResponse::_impl_.shards_awarded_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientToGCAcknowledgeBattleReportResponse, _impl_.response_)>(
          reinterpret_cast<char*>(&_impl_.response_),
          reinterpret_cast<char*>(&other->_impl_.response_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCAcknowledgeBattleReportResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fbattle_5freport_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fbattle_5freport_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fbattle_5freport_2eproto[20]);
}

// ===================================================================

class CMsgClientToGCGetBattleReportMatchHistory::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCGetBattleReportMatchHistory>()._impl_._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgClientToGCGetBattleReportMatchHistory::CMsgClientToGCGetBattleReportMatchHistory(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCGetBattleReportMatchHistory)
}
CMsgClientToGCGetBattleReportMatchHistory::CMsgClientToGCGetBattleReportMatchHistory(const CMsgClientToGCGetBattleReportMatchHistory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgClientToGCGetBattleReportMatchHistory* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.account_id_){}
    , decltype(_impl_.timestamp_){}
    , decltype(_impl_.duration_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.account_id_, &from._impl_.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.duration_) -
    reinterpret_cast<char*>(&_impl_.account_id_)) + sizeof(_impl_.duration_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCGetBattleReportMatchHistory)
}

inline void CMsgClientToGCGetBattleReportMatchHistory::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.account_id_){0u}
    , decltype(_impl_.timestamp_){0u}
    , decltype(_impl_.duration_){0u}
  };
}

CMsgClientToGCGetBattleReportMatchHistory::~CMsgClientToGCGetBattleReportMatchHistory() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCGetBattleReportMatchHistory)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgClientToGCGetBattleReportMatchHistory::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientToGCGetBattleReportMatchHistory::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgClientToGCGetBattleReportMatchHistory::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCGetBattleReportMatchHistory)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.duration_) -
        reinterpret_cast<char*>(&_impl_.account_id_)) + sizeof(_impl_.duration_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCGetBattleReportMatchHistory::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          _impl_.account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_timestamp(&has_bits);
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 duration = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_duration(&has_bits);
          _impl_.duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientToGCGetBattleReportMatchHistory::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCGetBattleReportMatchHistory)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional uint32 timestamp = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_timestamp(), target);
  }

  // optional uint32 duration = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_duration(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCGetBattleReportMatchHistory)
  return target;
}

size_t CMsgClientToGCGetBattleReportMatchHistory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCGetBattleReportMatchHistory)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_account_id());
    }

    // optional uint32 timestamp = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_timestamp());
    }

    // optional uint32 duration = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_duration());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientToGCGetBattleReportMatchHistory::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgClientToGCGetBattleReportMatchHistory::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientToGCGetBattleReportMatchHistory::GetClassData() const { return &_class_data_; }


void CMsgClientToGCGetBattleReportMatchHistory::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgClientToGCGetBattleReportMatchHistory*>(&to_msg);
  auto& from = static_cast<const CMsgClientToGCGetBattleReportMatchHistory&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCGetBattleReportMatchHistory)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.account_id_ = from._impl_.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.timestamp_ = from._impl_.timestamp_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.duration_ = from._impl_.duration_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientToGCGetBattleReportMatchHistory::CopyFrom(const CMsgClientToGCGetBattleReportMatchHistory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCGetBattleReportMatchHistory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCGetBattleReportMatchHistory::IsInitialized() const {
  return true;
}

void CMsgClientToGCGetBattleReportMatchHistory::InternalSwap(CMsgClientToGCGetBattleReportMatchHistory* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientToGCGetBattleReportMatchHistory, _impl_.duration_)
      + sizeof(CMsgClientToGCGetBattleReportMatchHistory::_impl_.duration_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientToGCGetBattleReportMatchHistory, _impl_.account_id_)>(
          reinterpret_cast<char*>(&_impl_.account_id_),
          reinterpret_cast<char*>(&other->_impl_.account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCGetBattleReportMatchHistory::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fbattle_5freport_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fbattle_5freport_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fbattle_5freport_2eproto[21]);
}

// ===================================================================

class CMsgClientToGCGetBattleReportMatchHistoryResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCGetBattleReportMatchHistoryResponse>()._impl_._has_bits_);
  static void set_has_response(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CMsgBattleReport_GameList& games(const CMsgClientToGCGetBattleReportMatchHistoryResponse* msg);
  static void set_has_games(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CMsgBattleReport_GameList&
CMsgClientToGCGetBattleReportMatchHistoryResponse::_Internal::games(const CMsgClientToGCGetBattleReportMatchHistoryResponse* msg) {
  return *msg->_impl_.games_;
}
CMsgClientToGCGetBattleReportMatchHistoryResponse::CMsgClientToGCGetBattleReportMatchHistoryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCGetBattleReportMatchHistoryResponse)
}
CMsgClientToGCGetBattleReportMatchHistoryResponse::CMsgClientToGCGetBattleReportMatchHistoryResponse(const CMsgClientToGCGetBattleReportMatchHistoryResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgClientToGCGetBattleReportMatchHistoryResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.games_){nullptr}
    , decltype(_impl_.response_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_games()) {
    _this->_impl_.games_ = new ::CMsgBattleReport_GameList(*from._impl_.games_);
  }
  _this->_impl_.response_ = from._impl_.response_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCGetBattleReportMatchHistoryResponse)
}

inline void CMsgClientToGCGetBattleReportMatchHistoryResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.games_){nullptr}
    , decltype(_impl_.response_){0}
  };
}

CMsgClientToGCGetBattleReportMatchHistoryResponse::~CMsgClientToGCGetBattleReportMatchHistoryResponse() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCGetBattleReportMatchHistoryResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgClientToGCGetBattleReportMatchHistoryResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.games_;
}

void CMsgClientToGCGetBattleReportMatchHistoryResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgClientToGCGetBattleReportMatchHistoryResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCGetBattleReportMatchHistoryResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.games_ != nullptr);
    _impl_.games_->Clear();
  }
  _impl_.response_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCGetBattleReportMatchHistoryResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CMsgClientToGCGetBattleReportMatchHistoryResponse.EResponse response = 1 [default = k_eInternalError];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgClientToGCGetBattleReportMatchHistoryResponse_EResponse_IsValid(val))) {
            _internal_set_response(static_cast<::CMsgClientToGCGetBattleReportMatchHistoryResponse_EResponse>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgBattleReport_GameList games = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_games(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientToGCGetBattleReportMatchHistoryResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCGetBattleReportMatchHistoryResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CMsgClientToGCGetBattleReportMatchHistoryResponse.EResponse response = 1 [default = k_eInternalError];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_response(), target);
  }

  // optional .CMsgBattleReport_GameList games = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::games(this),
        _Internal::games(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCGetBattleReportMatchHistoryResponse)
  return target;
}

size_t CMsgClientToGCGetBattleReportMatchHistoryResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCGetBattleReportMatchHistoryResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .CMsgBattleReport_GameList games = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.games_);
    }

    // optional .CMsgClientToGCGetBattleReportMatchHistoryResponse.EResponse response = 1 [default = k_eInternalError];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_response());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientToGCGetBattleReportMatchHistoryResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgClientToGCGetBattleReportMatchHistoryResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientToGCGetBattleReportMatchHistoryResponse::GetClassData() const { return &_class_data_; }


void CMsgClientToGCGetBattleReportMatchHistoryResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgClientToGCGetBattleReportMatchHistoryResponse*>(&to_msg);
  auto& from = static_cast<const CMsgClientToGCGetBattleReportMatchHistoryResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCGetBattleReportMatchHistoryResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_games()->::CMsgBattleReport_GameList::MergeFrom(
          from._internal_games());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.response_ = from._impl_.response_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientToGCGetBattleReportMatchHistoryResponse::CopyFrom(const CMsgClientToGCGetBattleReportMatchHistoryResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCGetBattleReportMatchHistoryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCGetBattleReportMatchHistoryResponse::IsInitialized() const {
  return true;
}

void CMsgClientToGCGetBattleReportMatchHistoryResponse::InternalSwap(CMsgClientToGCGetBattleReportMatchHistoryResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientToGCGetBattleReportMatchHistoryResponse, _impl_.response_)
      + sizeof(CMsgClientToGCGetBattleReportMatchHistoryResponse::_impl_.response_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientToGCGetBattleReportMatchHistoryResponse, _impl_.games_)>(
          reinterpret_cast<char*>(&_impl_.games_),
          reinterpret_cast<char*>(&other->_impl_.games_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCGetBattleReportMatchHistoryResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fbattle_5freport_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fbattle_5freport_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fbattle_5freport_2eproto[22]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CMsgClientToGCGetBattleReport*
Arena::CreateMaybeMessage< ::CMsgClientToGCGetBattleReport >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCGetBattleReport >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgBattleReport_Game*
Arena::CreateMaybeMessage< ::CMsgBattleReport_Game >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgBattleReport_Game >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgBattleReport_GameList*
Arena::CreateMaybeMessage< ::CMsgBattleReport_GameList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgBattleReport_GameList >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgBattleReport_HighlightGeneral*
Arena::CreateMaybeMessage< ::CMsgBattleReport_HighlightGeneral >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgBattleReport_HighlightGeneral >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgBattleReport_Highlight*
Arena::CreateMaybeMessage< ::CMsgBattleReport_Highlight >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgBattleReport_Highlight >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgBattleReport*
Arena::CreateMaybeMessage< ::CMsgBattleReport >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgBattleReport >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgBattleReportInfo*
Arena::CreateMaybeMessage< ::CMsgBattleReportInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgBattleReportInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgBattleReportInfoList*
Arena::CreateMaybeMessage< ::CMsgBattleReportInfoList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgBattleReportInfoList >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgBattleReportHighlights*
Arena::CreateMaybeMessage< ::CMsgBattleReportHighlights >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgBattleReportHighlights >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgBattleReportAggregateStats_CMsgBattleReportStat*
Arena::CreateMaybeMessage< ::CMsgBattleReportAggregateStats_CMsgBattleReportStat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgBattleReportAggregateStats_CMsgBattleReportStat >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgBattleReportAggregateStats_CMsgBattleReportAggregate*
Arena::CreateMaybeMessage< ::CMsgBattleReportAggregateStats_CMsgBattleReportAggregate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgBattleReportAggregateStats_CMsgBattleReportAggregate >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgBattleReportAggregateStats*
Arena::CreateMaybeMessage< ::CMsgBattleReportAggregateStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgBattleReportAggregateStats >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgBattleReportAggregatedGeneralStats*
Arena::CreateMaybeMessage< ::CMsgBattleReportAggregatedGeneralStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgBattleReportAggregatedGeneralStats >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCGetBattleReportResponse*
Arena::CreateMaybeMessage< ::CMsgClientToGCGetBattleReportResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCGetBattleReportResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCGetBattleReportAggregateStats_CMsgBattleReportAggregateKey*
Arena::CreateMaybeMessage< ::CMsgClientToGCGetBattleReportAggregateStats_CMsgBattleReportAggregateKey >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCGetBattleReportAggregateStats_CMsgBattleReportAggregateKey >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCGetBattleReportAggregateStats*
Arena::CreateMaybeMessage< ::CMsgClientToGCGetBattleReportAggregateStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCGetBattleReportAggregateStats >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCGetBattleReportAggregateStatsResponse*
Arena::CreateMaybeMessage< ::CMsgClientToGCGetBattleReportAggregateStatsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCGetBattleReportAggregateStatsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCGetBattleReportInfo*
Arena::CreateMaybeMessage< ::CMsgClientToGCGetBattleReportInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCGetBattleReportInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCGetBattleReportInfoResponse*
Arena::CreateMaybeMessage< ::CMsgClientToGCGetBattleReportInfoResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCGetBattleReportInfoResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCAcknowledgeBattleReport*
Arena::CreateMaybeMessage< ::CMsgClientToGCAcknowledgeBattleReport >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCAcknowledgeBattleReport >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCAcknowledgeBattleReportResponse*
Arena::CreateMaybeMessage< ::CMsgClientToGCAcknowledgeBattleReportResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCAcknowledgeBattleReportResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCGetBattleReportMatchHistory*
Arena::CreateMaybeMessage< ::CMsgClientToGCGetBattleReportMatchHistory >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCGetBattleReportMatchHistory >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCGetBattleReportMatchHistoryResponse*
Arena::CreateMaybeMessage< ::CMsgClientToGCGetBattleReportMatchHistoryResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCGetBattleReportMatchHistoryResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
