// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dota_gcmessages_client_chat.proto

#include "dota_gcmessages_client_chat.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR CMsgClientToGCPrivateChatInvite::CMsgClientToGCPrivateChatInvite(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.private_chat_channel_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.invited_account_id_)*/0u} {}
struct CMsgClientToGCPrivateChatInviteDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgClientToGCPrivateChatInviteDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgClientToGCPrivateChatInviteDefaultTypeInternal() {}
  union {
    CMsgClientToGCPrivateChatInvite _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgClientToGCPrivateChatInviteDefaultTypeInternal _CMsgClientToGCPrivateChatInvite_default_instance_;
PROTOBUF_CONSTEXPR CMsgClientToGCPrivateChatKick::CMsgClientToGCPrivateChatKick(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.private_chat_channel_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.kick_account_id_)*/0u} {}
struct CMsgClientToGCPrivateChatKickDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgClientToGCPrivateChatKickDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgClientToGCPrivateChatKickDefaultTypeInternal() {}
  union {
    CMsgClientToGCPrivateChatKick _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgClientToGCPrivateChatKickDefaultTypeInternal _CMsgClientToGCPrivateChatKick_default_instance_;
PROTOBUF_CONSTEXPR CMsgClientToGCPrivateChatPromote::CMsgClientToGCPrivateChatPromote(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.private_chat_channel_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.promote_account_id_)*/0u} {}
struct CMsgClientToGCPrivateChatPromoteDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgClientToGCPrivateChatPromoteDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgClientToGCPrivateChatPromoteDefaultTypeInternal() {}
  union {
    CMsgClientToGCPrivateChatPromote _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgClientToGCPrivateChatPromoteDefaultTypeInternal _CMsgClientToGCPrivateChatPromote_default_instance_;
PROTOBUF_CONSTEXPR CMsgClientToGCPrivateChatDemote::CMsgClientToGCPrivateChatDemote(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.private_chat_channel_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.demote_account_id_)*/0u} {}
struct CMsgClientToGCPrivateChatDemoteDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgClientToGCPrivateChatDemoteDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgClientToGCPrivateChatDemoteDefaultTypeInternal() {}
  union {
    CMsgClientToGCPrivateChatDemote _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgClientToGCPrivateChatDemoteDefaultTypeInternal _CMsgClientToGCPrivateChatDemote_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCToClientPrivateChatResponse::CMsgGCToClientPrivateChatResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.private_chat_channel_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.username_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.result_)*/0} {}
struct CMsgGCToClientPrivateChatResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCToClientPrivateChatResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCToClientPrivateChatResponseDefaultTypeInternal() {}
  union {
    CMsgGCToClientPrivateChatResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCToClientPrivateChatResponseDefaultTypeInternal _CMsgGCToClientPrivateChatResponse_default_instance_;
PROTOBUF_CONSTEXPR CMsgDOTAJoinChatChannel::CMsgDOTAJoinChatChannel(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.channel_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.channel_type_)*/0
  , /*decltype(_impl_.silent_rejection_)*/false} {}
struct CMsgDOTAJoinChatChannelDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgDOTAJoinChatChannelDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgDOTAJoinChatChannelDefaultTypeInternal() {}
  union {
    CMsgDOTAJoinChatChannel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgDOTAJoinChatChannelDefaultTypeInternal _CMsgDOTAJoinChatChannel_default_instance_;
PROTOBUF_CONSTEXPR CMsgDOTALeaveChatChannel::CMsgDOTALeaveChatChannel(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.channel_id_)*/uint64_t{0u}} {}
struct CMsgDOTALeaveChatChannelDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgDOTALeaveChatChannelDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgDOTALeaveChatChannelDefaultTypeInternal() {}
  union {
    CMsgDOTALeaveChatChannel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgDOTALeaveChatChannelDefaultTypeInternal _CMsgDOTALeaveChatChannel_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCChatReportPublicSpam::CMsgGCChatReportPublicSpam(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.channel_id_)*/uint64_t{0u}
  , /*decltype(_impl_.channel_user_id_)*/0u} {}
struct CMsgGCChatReportPublicSpamDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCChatReportPublicSpamDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCChatReportPublicSpamDefaultTypeInternal() {}
  union {
    CMsgGCChatReportPublicSpam _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCChatReportPublicSpamDefaultTypeInternal _CMsgGCChatReportPublicSpam_default_instance_;
PROTOBUF_CONSTEXPR CMsgDOTAChatModeratorBan::CMsgDOTAChatModeratorBan(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.channel_id_)*/uint64_t{0u}
  , /*decltype(_impl_.account_id_)*/0u
  , /*decltype(_impl_.duration_)*/0u} {}
struct CMsgDOTAChatModeratorBanDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgDOTAChatModeratorBanDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgDOTAChatModeratorBanDefaultTypeInternal() {}
  union {
    CMsgDOTAChatModeratorBan _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgDOTAChatModeratorBanDefaultTypeInternal _CMsgDOTAChatModeratorBan_default_instance_;
PROTOBUF_CONSTEXPR CMsgDOTAChatMessage_DiceRoll::CMsgDOTAChatMessage_DiceRoll(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.roll_min_)*/0
  , /*decltype(_impl_.roll_max_)*/0
  , /*decltype(_impl_.result_)*/0} {}
struct CMsgDOTAChatMessage_DiceRollDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgDOTAChatMessage_DiceRollDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgDOTAChatMessage_DiceRollDefaultTypeInternal() {}
  union {
    CMsgDOTAChatMessage_DiceRoll _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgDOTAChatMessage_DiceRollDefaultTypeInternal _CMsgDOTAChatMessage_DiceRoll_default_instance_;
PROTOBUF_CONSTEXPR CMsgDOTAChatMessage_TriviaAnswered::CMsgDOTAChatMessage_TriviaAnswered(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.question_id_)*/0u
  , /*decltype(_impl_.answer_index_)*/0u
  , /*decltype(_impl_.party_questions_correct_)*/0u
  , /*decltype(_impl_.party_questions_viewed_)*/0u
  , /*decltype(_impl_.party_trivia_points_)*/0u} {}
struct CMsgDOTAChatMessage_TriviaAnsweredDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgDOTAChatMessage_TriviaAnsweredDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgDOTAChatMessage_TriviaAnsweredDefaultTypeInternal() {}
  union {
    CMsgDOTAChatMessage_TriviaAnswered _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgDOTAChatMessage_TriviaAnsweredDefaultTypeInternal _CMsgDOTAChatMessage_TriviaAnswered_default_instance_;
PROTOBUF_CONSTEXPR CMsgDOTAChatMessage_PlayerDraftPick::CMsgDOTAChatMessage_PlayerDraftPick(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.team_)*/0
  , /*decltype(_impl_.player_id_)*/-1} {}
struct CMsgDOTAChatMessage_PlayerDraftPickDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgDOTAChatMessage_PlayerDraftPickDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgDOTAChatMessage_PlayerDraftPickDefaultTypeInternal() {}
  union {
    CMsgDOTAChatMessage_PlayerDraftPick _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgDOTAChatMessage_PlayerDraftPickDefaultTypeInternal _CMsgDOTAChatMessage_PlayerDraftPick_default_instance_;
PROTOBUF_CONSTEXPR CMsgDOTAChatMessage_ChatWheelMessage::CMsgDOTAChatMessage_ChatWheelMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.emoticon_id_)*/0u
  , /*decltype(_impl_.message_id_)*/4294967295u} {}
struct CMsgDOTAChatMessage_ChatWheelMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgDOTAChatMessage_ChatWheelMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgDOTAChatMessage_ChatWheelMessageDefaultTypeInternal() {}
  union {
    CMsgDOTAChatMessage_ChatWheelMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgDOTAChatMessage_ChatWheelMessageDefaultTypeInternal _CMsgDOTAChatMessage_ChatWheelMessage_default_instance_;
PROTOBUF_CONSTEXPR CMsgDOTAChatMessage::CMsgDOTAChatMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.persona_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.text_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.suggest_invite_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.share_lobby_passkey_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.suggest_pick_hero_role_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.dice_roll_)*/nullptr
  , /*decltype(_impl_.trivia_answer_)*/nullptr
  , /*decltype(_impl_.player_draft_pick_)*/nullptr
  , /*decltype(_impl_.chat_wheel_message_)*/nullptr
  , /*decltype(_impl_.channel_id_)*/uint64_t{0u}
  , /*decltype(_impl_.account_id_)*/0u
  , /*decltype(_impl_.timestamp_)*/0u
  , /*decltype(_impl_.suggest_invite_account_id_)*/0u
  , /*decltype(_impl_.fantasy_draft_owner_account_id_)*/0u
  , /*decltype(_impl_.fantasy_draft_player_account_id_)*/0u
  , /*decltype(_impl_.event_id_)*/0u
  , /*decltype(_impl_.event_points_)*/0u
  , /*decltype(_impl_.share_profile_account_id_)*/0u
  , /*decltype(_impl_.share_party_id_)*/uint64_t{0u}
  , /*decltype(_impl_.share_lobby_id_)*/uint64_t{0u}
  , /*decltype(_impl_.channel_user_id_)*/0u
  , /*decltype(_impl_.suggest_invite_to_lobby_)*/false
  , /*decltype(_impl_.coin_flip_)*/false
  , /*decltype(_impl_.legacy_battle_cup_victory_)*/false
  , /*decltype(_impl_.started_finding_match_)*/false
  , /*decltype(_impl_.share_lobby_custom_game_id_)*/uint64_t{0u}
  , /*decltype(_impl_.private_chat_channel_id_)*/0u
  , /*decltype(_impl_.status_)*/0u
  , /*decltype(_impl_.badge_level_)*/0u
  , /*decltype(_impl_.suggest_pick_hero_id_)*/0u
  , /*decltype(_impl_.battle_cup_streak_)*/0u
  , /*decltype(_impl_.suggest_ban_hero_id_)*/0u
  , /*decltype(_impl_.chat_flags_)*/0u
  , /*decltype(_impl_.ctrl_is_down_)*/false
  , /*decltype(_impl_.favorite_team_id_)*/0u
  , /*decltype(_impl_.favorite_team_quality_)*/0u
  , /*decltype(_impl_.suggest_player_draft_pick_)*/-1
  , /*decltype(_impl_.player_id_)*/-1
  , /*decltype(_impl_.requested_ability_id_)*/-1} {}
struct CMsgDOTAChatMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgDOTAChatMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgDOTAChatMessageDefaultTypeInternal() {}
  union {
    CMsgDOTAChatMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgDOTAChatMessageDefaultTypeInternal _CMsgDOTAChatMessage_default_instance_;
PROTOBUF_CONSTEXPR CMsgDOTAChatMember::CMsgDOTAChatMember(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.persona_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.steam_id_)*/uint64_t{0u}
  , /*decltype(_impl_.channel_user_id_)*/0u
  , /*decltype(_impl_.status_)*/0u} {}
struct CMsgDOTAChatMemberDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgDOTAChatMemberDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgDOTAChatMemberDefaultTypeInternal() {}
  union {
    CMsgDOTAChatMember _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgDOTAChatMemberDefaultTypeInternal _CMsgDOTAChatMember_default_instance_;
PROTOBUF_CONSTEXPR CMsgDOTAJoinChatChannelResponse::CMsgDOTAJoinChatChannelResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.members_)*/{}
  , /*decltype(_impl_.channel_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.welcome_message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.response_)*/0u
  , /*decltype(_impl_.max_members_)*/0u
  , /*decltype(_impl_.channel_id_)*/uint64_t{0u}
  , /*decltype(_impl_.channel_type_)*/0
  , /*decltype(_impl_.result_)*/0
  , /*decltype(_impl_.gc_initiated_join_)*/false
  , /*decltype(_impl_.channel_user_id_)*/0u
  , /*decltype(_impl_.special_privileges_)*/0} {}
struct CMsgDOTAJoinChatChannelResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgDOTAJoinChatChannelResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgDOTAJoinChatChannelResponseDefaultTypeInternal() {}
  union {
    CMsgDOTAJoinChatChannelResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgDOTAJoinChatChannelResponseDefaultTypeInternal _CMsgDOTAJoinChatChannelResponse_default_instance_;
PROTOBUF_CONSTEXPR CMsgDOTAOtherJoinedChatChannel::CMsgDOTAOtherJoinedChatChannel(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.persona_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.channel_id_)*/uint64_t{0u}
  , /*decltype(_impl_.steam_id_)*/uint64_t{0u}
  , /*decltype(_impl_.channel_user_id_)*/0u
  , /*decltype(_impl_.status_)*/0u} {}
struct CMsgDOTAOtherJoinedChatChannelDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgDOTAOtherJoinedChatChannelDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgDOTAOtherJoinedChatChannelDefaultTypeInternal() {}
  union {
    CMsgDOTAOtherJoinedChatChannel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgDOTAOtherJoinedChatChannelDefaultTypeInternal _CMsgDOTAOtherJoinedChatChannel_default_instance_;
PROTOBUF_CONSTEXPR CMsgDOTAOtherLeftChatChannel::CMsgDOTAOtherLeftChatChannel(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.channel_id_)*/uint64_t{0u}
  , /*decltype(_impl_.steam_id_)*/uint64_t{0u}
  , /*decltype(_impl_.channel_user_id_)*/0u} {}
struct CMsgDOTAOtherLeftChatChannelDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgDOTAOtherLeftChatChannelDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgDOTAOtherLeftChatChannelDefaultTypeInternal() {}
  union {
    CMsgDOTAOtherLeftChatChannel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgDOTAOtherLeftChatChannelDefaultTypeInternal _CMsgDOTAOtherLeftChatChannel_default_instance_;
PROTOBUF_CONSTEXPR CMsgDOTARequestChatChannelList::CMsgDOTARequestChatChannelList(
    ::_pbi::ConstantInitialized) {}
struct CMsgDOTARequestChatChannelListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgDOTARequestChatChannelListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgDOTARequestChatChannelListDefaultTypeInternal() {}
  union {
    CMsgDOTARequestChatChannelList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgDOTARequestChatChannelListDefaultTypeInternal _CMsgDOTARequestChatChannelList_default_instance_;
PROTOBUF_CONSTEXPR CMsgDOTARequestChatChannelListResponse_ChatChannel::CMsgDOTARequestChatChannelListResponse_ChatChannel(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.channel_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.num_members_)*/0u
  , /*decltype(_impl_.channel_type_)*/0} {}
struct CMsgDOTARequestChatChannelListResponse_ChatChannelDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgDOTARequestChatChannelListResponse_ChatChannelDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgDOTARequestChatChannelListResponse_ChatChannelDefaultTypeInternal() {}
  union {
    CMsgDOTARequestChatChannelListResponse_ChatChannel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgDOTARequestChatChannelListResponse_ChatChannelDefaultTypeInternal _CMsgDOTARequestChatChannelListResponse_ChatChannel_default_instance_;
PROTOBUF_CONSTEXPR CMsgDOTARequestChatChannelListResponse::CMsgDOTARequestChatChannelListResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.channels_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CMsgDOTARequestChatChannelListResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgDOTARequestChatChannelListResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgDOTARequestChatChannelListResponseDefaultTypeInternal() {}
  union {
    CMsgDOTARequestChatChannelListResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgDOTARequestChatChannelListResponseDefaultTypeInternal _CMsgDOTARequestChatChannelListResponse_default_instance_;
PROTOBUF_CONSTEXPR CMsgDOTAChatGetUserListResponse_Member::CMsgDOTAChatGetUserListResponse_Member(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.persona_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.steam_id_)*/uint64_t{0u}
  , /*decltype(_impl_.channel_user_id_)*/0u
  , /*decltype(_impl_.status_)*/0u} {}
struct CMsgDOTAChatGetUserListResponse_MemberDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgDOTAChatGetUserListResponse_MemberDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgDOTAChatGetUserListResponse_MemberDefaultTypeInternal() {}
  union {
    CMsgDOTAChatGetUserListResponse_Member _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgDOTAChatGetUserListResponse_MemberDefaultTypeInternal _CMsgDOTAChatGetUserListResponse_Member_default_instance_;
PROTOBUF_CONSTEXPR CMsgDOTAChatGetUserListResponse::CMsgDOTAChatGetUserListResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.members_)*/{}
  , /*decltype(_impl_.channel_id_)*/uint64_t{0u}} {}
struct CMsgDOTAChatGetUserListResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgDOTAChatGetUserListResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgDOTAChatGetUserListResponseDefaultTypeInternal() {}
  union {
    CMsgDOTAChatGetUserListResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgDOTAChatGetUserListResponseDefaultTypeInternal _CMsgDOTAChatGetUserListResponse_default_instance_;
PROTOBUF_CONSTEXPR CMsgDOTAChatGetMemberCount::CMsgDOTAChatGetMemberCount(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.channel_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.channel_type_)*/0} {}
struct CMsgDOTAChatGetMemberCountDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgDOTAChatGetMemberCountDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgDOTAChatGetMemberCountDefaultTypeInternal() {}
  union {
    CMsgDOTAChatGetMemberCount _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgDOTAChatGetMemberCountDefaultTypeInternal _CMsgDOTAChatGetMemberCount_default_instance_;
PROTOBUF_CONSTEXPR CMsgDOTAChatGetMemberCountResponse::CMsgDOTAChatGetMemberCountResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.channel_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.channel_type_)*/0
  , /*decltype(_impl_.member_count_)*/0u} {}
struct CMsgDOTAChatGetMemberCountResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgDOTAChatGetMemberCountResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgDOTAChatGetMemberCountResponseDefaultTypeInternal() {}
  union {
    CMsgDOTAChatGetMemberCountResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgDOTAChatGetMemberCountResponseDefaultTypeInternal _CMsgDOTAChatGetMemberCountResponse_default_instance_;
PROTOBUF_CONSTEXPR CMsgDOTAChatRegionsEnabled_Region::CMsgDOTAChatRegionsEnabled_Region(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.min_latitude_)*/0
  , /*decltype(_impl_.max_latitude_)*/0
  , /*decltype(_impl_.min_longitude_)*/0
  , /*decltype(_impl_.max_longitude_)*/0} {}
struct CMsgDOTAChatRegionsEnabled_RegionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgDOTAChatRegionsEnabled_RegionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgDOTAChatRegionsEnabled_RegionDefaultTypeInternal() {}
  union {
    CMsgDOTAChatRegionsEnabled_Region _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgDOTAChatRegionsEnabled_RegionDefaultTypeInternal _CMsgDOTAChatRegionsEnabled_Region_default_instance_;
PROTOBUF_CONSTEXPR CMsgDOTAChatRegionsEnabled::CMsgDOTAChatRegionsEnabled(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.enabled_regions_)*/{}
  , /*decltype(_impl_.enable_all_regions_)*/false} {}
struct CMsgDOTAChatRegionsEnabledDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgDOTAChatRegionsEnabledDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgDOTAChatRegionsEnabledDefaultTypeInternal() {}
  union {
    CMsgDOTAChatRegionsEnabled _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgDOTAChatRegionsEnabledDefaultTypeInternal _CMsgDOTAChatRegionsEnabled_default_instance_;
static ::_pb::Metadata file_level_metadata_dota_5fgcmessages_5fclient_5fchat_2eproto[27];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_dota_5fgcmessages_5fclient_5fchat_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_dota_5fgcmessages_5fclient_5fchat_2eproto = nullptr;

const uint32_t TableStruct_dota_5fgcmessages_5fclient_5fchat_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCPrivateChatInvite, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCPrivateChatInvite, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCPrivateChatInvite, _impl_.private_chat_channel_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCPrivateChatInvite, _impl_.invited_account_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCPrivateChatKick, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCPrivateChatKick, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCPrivateChatKick, _impl_.private_chat_channel_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCPrivateChatKick, _impl_.kick_account_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCPrivateChatPromote, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCPrivateChatPromote, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCPrivateChatPromote, _impl_.private_chat_channel_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCPrivateChatPromote, _impl_.promote_account_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCPrivateChatDemote, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCPrivateChatDemote, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCPrivateChatDemote, _impl_.private_chat_channel_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCPrivateChatDemote, _impl_.demote_account_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientPrivateChatResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientPrivateChatResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientPrivateChatResponse, _impl_.private_chat_channel_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientPrivateChatResponse, _impl_.result_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientPrivateChatResponse, _impl_.username_),
  0,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAJoinChatChannel, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAJoinChatChannel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAJoinChatChannel, _impl_.channel_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAJoinChatChannel, _impl_.channel_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAJoinChatChannel, _impl_.silent_rejection_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeaveChatChannel, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeaveChatChannel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeaveChatChannel, _impl_.channel_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCChatReportPublicSpam, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCChatReportPublicSpam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCChatReportPublicSpam, _impl_.channel_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCChatReportPublicSpam, _impl_.channel_user_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatModeratorBan, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatModeratorBan, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatModeratorBan, _impl_.channel_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatModeratorBan, _impl_.account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatModeratorBan, _impl_.duration_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatMessage_DiceRoll, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatMessage_DiceRoll, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatMessage_DiceRoll, _impl_.roll_min_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatMessage_DiceRoll, _impl_.roll_max_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatMessage_DiceRoll, _impl_.result_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatMessage_TriviaAnswered, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatMessage_TriviaAnswered, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatMessage_TriviaAnswered, _impl_.question_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatMessage_TriviaAnswered, _impl_.answer_index_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatMessage_TriviaAnswered, _impl_.party_questions_correct_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatMessage_TriviaAnswered, _impl_.party_questions_viewed_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatMessage_TriviaAnswered, _impl_.party_trivia_points_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatMessage_PlayerDraftPick, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatMessage_PlayerDraftPick, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatMessage_PlayerDraftPick, _impl_.player_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatMessage_PlayerDraftPick, _impl_.team_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatMessage_ChatWheelMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatMessage_ChatWheelMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatMessage_ChatWheelMessage, _impl_.message_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatMessage_ChatWheelMessage, _impl_.emoticon_id_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatMessage, _impl_.account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatMessage, _impl_.channel_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatMessage, _impl_.persona_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatMessage, _impl_.text_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatMessage, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatMessage, _impl_.suggest_invite_account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatMessage, _impl_.suggest_invite_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatMessage, _impl_.fantasy_draft_owner_account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatMessage, _impl_.fantasy_draft_player_account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatMessage, _impl_.event_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatMessage, _impl_.suggest_invite_to_lobby_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatMessage, _impl_.event_points_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatMessage, _impl_.coin_flip_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatMessage, _impl_.player_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatMessage, _impl_.share_profile_account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatMessage, _impl_.channel_user_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatMessage, _impl_.dice_roll_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatMessage, _impl_.share_party_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatMessage, _impl_.share_lobby_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatMessage, _impl_.share_lobby_custom_game_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatMessage, _impl_.share_lobby_passkey_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatMessage, _impl_.private_chat_channel_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatMessage, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatMessage, _impl_.legacy_battle_cup_victory_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatMessage, _impl_.battle_cup_streak_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatMessage, _impl_.badge_level_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatMessage, _impl_.suggest_pick_hero_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatMessage, _impl_.suggest_pick_hero_role_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatMessage, _impl_.suggest_ban_hero_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatMessage, _impl_.trivia_answer_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatMessage, _impl_.requested_ability_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatMessage, _impl_.chat_flags_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatMessage, _impl_.started_finding_match_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatMessage, _impl_.ctrl_is_down_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatMessage, _impl_.favorite_team_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatMessage, _impl_.favorite_team_quality_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatMessage, _impl_.suggest_player_draft_pick_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatMessage, _impl_.player_draft_pick_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatMessage, _impl_.chat_wheel_message_),
  10,
  9,
  0,
  1,
  11,
  12,
  2,
  13,
  14,
  15,
  21,
  16,
  22,
  37,
  17,
  20,
  5,
  18,
  19,
  25,
  3,
  26,
  27,
  23,
  30,
  28,
  29,
  4,
  31,
  6,
  38,
  32,
  24,
  33,
  34,
  35,
  36,
  7,
  8,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatMember, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatMember, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatMember, _impl_.steam_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatMember, _impl_.persona_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatMember, _impl_.channel_user_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatMember, _impl_.status_),
  1,
  0,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAJoinChatChannelResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAJoinChatChannelResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAJoinChatChannelResponse, _impl_.response_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAJoinChatChannelResponse, _impl_.channel_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAJoinChatChannelResponse, _impl_.channel_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAJoinChatChannelResponse, _impl_.max_members_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAJoinChatChannelResponse, _impl_.members_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAJoinChatChannelResponse, _impl_.channel_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAJoinChatChannelResponse, _impl_.result_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAJoinChatChannelResponse, _impl_.gc_initiated_join_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAJoinChatChannelResponse, _impl_.channel_user_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAJoinChatChannelResponse, _impl_.welcome_message_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAJoinChatChannelResponse, _impl_.special_privileges_),
  2,
  0,
  4,
  3,
  ~0u,
  5,
  6,
  7,
  8,
  1,
  9,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAOtherJoinedChatChannel, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAOtherJoinedChatChannel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAOtherJoinedChatChannel, _impl_.channel_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAOtherJoinedChatChannel, _impl_.persona_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAOtherJoinedChatChannel, _impl_.steam_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAOtherJoinedChatChannel, _impl_.channel_user_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAOtherJoinedChatChannel, _impl_.status_),
  1,
  0,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAOtherLeftChatChannel, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAOtherLeftChatChannel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAOtherLeftChatChannel, _impl_.channel_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAOtherLeftChatChannel, _impl_.steam_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAOtherLeftChatChannel, _impl_.channel_user_id_),
  0,
  1,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARequestChatChannelList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARequestChatChannelListResponse_ChatChannel, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARequestChatChannelListResponse_ChatChannel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARequestChatChannelListResponse_ChatChannel, _impl_.channel_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARequestChatChannelListResponse_ChatChannel, _impl_.num_members_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARequestChatChannelListResponse_ChatChannel, _impl_.channel_type_),
  0,
  1,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARequestChatChannelListResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARequestChatChannelListResponse, _impl_.channels_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatGetUserListResponse_Member, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatGetUserListResponse_Member, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatGetUserListResponse_Member, _impl_.steam_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatGetUserListResponse_Member, _impl_.persona_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatGetUserListResponse_Member, _impl_.channel_user_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatGetUserListResponse_Member, _impl_.status_),
  1,
  0,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatGetUserListResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatGetUserListResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatGetUserListResponse, _impl_.channel_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatGetUserListResponse, _impl_.members_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatGetMemberCount, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatGetMemberCount, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatGetMemberCount, _impl_.channel_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatGetMemberCount, _impl_.channel_type_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatGetMemberCountResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatGetMemberCountResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatGetMemberCountResponse, _impl_.channel_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatGetMemberCountResponse, _impl_.channel_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatGetMemberCountResponse, _impl_.member_count_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatRegionsEnabled_Region, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatRegionsEnabled_Region, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatRegionsEnabled_Region, _impl_.min_latitude_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatRegionsEnabled_Region, _impl_.max_latitude_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatRegionsEnabled_Region, _impl_.min_longitude_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatRegionsEnabled_Region, _impl_.max_longitude_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatRegionsEnabled, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatRegionsEnabled, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatRegionsEnabled, _impl_.enable_all_regions_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatRegionsEnabled, _impl_.enabled_regions_),
  0,
  ~0u,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::CMsgClientToGCPrivateChatInvite)},
  { 10, 18, -1, sizeof(::CMsgClientToGCPrivateChatKick)},
  { 20, 28, -1, sizeof(::CMsgClientToGCPrivateChatPromote)},
  { 30, 38, -1, sizeof(::CMsgClientToGCPrivateChatDemote)},
  { 40, 49, -1, sizeof(::CMsgGCToClientPrivateChatResponse)},
  { 52, 61, -1, sizeof(::CMsgDOTAJoinChatChannel)},
  { 64, 71, -1, sizeof(::CMsgDOTALeaveChatChannel)},
  { 72, 80, -1, sizeof(::CMsgGCChatReportPublicSpam)},
  { 82, 91, -1, sizeof(::CMsgDOTAChatModeratorBan)},
  { 94, 103, -1, sizeof(::CMsgDOTAChatMessage_DiceRoll)},
  { 106, 117, -1, sizeof(::CMsgDOTAChatMessage_TriviaAnswered)},
  { 122, 130, -1, sizeof(::CMsgDOTAChatMessage_PlayerDraftPick)},
  { 132, 140, -1, sizeof(::CMsgDOTAChatMessage_ChatWheelMessage)},
  { 142, 187, -1, sizeof(::CMsgDOTAChatMessage)},
  { 226, 236, -1, sizeof(::CMsgDOTAChatMember)},
  { 240, 257, -1, sizeof(::CMsgDOTAJoinChatChannelResponse)},
  { 268, 279, -1, sizeof(::CMsgDOTAOtherJoinedChatChannel)},
  { 284, 293, -1, sizeof(::CMsgDOTAOtherLeftChatChannel)},
  { 296, -1, -1, sizeof(::CMsgDOTARequestChatChannelList)},
  { 302, 311, -1, sizeof(::CMsgDOTARequestChatChannelListResponse_ChatChannel)},
  { 314, -1, -1, sizeof(::CMsgDOTARequestChatChannelListResponse)},
  { 321, 331, -1, sizeof(::CMsgDOTAChatGetUserListResponse_Member)},
  { 335, 343, -1, sizeof(::CMsgDOTAChatGetUserListResponse)},
  { 345, 353, -1, sizeof(::CMsgDOTAChatGetMemberCount)},
  { 355, 364, -1, sizeof(::CMsgDOTAChatGetMemberCountResponse)},
  { 367, 377, -1, sizeof(::CMsgDOTAChatRegionsEnabled_Region)},
  { 381, 389, -1, sizeof(::CMsgDOTAChatRegionsEnabled)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_CMsgClientToGCPrivateChatInvite_default_instance_._instance,
  &::_CMsgClientToGCPrivateChatKick_default_instance_._instance,
  &::_CMsgClientToGCPrivateChatPromote_default_instance_._instance,
  &::_CMsgClientToGCPrivateChatDemote_default_instance_._instance,
  &::_CMsgGCToClientPrivateChatResponse_default_instance_._instance,
  &::_CMsgDOTAJoinChatChannel_default_instance_._instance,
  &::_CMsgDOTALeaveChatChannel_default_instance_._instance,
  &::_CMsgGCChatReportPublicSpam_default_instance_._instance,
  &::_CMsgDOTAChatModeratorBan_default_instance_._instance,
  &::_CMsgDOTAChatMessage_DiceRoll_default_instance_._instance,
  &::_CMsgDOTAChatMessage_TriviaAnswered_default_instance_._instance,
  &::_CMsgDOTAChatMessage_PlayerDraftPick_default_instance_._instance,
  &::_CMsgDOTAChatMessage_ChatWheelMessage_default_instance_._instance,
  &::_CMsgDOTAChatMessage_default_instance_._instance,
  &::_CMsgDOTAChatMember_default_instance_._instance,
  &::_CMsgDOTAJoinChatChannelResponse_default_instance_._instance,
  &::_CMsgDOTAOtherJoinedChatChannel_default_instance_._instance,
  &::_CMsgDOTAOtherLeftChatChannel_default_instance_._instance,
  &::_CMsgDOTARequestChatChannelList_default_instance_._instance,
  &::_CMsgDOTARequestChatChannelListResponse_ChatChannel_default_instance_._instance,
  &::_CMsgDOTARequestChatChannelListResponse_default_instance_._instance,
  &::_CMsgDOTAChatGetUserListResponse_Member_default_instance_._instance,
  &::_CMsgDOTAChatGetUserListResponse_default_instance_._instance,
  &::_CMsgDOTAChatGetMemberCount_default_instance_._instance,
  &::_CMsgDOTAChatGetMemberCountResponse_default_instance_._instance,
  &::_CMsgDOTAChatRegionsEnabled_Region_default_instance_._instance,
  &::_CMsgDOTAChatRegionsEnabled_default_instance_._instance,
};

const char descriptor_table_protodef_dota_5fgcmessages_5fclient_5fchat_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n!dota_gcmessages_client_chat.proto\032\027dot"
  "a_shared_enums.proto\"`\n\037CMsgClientToGCPr"
  "ivateChatInvite\022!\n\031private_chat_channel_"
  "name\030\001 \001(\t\022\032\n\022invited_account_id\030\002 \001(\r\"["
  "\n\035CMsgClientToGCPrivateChatKick\022!\n\031priva"
  "te_chat_channel_name\030\001 \001(\t\022\027\n\017kick_accou"
  "nt_id\030\002 \001(\r\"a\n CMsgClientToGCPrivateChat"
  "Promote\022!\n\031private_chat_channel_name\030\001 \001"
  "(\t\022\032\n\022promote_account_id\030\002 \001(\r\"_\n\037CMsgCl"
  "ientToGCPrivateChatDemote\022!\n\031private_cha"
  "t_channel_name\030\001 \001(\t\022\031\n\021demote_account_i"
  "d\030\002 \001(\r\"\275\004\n!CMsgGCToClientPrivateChatRes"
  "ponse\022!\n\031private_chat_channel_name\030\001 \001(\t"
  "\022B\n\006result\030\002 \001(\0162).CMsgGCToClientPrivate"
  "ChatResponse.Result:\007SUCCESS\022\020\n\010username"
  "\030\003 \001(\t\"\236\003\n\006Result\022\013\n\007SUCCESS\020\000\022\031\n\025FAILUR"
  "E_CREATION_LOCK\020\001\022\033\n\027FAILURE_SQL_TRANSAC"
  "TION\020\002\022\024\n\020FAILURE_SDO_LOAD\020\003\022\031\n\025FAILURE_"
  "NO_PERMISSION\020\004\022\032\n\026FAILURE_ALREADY_MEMBE"
  "R\020\005\022\030\n\024FAILURE_NOT_A_MEMBER\020\007\022\037\n\033FAILURE"
  "_NO_REMAINING_ADMINS\020\010\022\023\n\017FAILURE_NO_ROO"
  "M\020\t\022!\n\035FAILURE_CREATION_RATE_LIMITED\020\n\022 "
  "\n\034FAILURE_UNKNOWN_CHANNEL_NAME\020\013\022\030\n\024FAIL"
  "URE_UNKNOWN_USER\020\014\022\031\n\025FAILURE_UNKNOWN_ER"
  "ROR\020\r\022\035\n\031FAILURE_CANNOT_KICK_ADMIN\020\016\022\031\n\025"
  "FAILURE_ALREADY_ADMIN\020\017\"\221\001\n\027CMsgDOTAJoin"
  "ChatChannel\022\024\n\014channel_name\030\002 \001(\t\022F\n\014cha"
  "nnel_type\030\004 \001(\0162\026.DOTAChatChannelType_t:"
  "\030DOTAChannelType_Regional\022\030\n\020silent_reje"
  "ction\030\005 \001(\010\".\n\030CMsgDOTALeaveChatChannel\022"
  "\022\n\nchannel_id\030\001 \001(\004\"I\n\032CMsgGCChatReportP"
  "ublicSpam\022\022\n\nchannel_id\030\001 \001(\004\022\027\n\017channel"
  "_user_id\030\002 \001(\r\"T\n\030CMsgDOTAChatModeratorB"
  "an\022\022\n\nchannel_id\030\001 \001(\004\022\022\n\naccount_id\030\002 \001"
  "(\r\022\020\n\010duration\030\003 \001(\r\"\235\014\n\023CMsgDOTAChatMes"
  "sage\022\022\n\naccount_id\030\001 \001(\r\022\022\n\nchannel_id\030\002"
  " \001(\004\022\024\n\014persona_name\030\003 \001(\t\022\014\n\004text\030\004 \001(\t"
  "\022\021\n\ttimestamp\030\005 \001(\r\022!\n\031suggest_invite_ac"
  "count_id\030\006 \001(\r\022\033\n\023suggest_invite_name\030\007 "
  "\001(\t\022&\n\036fantasy_draft_owner_account_id\030\010 "
  "\001(\r\022\'\n\037fantasy_draft_player_account_id\030\t"
  " \001(\r\022\020\n\010event_id\030\n \001(\r\022\037\n\027suggest_invite"
  "_to_lobby\030\013 \001(\010\022\024\n\014event_points\030\014 \001(\r\022\021\n"
  "\tcoin_flip\030\r \001(\010\022\025\n\tplayer_id\030\016 \001(\005:\002-1\022"
  " \n\030share_profile_account_id\030\017 \001(\r\022\027\n\017cha"
  "nnel_user_id\030\020 \001(\r\0220\n\tdice_roll\030\021 \001(\0132\035."
  "CMsgDOTAChatMessage.DiceRoll\022\026\n\016share_pa"
  "rty_id\030\022 \001(\004\022\026\n\016share_lobby_id\030\023 \001(\004\022\"\n\032"
  "share_lobby_custom_game_id\030\024 \001(\004\022\033\n\023shar"
  "e_lobby_passkey\030\025 \001(\t\022\037\n\027private_chat_ch"
  "annel_id\030\026 \001(\r\022\016\n\006status\030\027 \001(\r\022!\n\031legacy"
  "_battle_cup_victory\030\030 \001(\010\022\031\n\021battle_cup_"
  "streak\030\035 \001(\r\022\023\n\013badge_level\030\031 \001(\r\022\034\n\024sug"
  "gest_pick_hero_id\030\032 \001(\r\022\036\n\026suggest_pick_"
  "hero_role\030\033 \001(\t\022\033\n\023suggest_ban_hero_id\030\036"
  " \001(\r\022:\n\rtrivia_answer\030  \001(\0132#.CMsgDOTACh"
  "atMessage.TriviaAnswered\022 \n\024requested_ab"
  "ility_id\030! \001(\005:\002-1\022\022\n\nchat_flags\030\" \001(\r\022\035"
  "\n\025started_finding_match\030# \001(\010\022\024\n\014ctrl_is"
  "_down\030$ \001(\010\022\030\n\020favorite_team_id\030% \001(\r\022\035\n"
  "\025favorite_team_quality\030& \001(\r\022%\n\031suggest_"
  "player_draft_pick\030\' \001(\005:\002-1\022\?\n\021player_dr"
  "aft_pick\030( \001(\0132$.CMsgDOTAChatMessage.Pla"
  "yerDraftPick\022A\n\022chat_wheel_message\030) \001(\013"
  "2%.CMsgDOTAChatMessage.ChatWheelMessage\032"
  ">\n\010DiceRoll\022\020\n\010roll_min\030\001 \001(\005\022\020\n\010roll_ma"
  "x\030\002 \001(\005\022\016\n\006result\030\003 \001(\005\032\231\001\n\016TriviaAnswer"
  "ed\022\023\n\013question_id\030\001 \001(\r\022\024\n\014answer_index\030"
  "\002 \001(\r\022\037\n\027party_questions_correct\030\003 \001(\r\022\036"
  "\n\026party_questions_viewed\030\004 \001(\r\022\033\n\023party_"
  "trivia_points\030\005 \001(\r\0326\n\017PlayerDraftPick\022\025"
  "\n\tplayer_id\030\001 \001(\005:\002-1\022\014\n\004team\030\002 \001(\005\032G\n\020C"
  "hatWheelMessage\022\036\n\nmessage_id\030\001 \001(\r:\n429"
  "4967295\022\023\n\013emoticon_id\030\002 \001(\r\"e\n\022CMsgDOTA"
  "ChatMember\022\020\n\010steam_id\030\001 \001(\006\022\024\n\014persona_"
  "name\030\002 \001(\t\022\027\n\017channel_user_id\030\003 \001(\r\022\016\n\006s"
  "tatus\030\004 \001(\r\"\312\007\n\037CMsgDOTAJoinChatChannelR"
  "esponse\022\020\n\010response\030\001 \001(\r\022\024\n\014channel_nam"
  "e\030\002 \001(\t\022\022\n\nchannel_id\030\003 \001(\006\022\023\n\013max_membe"
  "rs\030\004 \001(\r\022$\n\007members\030\005 \003(\0132\023.CMsgDOTAChat"
  "Member\022F\n\014channel_type\030\006 \001(\0162\026.DOTAChatC"
  "hannelType_t:\030DOTAChannelType_Regional\022E"
  "\n\006result\030\007 \001(\0162\'.CMsgDOTAJoinChatChannel"
  "Response.Result:\014JOIN_SUCCESS\022\031\n\021gc_init"
  "iated_join\030\010 \001(\010\022\027\n\017channel_user_id\030\t \001("
  "\r\022\027\n\017welcome_message\030\n \001(\t\022R\n\022special_pr"
  "ivileges\030\013 \001(\0162\027.EChatSpecialPrivileges:"
  "\035k_EChatSpecialPrivileges_None\"\377\003\n\006Resul"
  "t\022\020\n\014JOIN_SUCCESS\020\000\022\030\n\024INVALID_CHANNEL_T"
  "YPE\020\001\022\025\n\021ACCOUNT_NOT_FOUND\020\002\022\016\n\nACH_FAIL"
  "ED\020\003\022\035\n\031USER_IN_TOO_MANY_CHANNELS\020\004\022\027\n\023R"
  "ATE_LIMIT_EXCEEDED\020\005\022\020\n\014CHANNEL_FULL\020\006\022\033"
  "\n\027CHANNEL_FULL_OVERFLOWED\020\007\022\026\n\022FAILED_TO"
  "_ADD_USER\020\010\022\031\n\025CHANNEL_TYPE_DISABLED\020\t\022\036"
  "\n\032PRIVATE_CHAT_CREATE_FAILED\020\n\022\036\n\032PRIVAT"
  "E_CHAT_NO_PERMISSION\020\013\022#\n\037PRIVATE_CHAT_C"
  "REATE_LOCK_FAILED\020\014\022\027\n\023PRIVATE_CHAT_KICK"
  "ED\020\r\022\024\n\020USER_NOT_ALLOWED\020\016\022$\n ENSURE_SPE"
  "CIAL_PRIVILEGES_FAILED\020\017\022 \n\034NEW_PLAYER_U"
  "SER_NOT_ELIGIBLE\020\020\022\020\n\014SILENT_ERROR\020\021\022\032\n\026"
  "NEW_PLAYER_USER_BANNED\020\022\"\205\001\n\036CMsgDOTAOth"
  "erJoinedChatChannel\022\022\n\nchannel_id\030\001 \001(\006\022"
  "\024\n\014persona_name\030\002 \001(\t\022\020\n\010steam_id\030\003 \001(\006\022"
  "\027\n\017channel_user_id\030\004 \001(\r\022\016\n\006status\030\005 \001(\r"
  "\"]\n\034CMsgDOTAOtherLeftChatChannel\022\022\n\nchan"
  "nel_id\030\001 \001(\006\022\020\n\010steam_id\030\002 \001(\006\022\027\n\017channe"
  "l_user_id\030\003 \001(\r\" \n\036CMsgDOTARequestChatCh"
  "annelList\"\362\001\n&CMsgDOTARequestChatChannel"
  "ListResponse\022E\n\010channels\030\001 \003(\01323.CMsgDOT"
  "ARequestChatChannelListResponse.ChatChan"
  "nel\032\200\001\n\013ChatChannel\022\024\n\014channel_name\030\001 \001("
  "\t\022\023\n\013num_members\030\002 \001(\r\022F\n\014channel_type\030\003"
  " \001(\0162\026.DOTAChatChannelType_t:\030DOTAChanne"
  "lType_Regional\"\312\001\n\037CMsgDOTAChatGetUserLi"
  "stResponse\022\022\n\nchannel_id\030\001 \001(\006\0228\n\007member"
  "s\030\002 \003(\0132\'.CMsgDOTAChatGetUserListRespons"
  "e.Member\032Y\n\006Member\022\020\n\010steam_id\030\001 \001(\006\022\024\n\014"
  "persona_name\030\002 \001(\t\022\027\n\017channel_user_id\030\003 "
  "\001(\r\022\016\n\006status\030\004 \001(\r\"z\n\032CMsgDOTAChatGetMe"
  "mberCount\022\024\n\014channel_name\030\001 \001(\t\022F\n\014chann"
  "el_type\030\002 \001(\0162\026.DOTAChatChannelType_t:\030D"
  "OTAChannelType_Regional\"\230\001\n\"CMsgDOTAChat"
  "GetMemberCountResponse\022\024\n\014channel_name\030\001"
  " \001(\t\022F\n\014channel_type\030\002 \001(\0162\026.DOTAChatCha"
  "nnelType_t:\030DOTAChannelType_Regional\022\024\n\014"
  "member_count\030\003 \001(\r\"\331\001\n\032CMsgDOTAChatRegio"
  "nsEnabled\022\032\n\022enable_all_regions\030\001 \001(\010\022;\n"
  "\017enabled_regions\030\002 \003(\0132\".CMsgDOTAChatReg"
  "ionsEnabled.Region\032b\n\006Region\022\024\n\014min_lati"
  "tude\030\001 \001(\002\022\024\n\014max_latitude\030\002 \001(\002\022\025\n\rmin_"
  "longitude\030\003 \001(\002\022\025\n\rmax_longitude\030\004 \001(\002"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_dota_5fgcmessages_5fclient_5fchat_2eproto_deps[1] = {
  &::descriptor_table_dota_5fshared_5fenums_2eproto,
};
static ::_pbi::once_flag descriptor_table_dota_5fgcmessages_5fclient_5fchat_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_dota_5fgcmessages_5fclient_5fchat_2eproto = {
    false, false, 5238, descriptor_table_protodef_dota_5fgcmessages_5fclient_5fchat_2eproto,
    "dota_gcmessages_client_chat.proto",
    &descriptor_table_dota_5fgcmessages_5fclient_5fchat_2eproto_once, descriptor_table_dota_5fgcmessages_5fclient_5fchat_2eproto_deps, 1, 27,
    schemas, file_default_instances, TableStruct_dota_5fgcmessages_5fclient_5fchat_2eproto::offsets,
    file_level_metadata_dota_5fgcmessages_5fclient_5fchat_2eproto, file_level_enum_descriptors_dota_5fgcmessages_5fclient_5fchat_2eproto,
    file_level_service_descriptors_dota_5fgcmessages_5fclient_5fchat_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_dota_5fgcmessages_5fclient_5fchat_2eproto_getter() {
  return &descriptor_table_dota_5fgcmessages_5fclient_5fchat_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_dota_5fgcmessages_5fclient_5fchat_2eproto(&descriptor_table_dota_5fgcmessages_5fclient_5fchat_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgGCToClientPrivateChatResponse_Result_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fclient_5fchat_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fclient_5fchat_2eproto[0];
}
bool CMsgGCToClientPrivateChatResponse_Result_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CMsgGCToClientPrivateChatResponse_Result CMsgGCToClientPrivateChatResponse::SUCCESS;
constexpr CMsgGCToClientPrivateChatResponse_Result CMsgGCToClientPrivateChatResponse::FAILURE_CREATION_LOCK;
constexpr CMsgGCToClientPrivateChatResponse_Result CMsgGCToClientPrivateChatResponse::FAILURE_SQL_TRANSACTION;
constexpr CMsgGCToClientPrivateChatResponse_Result CMsgGCToClientPrivateChatResponse::FAILURE_SDO_LOAD;
constexpr CMsgGCToClientPrivateChatResponse_Result CMsgGCToClientPrivateChatResponse::FAILURE_NO_PERMISSION;
constexpr CMsgGCToClientPrivateChatResponse_Result CMsgGCToClientPrivateChatResponse::FAILURE_ALREADY_MEMBER;
constexpr CMsgGCToClientPrivateChatResponse_Result CMsgGCToClientPrivateChatResponse::FAILURE_NOT_A_MEMBER;
constexpr CMsgGCToClientPrivateChatResponse_Result CMsgGCToClientPrivateChatResponse::FAILURE_NO_REMAINING_ADMINS;
constexpr CMsgGCToClientPrivateChatResponse_Result CMsgGCToClientPrivateChatResponse::FAILURE_NO_ROOM;
constexpr CMsgGCToClientPrivateChatResponse_Result CMsgGCToClientPrivateChatResponse::FAILURE_CREATION_RATE_LIMITED;
constexpr CMsgGCToClientPrivateChatResponse_Result CMsgGCToClientPrivateChatResponse::FAILURE_UNKNOWN_CHANNEL_NAME;
constexpr CMsgGCToClientPrivateChatResponse_Result CMsgGCToClientPrivateChatResponse::FAILURE_UNKNOWN_USER;
constexpr CMsgGCToClientPrivateChatResponse_Result CMsgGCToClientPrivateChatResponse::FAILURE_UNKNOWN_ERROR;
constexpr CMsgGCToClientPrivateChatResponse_Result CMsgGCToClientPrivateChatResponse::FAILURE_CANNOT_KICK_ADMIN;
constexpr CMsgGCToClientPrivateChatResponse_Result CMsgGCToClientPrivateChatResponse::FAILURE_ALREADY_ADMIN;
constexpr CMsgGCToClientPrivateChatResponse_Result CMsgGCToClientPrivateChatResponse::Result_MIN;
constexpr CMsgGCToClientPrivateChatResponse_Result CMsgGCToClientPrivateChatResponse::Result_MAX;
constexpr int CMsgGCToClientPrivateChatResponse::Result_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgDOTAJoinChatChannelResponse_Result_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fclient_5fchat_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fclient_5fchat_2eproto[1];
}
bool CMsgDOTAJoinChatChannelResponse_Result_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CMsgDOTAJoinChatChannelResponse_Result CMsgDOTAJoinChatChannelResponse::JOIN_SUCCESS;
constexpr CMsgDOTAJoinChatChannelResponse_Result CMsgDOTAJoinChatChannelResponse::INVALID_CHANNEL_TYPE;
constexpr CMsgDOTAJoinChatChannelResponse_Result CMsgDOTAJoinChatChannelResponse::ACCOUNT_NOT_FOUND;
constexpr CMsgDOTAJoinChatChannelResponse_Result CMsgDOTAJoinChatChannelResponse::ACH_FAILED;
constexpr CMsgDOTAJoinChatChannelResponse_Result CMsgDOTAJoinChatChannelResponse::USER_IN_TOO_MANY_CHANNELS;
constexpr CMsgDOTAJoinChatChannelResponse_Result CMsgDOTAJoinChatChannelResponse::RATE_LIMIT_EXCEEDED;
constexpr CMsgDOTAJoinChatChannelResponse_Result CMsgDOTAJoinChatChannelResponse::CHANNEL_FULL;
constexpr CMsgDOTAJoinChatChannelResponse_Result CMsgDOTAJoinChatChannelResponse::CHANNEL_FULL_OVERFLOWED;
constexpr CMsgDOTAJoinChatChannelResponse_Result CMsgDOTAJoinChatChannelResponse::FAILED_TO_ADD_USER;
constexpr CMsgDOTAJoinChatChannelResponse_Result CMsgDOTAJoinChatChannelResponse::CHANNEL_TYPE_DISABLED;
constexpr CMsgDOTAJoinChatChannelResponse_Result CMsgDOTAJoinChatChannelResponse::PRIVATE_CHAT_CREATE_FAILED;
constexpr CMsgDOTAJoinChatChannelResponse_Result CMsgDOTAJoinChatChannelResponse::PRIVATE_CHAT_NO_PERMISSION;
constexpr CMsgDOTAJoinChatChannelResponse_Result CMsgDOTAJoinChatChannelResponse::PRIVATE_CHAT_CREATE_LOCK_FAILED;
constexpr CMsgDOTAJoinChatChannelResponse_Result CMsgDOTAJoinChatChannelResponse::PRIVATE_CHAT_KICKED;
constexpr CMsgDOTAJoinChatChannelResponse_Result CMsgDOTAJoinChatChannelResponse::USER_NOT_ALLOWED;
constexpr CMsgDOTAJoinChatChannelResponse_Result CMsgDOTAJoinChatChannelResponse::ENSURE_SPECIAL_PRIVILEGES_FAILED;
constexpr CMsgDOTAJoinChatChannelResponse_Result CMsgDOTAJoinChatChannelResponse::NEW_PLAYER_USER_NOT_ELIGIBLE;
constexpr CMsgDOTAJoinChatChannelResponse_Result CMsgDOTAJoinChatChannelResponse::SILENT_ERROR;
constexpr CMsgDOTAJoinChatChannelResponse_Result CMsgDOTAJoinChatChannelResponse::NEW_PLAYER_USER_BANNED;
constexpr CMsgDOTAJoinChatChannelResponse_Result CMsgDOTAJoinChatChannelResponse::Result_MIN;
constexpr CMsgDOTAJoinChatChannelResponse_Result CMsgDOTAJoinChatChannelResponse::Result_MAX;
constexpr int CMsgDOTAJoinChatChannelResponse::Result_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class CMsgClientToGCPrivateChatInvite::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCPrivateChatInvite>()._impl_._has_bits_);
  static void set_has_private_chat_channel_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_invited_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgClientToGCPrivateChatInvite::CMsgClientToGCPrivateChatInvite(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCPrivateChatInvite)
}
CMsgClientToGCPrivateChatInvite::CMsgClientToGCPrivateChatInvite(const CMsgClientToGCPrivateChatInvite& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgClientToGCPrivateChatInvite* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.private_chat_channel_name_){}
    , decltype(_impl_.invited_account_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.private_chat_channel_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.private_chat_channel_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_private_chat_channel_name()) {
    _this->_impl_.private_chat_channel_name_.Set(from._internal_private_chat_channel_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.invited_account_id_ = from._impl_.invited_account_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCPrivateChatInvite)
}

inline void CMsgClientToGCPrivateChatInvite::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.private_chat_channel_name_){}
    , decltype(_impl_.invited_account_id_){0u}
  };
  _impl_.private_chat_channel_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.private_chat_channel_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgClientToGCPrivateChatInvite::~CMsgClientToGCPrivateChatInvite() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCPrivateChatInvite)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgClientToGCPrivateChatInvite::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.private_chat_channel_name_.Destroy();
}

void CMsgClientToGCPrivateChatInvite::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgClientToGCPrivateChatInvite::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCPrivateChatInvite)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.private_chat_channel_name_.ClearNonDefaultToEmpty();
  }
  _impl_.invited_account_id_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCPrivateChatInvite::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string private_chat_channel_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_private_chat_channel_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgClientToGCPrivateChatInvite.private_chat_channel_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 invited_account_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_invited_account_id(&has_bits);
          _impl_.invited_account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientToGCPrivateChatInvite::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCPrivateChatInvite)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string private_chat_channel_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_private_chat_channel_name().data(), static_cast<int>(this->_internal_private_chat_channel_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientToGCPrivateChatInvite.private_chat_channel_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_private_chat_channel_name(), target);
  }

  // optional uint32 invited_account_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_invited_account_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCPrivateChatInvite)
  return target;
}

size_t CMsgClientToGCPrivateChatInvite::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCPrivateChatInvite)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string private_chat_channel_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_private_chat_channel_name());
    }

    // optional uint32 invited_account_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_invited_account_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientToGCPrivateChatInvite::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgClientToGCPrivateChatInvite::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientToGCPrivateChatInvite::GetClassData() const { return &_class_data_; }


void CMsgClientToGCPrivateChatInvite::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgClientToGCPrivateChatInvite*>(&to_msg);
  auto& from = static_cast<const CMsgClientToGCPrivateChatInvite&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCPrivateChatInvite)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_private_chat_channel_name(from._internal_private_chat_channel_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.invited_account_id_ = from._impl_.invited_account_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientToGCPrivateChatInvite::CopyFrom(const CMsgClientToGCPrivateChatInvite& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCPrivateChatInvite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCPrivateChatInvite::IsInitialized() const {
  return true;
}

void CMsgClientToGCPrivateChatInvite::InternalSwap(CMsgClientToGCPrivateChatInvite* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.private_chat_channel_name_, lhs_arena,
      &other->_impl_.private_chat_channel_name_, rhs_arena
  );
  swap(_impl_.invited_account_id_, other->_impl_.invited_account_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCPrivateChatInvite::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fchat_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fchat_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fchat_2eproto[0]);
}

// ===================================================================

class CMsgClientToGCPrivateChatKick::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCPrivateChatKick>()._impl_._has_bits_);
  static void set_has_private_chat_channel_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_kick_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgClientToGCPrivateChatKick::CMsgClientToGCPrivateChatKick(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCPrivateChatKick)
}
CMsgClientToGCPrivateChatKick::CMsgClientToGCPrivateChatKick(const CMsgClientToGCPrivateChatKick& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgClientToGCPrivateChatKick* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.private_chat_channel_name_){}
    , decltype(_impl_.kick_account_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.private_chat_channel_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.private_chat_channel_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_private_chat_channel_name()) {
    _this->_impl_.private_chat_channel_name_.Set(from._internal_private_chat_channel_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.kick_account_id_ = from._impl_.kick_account_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCPrivateChatKick)
}

inline void CMsgClientToGCPrivateChatKick::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.private_chat_channel_name_){}
    , decltype(_impl_.kick_account_id_){0u}
  };
  _impl_.private_chat_channel_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.private_chat_channel_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgClientToGCPrivateChatKick::~CMsgClientToGCPrivateChatKick() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCPrivateChatKick)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgClientToGCPrivateChatKick::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.private_chat_channel_name_.Destroy();
}

void CMsgClientToGCPrivateChatKick::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgClientToGCPrivateChatKick::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCPrivateChatKick)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.private_chat_channel_name_.ClearNonDefaultToEmpty();
  }
  _impl_.kick_account_id_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCPrivateChatKick::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string private_chat_channel_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_private_chat_channel_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgClientToGCPrivateChatKick.private_chat_channel_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 kick_account_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_kick_account_id(&has_bits);
          _impl_.kick_account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientToGCPrivateChatKick::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCPrivateChatKick)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string private_chat_channel_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_private_chat_channel_name().data(), static_cast<int>(this->_internal_private_chat_channel_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientToGCPrivateChatKick.private_chat_channel_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_private_chat_channel_name(), target);
  }

  // optional uint32 kick_account_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_kick_account_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCPrivateChatKick)
  return target;
}

size_t CMsgClientToGCPrivateChatKick::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCPrivateChatKick)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string private_chat_channel_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_private_chat_channel_name());
    }

    // optional uint32 kick_account_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_kick_account_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientToGCPrivateChatKick::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgClientToGCPrivateChatKick::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientToGCPrivateChatKick::GetClassData() const { return &_class_data_; }


void CMsgClientToGCPrivateChatKick::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgClientToGCPrivateChatKick*>(&to_msg);
  auto& from = static_cast<const CMsgClientToGCPrivateChatKick&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCPrivateChatKick)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_private_chat_channel_name(from._internal_private_chat_channel_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.kick_account_id_ = from._impl_.kick_account_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientToGCPrivateChatKick::CopyFrom(const CMsgClientToGCPrivateChatKick& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCPrivateChatKick)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCPrivateChatKick::IsInitialized() const {
  return true;
}

void CMsgClientToGCPrivateChatKick::InternalSwap(CMsgClientToGCPrivateChatKick* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.private_chat_channel_name_, lhs_arena,
      &other->_impl_.private_chat_channel_name_, rhs_arena
  );
  swap(_impl_.kick_account_id_, other->_impl_.kick_account_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCPrivateChatKick::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fchat_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fchat_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fchat_2eproto[1]);
}

// ===================================================================

class CMsgClientToGCPrivateChatPromote::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCPrivateChatPromote>()._impl_._has_bits_);
  static void set_has_private_chat_channel_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_promote_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgClientToGCPrivateChatPromote::CMsgClientToGCPrivateChatPromote(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCPrivateChatPromote)
}
CMsgClientToGCPrivateChatPromote::CMsgClientToGCPrivateChatPromote(const CMsgClientToGCPrivateChatPromote& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgClientToGCPrivateChatPromote* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.private_chat_channel_name_){}
    , decltype(_impl_.promote_account_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.private_chat_channel_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.private_chat_channel_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_private_chat_channel_name()) {
    _this->_impl_.private_chat_channel_name_.Set(from._internal_private_chat_channel_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.promote_account_id_ = from._impl_.promote_account_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCPrivateChatPromote)
}

inline void CMsgClientToGCPrivateChatPromote::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.private_chat_channel_name_){}
    , decltype(_impl_.promote_account_id_){0u}
  };
  _impl_.private_chat_channel_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.private_chat_channel_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgClientToGCPrivateChatPromote::~CMsgClientToGCPrivateChatPromote() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCPrivateChatPromote)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgClientToGCPrivateChatPromote::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.private_chat_channel_name_.Destroy();
}

void CMsgClientToGCPrivateChatPromote::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgClientToGCPrivateChatPromote::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCPrivateChatPromote)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.private_chat_channel_name_.ClearNonDefaultToEmpty();
  }
  _impl_.promote_account_id_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCPrivateChatPromote::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string private_chat_channel_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_private_chat_channel_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgClientToGCPrivateChatPromote.private_chat_channel_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 promote_account_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_promote_account_id(&has_bits);
          _impl_.promote_account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientToGCPrivateChatPromote::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCPrivateChatPromote)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string private_chat_channel_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_private_chat_channel_name().data(), static_cast<int>(this->_internal_private_chat_channel_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientToGCPrivateChatPromote.private_chat_channel_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_private_chat_channel_name(), target);
  }

  // optional uint32 promote_account_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_promote_account_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCPrivateChatPromote)
  return target;
}

size_t CMsgClientToGCPrivateChatPromote::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCPrivateChatPromote)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string private_chat_channel_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_private_chat_channel_name());
    }

    // optional uint32 promote_account_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_promote_account_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientToGCPrivateChatPromote::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgClientToGCPrivateChatPromote::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientToGCPrivateChatPromote::GetClassData() const { return &_class_data_; }


void CMsgClientToGCPrivateChatPromote::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgClientToGCPrivateChatPromote*>(&to_msg);
  auto& from = static_cast<const CMsgClientToGCPrivateChatPromote&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCPrivateChatPromote)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_private_chat_channel_name(from._internal_private_chat_channel_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.promote_account_id_ = from._impl_.promote_account_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientToGCPrivateChatPromote::CopyFrom(const CMsgClientToGCPrivateChatPromote& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCPrivateChatPromote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCPrivateChatPromote::IsInitialized() const {
  return true;
}

void CMsgClientToGCPrivateChatPromote::InternalSwap(CMsgClientToGCPrivateChatPromote* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.private_chat_channel_name_, lhs_arena,
      &other->_impl_.private_chat_channel_name_, rhs_arena
  );
  swap(_impl_.promote_account_id_, other->_impl_.promote_account_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCPrivateChatPromote::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fchat_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fchat_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fchat_2eproto[2]);
}

// ===================================================================

class CMsgClientToGCPrivateChatDemote::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCPrivateChatDemote>()._impl_._has_bits_);
  static void set_has_private_chat_channel_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_demote_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgClientToGCPrivateChatDemote::CMsgClientToGCPrivateChatDemote(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCPrivateChatDemote)
}
CMsgClientToGCPrivateChatDemote::CMsgClientToGCPrivateChatDemote(const CMsgClientToGCPrivateChatDemote& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgClientToGCPrivateChatDemote* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.private_chat_channel_name_){}
    , decltype(_impl_.demote_account_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.private_chat_channel_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.private_chat_channel_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_private_chat_channel_name()) {
    _this->_impl_.private_chat_channel_name_.Set(from._internal_private_chat_channel_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.demote_account_id_ = from._impl_.demote_account_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCPrivateChatDemote)
}

inline void CMsgClientToGCPrivateChatDemote::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.private_chat_channel_name_){}
    , decltype(_impl_.demote_account_id_){0u}
  };
  _impl_.private_chat_channel_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.private_chat_channel_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgClientToGCPrivateChatDemote::~CMsgClientToGCPrivateChatDemote() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCPrivateChatDemote)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgClientToGCPrivateChatDemote::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.private_chat_channel_name_.Destroy();
}

void CMsgClientToGCPrivateChatDemote::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgClientToGCPrivateChatDemote::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCPrivateChatDemote)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.private_chat_channel_name_.ClearNonDefaultToEmpty();
  }
  _impl_.demote_account_id_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCPrivateChatDemote::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string private_chat_channel_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_private_chat_channel_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgClientToGCPrivateChatDemote.private_chat_channel_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 demote_account_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_demote_account_id(&has_bits);
          _impl_.demote_account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientToGCPrivateChatDemote::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCPrivateChatDemote)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string private_chat_channel_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_private_chat_channel_name().data(), static_cast<int>(this->_internal_private_chat_channel_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientToGCPrivateChatDemote.private_chat_channel_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_private_chat_channel_name(), target);
  }

  // optional uint32 demote_account_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_demote_account_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCPrivateChatDemote)
  return target;
}

size_t CMsgClientToGCPrivateChatDemote::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCPrivateChatDemote)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string private_chat_channel_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_private_chat_channel_name());
    }

    // optional uint32 demote_account_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_demote_account_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientToGCPrivateChatDemote::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgClientToGCPrivateChatDemote::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientToGCPrivateChatDemote::GetClassData() const { return &_class_data_; }


void CMsgClientToGCPrivateChatDemote::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgClientToGCPrivateChatDemote*>(&to_msg);
  auto& from = static_cast<const CMsgClientToGCPrivateChatDemote&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCPrivateChatDemote)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_private_chat_channel_name(from._internal_private_chat_channel_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.demote_account_id_ = from._impl_.demote_account_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientToGCPrivateChatDemote::CopyFrom(const CMsgClientToGCPrivateChatDemote& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCPrivateChatDemote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCPrivateChatDemote::IsInitialized() const {
  return true;
}

void CMsgClientToGCPrivateChatDemote::InternalSwap(CMsgClientToGCPrivateChatDemote* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.private_chat_channel_name_, lhs_arena,
      &other->_impl_.private_chat_channel_name_, rhs_arena
  );
  swap(_impl_.demote_account_id_, other->_impl_.demote_account_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCPrivateChatDemote::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fchat_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fchat_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fchat_2eproto[3]);
}

// ===================================================================

class CMsgGCToClientPrivateChatResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCToClientPrivateChatResponse>()._impl_._has_bits_);
  static void set_has_private_chat_channel_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_username(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgGCToClientPrivateChatResponse::CMsgGCToClientPrivateChatResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToClientPrivateChatResponse)
}
CMsgGCToClientPrivateChatResponse::CMsgGCToClientPrivateChatResponse(const CMsgGCToClientPrivateChatResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCToClientPrivateChatResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.private_chat_channel_name_){}
    , decltype(_impl_.username_){}
    , decltype(_impl_.result_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.private_chat_channel_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.private_chat_channel_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_private_chat_channel_name()) {
    _this->_impl_.private_chat_channel_name_.Set(from._internal_private_chat_channel_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.username_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_username()) {
    _this->_impl_.username_.Set(from._internal_username(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.result_ = from._impl_.result_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCToClientPrivateChatResponse)
}

inline void CMsgGCToClientPrivateChatResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.private_chat_channel_name_){}
    , decltype(_impl_.username_){}
    , decltype(_impl_.result_){0}
  };
  _impl_.private_chat_channel_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.private_chat_channel_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.username_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgGCToClientPrivateChatResponse::~CMsgGCToClientPrivateChatResponse() {
  // @@protoc_insertion_point(destructor:CMsgGCToClientPrivateChatResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCToClientPrivateChatResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.private_chat_channel_name_.Destroy();
  _impl_.username_.Destroy();
}

void CMsgGCToClientPrivateChatResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCToClientPrivateChatResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToClientPrivateChatResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.private_chat_channel_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.username_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.result_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToClientPrivateChatResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string private_chat_channel_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_private_chat_channel_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgGCToClientPrivateChatResponse.private_chat_channel_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgGCToClientPrivateChatResponse.Result result = 2 [default = SUCCESS];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgGCToClientPrivateChatResponse_Result_IsValid(val))) {
            _internal_set_result(static_cast<::CMsgGCToClientPrivateChatResponse_Result>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string username = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_username();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgGCToClientPrivateChatResponse.username");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCToClientPrivateChatResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToClientPrivateChatResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string private_chat_channel_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_private_chat_channel_name().data(), static_cast<int>(this->_internal_private_chat_channel_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGCToClientPrivateChatResponse.private_chat_channel_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_private_chat_channel_name(), target);
  }

  // optional .CMsgGCToClientPrivateChatResponse.Result result = 2 [default = SUCCESS];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_result(), target);
  }

  // optional string username = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGCToClientPrivateChatResponse.username");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_username(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToClientPrivateChatResponse)
  return target;
}

size_t CMsgGCToClientPrivateChatResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToClientPrivateChatResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string private_chat_channel_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_private_chat_channel_name());
    }

    // optional string username = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_username());
    }

    // optional .CMsgGCToClientPrivateChatResponse.Result result = 2 [default = SUCCESS];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_result());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCToClientPrivateChatResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCToClientPrivateChatResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCToClientPrivateChatResponse::GetClassData() const { return &_class_data_; }


void CMsgGCToClientPrivateChatResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCToClientPrivateChatResponse*>(&to_msg);
  auto& from = static_cast<const CMsgGCToClientPrivateChatResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToClientPrivateChatResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_private_chat_channel_name(from._internal_private_chat_channel_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_username(from._internal_username());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.result_ = from._impl_.result_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCToClientPrivateChatResponse::CopyFrom(const CMsgGCToClientPrivateChatResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToClientPrivateChatResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToClientPrivateChatResponse::IsInitialized() const {
  return true;
}

void CMsgGCToClientPrivateChatResponse::InternalSwap(CMsgGCToClientPrivateChatResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.private_chat_channel_name_, lhs_arena,
      &other->_impl_.private_chat_channel_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.username_, lhs_arena,
      &other->_impl_.username_, rhs_arena
  );
  swap(_impl_.result_, other->_impl_.result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToClientPrivateChatResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fchat_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fchat_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fchat_2eproto[4]);
}

// ===================================================================

class CMsgDOTAJoinChatChannel::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAJoinChatChannel>()._impl_._has_bits_);
  static void set_has_channel_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_channel_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_silent_rejection(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgDOTAJoinChatChannel::CMsgDOTAJoinChatChannel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAJoinChatChannel)
}
CMsgDOTAJoinChatChannel::CMsgDOTAJoinChatChannel(const CMsgDOTAJoinChatChannel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgDOTAJoinChatChannel* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.channel_name_){}
    , decltype(_impl_.channel_type_){}
    , decltype(_impl_.silent_rejection_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.channel_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.channel_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_channel_name()) {
    _this->_impl_.channel_name_.Set(from._internal_channel_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.channel_type_, &from._impl_.channel_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.silent_rejection_) -
    reinterpret_cast<char*>(&_impl_.channel_type_)) + sizeof(_impl_.silent_rejection_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAJoinChatChannel)
}

inline void CMsgDOTAJoinChatChannel::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.channel_name_){}
    , decltype(_impl_.channel_type_){0}
    , decltype(_impl_.silent_rejection_){false}
  };
  _impl_.channel_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.channel_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgDOTAJoinChatChannel::~CMsgDOTAJoinChatChannel() {
  // @@protoc_insertion_point(destructor:CMsgDOTAJoinChatChannel)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgDOTAJoinChatChannel::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.channel_name_.Destroy();
}

void CMsgDOTAJoinChatChannel::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgDOTAJoinChatChannel::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAJoinChatChannel)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.channel_name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.channel_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.silent_rejection_) -
        reinterpret_cast<char*>(&_impl_.channel_type_)) + sizeof(_impl_.silent_rejection_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAJoinChatChannel::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string channel_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_channel_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgDOTAJoinChatChannel.channel_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .DOTAChatChannelType_t channel_type = 4 [default = DOTAChannelType_Regional];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::DOTAChatChannelType_t_IsValid(val))) {
            _internal_set_channel_type(static_cast<::DOTAChatChannelType_t>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bool silent_rejection = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_silent_rejection(&has_bits);
          _impl_.silent_rejection_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgDOTAJoinChatChannel::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAJoinChatChannel)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string channel_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_channel_name().data(), static_cast<int>(this->_internal_channel_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTAJoinChatChannel.channel_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_channel_name(), target);
  }

  // optional .DOTAChatChannelType_t channel_type = 4 [default = DOTAChannelType_Regional];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_channel_type(), target);
  }

  // optional bool silent_rejection = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_silent_rejection(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAJoinChatChannel)
  return target;
}

size_t CMsgDOTAJoinChatChannel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAJoinChatChannel)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string channel_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_channel_name());
    }

    // optional .DOTAChatChannelType_t channel_type = 4 [default = DOTAChannelType_Regional];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_channel_type());
    }

    // optional bool silent_rejection = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgDOTAJoinChatChannel::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgDOTAJoinChatChannel::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgDOTAJoinChatChannel::GetClassData() const { return &_class_data_; }


void CMsgDOTAJoinChatChannel::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgDOTAJoinChatChannel*>(&to_msg);
  auto& from = static_cast<const CMsgDOTAJoinChatChannel&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAJoinChatChannel)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_channel_name(from._internal_channel_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.channel_type_ = from._impl_.channel_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.silent_rejection_ = from._impl_.silent_rejection_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgDOTAJoinChatChannel::CopyFrom(const CMsgDOTAJoinChatChannel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAJoinChatChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAJoinChatChannel::IsInitialized() const {
  return true;
}

void CMsgDOTAJoinChatChannel::InternalSwap(CMsgDOTAJoinChatChannel* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.channel_name_, lhs_arena,
      &other->_impl_.channel_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTAJoinChatChannel, _impl_.silent_rejection_)
      + sizeof(CMsgDOTAJoinChatChannel::_impl_.silent_rejection_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTAJoinChatChannel, _impl_.channel_type_)>(
          reinterpret_cast<char*>(&_impl_.channel_type_),
          reinterpret_cast<char*>(&other->_impl_.channel_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAJoinChatChannel::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fchat_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fchat_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fchat_2eproto[5]);
}

// ===================================================================

class CMsgDOTALeaveChatChannel::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTALeaveChatChannel>()._impl_._has_bits_);
  static void set_has_channel_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgDOTALeaveChatChannel::CMsgDOTALeaveChatChannel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTALeaveChatChannel)
}
CMsgDOTALeaveChatChannel::CMsgDOTALeaveChatChannel(const CMsgDOTALeaveChatChannel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgDOTALeaveChatChannel* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.channel_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.channel_id_ = from._impl_.channel_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgDOTALeaveChatChannel)
}

inline void CMsgDOTALeaveChatChannel::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.channel_id_){uint64_t{0u}}
  };
}

CMsgDOTALeaveChatChannel::~CMsgDOTALeaveChatChannel() {
  // @@protoc_insertion_point(destructor:CMsgDOTALeaveChatChannel)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgDOTALeaveChatChannel::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgDOTALeaveChatChannel::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgDOTALeaveChatChannel::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTALeaveChatChannel)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.channel_id_ = uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTALeaveChatChannel::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 channel_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_channel_id(&has_bits);
          _impl_.channel_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgDOTALeaveChatChannel::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTALeaveChatChannel)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 channel_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_channel_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTALeaveChatChannel)
  return target;
}

size_t CMsgDOTALeaveChatChannel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTALeaveChatChannel)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 channel_id = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_channel_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgDOTALeaveChatChannel::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgDOTALeaveChatChannel::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgDOTALeaveChatChannel::GetClassData() const { return &_class_data_; }


void CMsgDOTALeaveChatChannel::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgDOTALeaveChatChannel*>(&to_msg);
  auto& from = static_cast<const CMsgDOTALeaveChatChannel&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTALeaveChatChannel)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_channel_id()) {
    _this->_internal_set_channel_id(from._internal_channel_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgDOTALeaveChatChannel::CopyFrom(const CMsgDOTALeaveChatChannel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTALeaveChatChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTALeaveChatChannel::IsInitialized() const {
  return true;
}

void CMsgDOTALeaveChatChannel::InternalSwap(CMsgDOTALeaveChatChannel* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.channel_id_, other->_impl_.channel_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTALeaveChatChannel::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fchat_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fchat_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fchat_2eproto[6]);
}

// ===================================================================

class CMsgGCChatReportPublicSpam::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCChatReportPublicSpam>()._impl_._has_bits_);
  static void set_has_channel_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_channel_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgGCChatReportPublicSpam::CMsgGCChatReportPublicSpam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCChatReportPublicSpam)
}
CMsgGCChatReportPublicSpam::CMsgGCChatReportPublicSpam(const CMsgGCChatReportPublicSpam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCChatReportPublicSpam* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.channel_id_){}
    , decltype(_impl_.channel_user_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.channel_id_, &from._impl_.channel_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.channel_user_id_) -
    reinterpret_cast<char*>(&_impl_.channel_id_)) + sizeof(_impl_.channel_user_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCChatReportPublicSpam)
}

inline void CMsgGCChatReportPublicSpam::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.channel_id_){uint64_t{0u}}
    , decltype(_impl_.channel_user_id_){0u}
  };
}

CMsgGCChatReportPublicSpam::~CMsgGCChatReportPublicSpam() {
  // @@protoc_insertion_point(destructor:CMsgGCChatReportPublicSpam)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCChatReportPublicSpam::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCChatReportPublicSpam::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCChatReportPublicSpam::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCChatReportPublicSpam)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.channel_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.channel_user_id_) -
        reinterpret_cast<char*>(&_impl_.channel_id_)) + sizeof(_impl_.channel_user_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCChatReportPublicSpam::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 channel_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_channel_id(&has_bits);
          _impl_.channel_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 channel_user_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_channel_user_id(&has_bits);
          _impl_.channel_user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCChatReportPublicSpam::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCChatReportPublicSpam)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 channel_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_channel_id(), target);
  }

  // optional uint32 channel_user_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_channel_user_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCChatReportPublicSpam)
  return target;
}

size_t CMsgGCChatReportPublicSpam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCChatReportPublicSpam)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 channel_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_channel_id());
    }

    // optional uint32 channel_user_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_channel_user_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCChatReportPublicSpam::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCChatReportPublicSpam::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCChatReportPublicSpam::GetClassData() const { return &_class_data_; }


void CMsgGCChatReportPublicSpam::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCChatReportPublicSpam*>(&to_msg);
  auto& from = static_cast<const CMsgGCChatReportPublicSpam&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCChatReportPublicSpam)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.channel_id_ = from._impl_.channel_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.channel_user_id_ = from._impl_.channel_user_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCChatReportPublicSpam::CopyFrom(const CMsgGCChatReportPublicSpam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCChatReportPublicSpam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCChatReportPublicSpam::IsInitialized() const {
  return true;
}

void CMsgGCChatReportPublicSpam::InternalSwap(CMsgGCChatReportPublicSpam* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCChatReportPublicSpam, _impl_.channel_user_id_)
      + sizeof(CMsgGCChatReportPublicSpam::_impl_.channel_user_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCChatReportPublicSpam, _impl_.channel_id_)>(
          reinterpret_cast<char*>(&_impl_.channel_id_),
          reinterpret_cast<char*>(&other->_impl_.channel_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCChatReportPublicSpam::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fchat_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fchat_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fchat_2eproto[7]);
}

// ===================================================================

class CMsgDOTAChatModeratorBan::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAChatModeratorBan>()._impl_._has_bits_);
  static void set_has_channel_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgDOTAChatModeratorBan::CMsgDOTAChatModeratorBan(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAChatModeratorBan)
}
CMsgDOTAChatModeratorBan::CMsgDOTAChatModeratorBan(const CMsgDOTAChatModeratorBan& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgDOTAChatModeratorBan* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.channel_id_){}
    , decltype(_impl_.account_id_){}
    , decltype(_impl_.duration_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.channel_id_, &from._impl_.channel_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.duration_) -
    reinterpret_cast<char*>(&_impl_.channel_id_)) + sizeof(_impl_.duration_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAChatModeratorBan)
}

inline void CMsgDOTAChatModeratorBan::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.channel_id_){uint64_t{0u}}
    , decltype(_impl_.account_id_){0u}
    , decltype(_impl_.duration_){0u}
  };
}

CMsgDOTAChatModeratorBan::~CMsgDOTAChatModeratorBan() {
  // @@protoc_insertion_point(destructor:CMsgDOTAChatModeratorBan)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgDOTAChatModeratorBan::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgDOTAChatModeratorBan::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgDOTAChatModeratorBan::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAChatModeratorBan)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.channel_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.duration_) -
        reinterpret_cast<char*>(&_impl_.channel_id_)) + sizeof(_impl_.duration_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAChatModeratorBan::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 channel_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_channel_id(&has_bits);
          _impl_.channel_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 account_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_account_id(&has_bits);
          _impl_.account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 duration = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_duration(&has_bits);
          _impl_.duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgDOTAChatModeratorBan::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAChatModeratorBan)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 channel_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_channel_id(), target);
  }

  // optional uint32 account_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_account_id(), target);
  }

  // optional uint32 duration = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_duration(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAChatModeratorBan)
  return target;
}

size_t CMsgDOTAChatModeratorBan::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAChatModeratorBan)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 channel_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_channel_id());
    }

    // optional uint32 account_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_account_id());
    }

    // optional uint32 duration = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_duration());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgDOTAChatModeratorBan::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgDOTAChatModeratorBan::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgDOTAChatModeratorBan::GetClassData() const { return &_class_data_; }


void CMsgDOTAChatModeratorBan::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgDOTAChatModeratorBan*>(&to_msg);
  auto& from = static_cast<const CMsgDOTAChatModeratorBan&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAChatModeratorBan)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.channel_id_ = from._impl_.channel_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.account_id_ = from._impl_.account_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.duration_ = from._impl_.duration_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgDOTAChatModeratorBan::CopyFrom(const CMsgDOTAChatModeratorBan& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAChatModeratorBan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAChatModeratorBan::IsInitialized() const {
  return true;
}

void CMsgDOTAChatModeratorBan::InternalSwap(CMsgDOTAChatModeratorBan* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTAChatModeratorBan, _impl_.duration_)
      + sizeof(CMsgDOTAChatModeratorBan::_impl_.duration_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTAChatModeratorBan, _impl_.channel_id_)>(
          reinterpret_cast<char*>(&_impl_.channel_id_),
          reinterpret_cast<char*>(&other->_impl_.channel_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAChatModeratorBan::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fchat_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fchat_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fchat_2eproto[8]);
}

// ===================================================================

class CMsgDOTAChatMessage_DiceRoll::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAChatMessage_DiceRoll>()._impl_._has_bits_);
  static void set_has_roll_min(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_roll_max(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgDOTAChatMessage_DiceRoll::CMsgDOTAChatMessage_DiceRoll(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAChatMessage.DiceRoll)
}
CMsgDOTAChatMessage_DiceRoll::CMsgDOTAChatMessage_DiceRoll(const CMsgDOTAChatMessage_DiceRoll& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgDOTAChatMessage_DiceRoll* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.roll_min_){}
    , decltype(_impl_.roll_max_){}
    , decltype(_impl_.result_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.roll_min_, &from._impl_.roll_min_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.result_) -
    reinterpret_cast<char*>(&_impl_.roll_min_)) + sizeof(_impl_.result_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAChatMessage.DiceRoll)
}

inline void CMsgDOTAChatMessage_DiceRoll::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.roll_min_){0}
    , decltype(_impl_.roll_max_){0}
    , decltype(_impl_.result_){0}
  };
}

CMsgDOTAChatMessage_DiceRoll::~CMsgDOTAChatMessage_DiceRoll() {
  // @@protoc_insertion_point(destructor:CMsgDOTAChatMessage.DiceRoll)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgDOTAChatMessage_DiceRoll::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgDOTAChatMessage_DiceRoll::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgDOTAChatMessage_DiceRoll::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAChatMessage.DiceRoll)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.roll_min_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.result_) -
        reinterpret_cast<char*>(&_impl_.roll_min_)) + sizeof(_impl_.result_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAChatMessage_DiceRoll::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 roll_min = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_roll_min(&has_bits);
          _impl_.roll_min_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 roll_max = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_roll_max(&has_bits);
          _impl_.roll_max_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 result = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_result(&has_bits);
          _impl_.result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgDOTAChatMessage_DiceRoll::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAChatMessage.DiceRoll)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 roll_min = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_roll_min(), target);
  }

  // optional int32 roll_max = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_roll_max(), target);
  }

  // optional int32 result = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAChatMessage.DiceRoll)
  return target;
}

size_t CMsgDOTAChatMessage_DiceRoll::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAChatMessage.DiceRoll)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 roll_min = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_roll_min());
    }

    // optional int32 roll_max = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_roll_max());
    }

    // optional int32 result = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_result());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgDOTAChatMessage_DiceRoll::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgDOTAChatMessage_DiceRoll::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgDOTAChatMessage_DiceRoll::GetClassData() const { return &_class_data_; }


void CMsgDOTAChatMessage_DiceRoll::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgDOTAChatMessage_DiceRoll*>(&to_msg);
  auto& from = static_cast<const CMsgDOTAChatMessage_DiceRoll&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAChatMessage.DiceRoll)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.roll_min_ = from._impl_.roll_min_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.roll_max_ = from._impl_.roll_max_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.result_ = from._impl_.result_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgDOTAChatMessage_DiceRoll::CopyFrom(const CMsgDOTAChatMessage_DiceRoll& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAChatMessage.DiceRoll)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAChatMessage_DiceRoll::IsInitialized() const {
  return true;
}

void CMsgDOTAChatMessage_DiceRoll::InternalSwap(CMsgDOTAChatMessage_DiceRoll* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTAChatMessage_DiceRoll, _impl_.result_)
      + sizeof(CMsgDOTAChatMessage_DiceRoll::_impl_.result_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTAChatMessage_DiceRoll, _impl_.roll_min_)>(
          reinterpret_cast<char*>(&_impl_.roll_min_),
          reinterpret_cast<char*>(&other->_impl_.roll_min_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAChatMessage_DiceRoll::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fchat_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fchat_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fchat_2eproto[9]);
}

// ===================================================================

class CMsgDOTAChatMessage_TriviaAnswered::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAChatMessage_TriviaAnswered>()._impl_._has_bits_);
  static void set_has_question_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_answer_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_party_questions_correct(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_party_questions_viewed(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_party_trivia_points(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CMsgDOTAChatMessage_TriviaAnswered::CMsgDOTAChatMessage_TriviaAnswered(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAChatMessage.TriviaAnswered)
}
CMsgDOTAChatMessage_TriviaAnswered::CMsgDOTAChatMessage_TriviaAnswered(const CMsgDOTAChatMessage_TriviaAnswered& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgDOTAChatMessage_TriviaAnswered* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.question_id_){}
    , decltype(_impl_.answer_index_){}
    , decltype(_impl_.party_questions_correct_){}
    , decltype(_impl_.party_questions_viewed_){}
    , decltype(_impl_.party_trivia_points_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.question_id_, &from._impl_.question_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.party_trivia_points_) -
    reinterpret_cast<char*>(&_impl_.question_id_)) + sizeof(_impl_.party_trivia_points_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAChatMessage.TriviaAnswered)
}

inline void CMsgDOTAChatMessage_TriviaAnswered::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.question_id_){0u}
    , decltype(_impl_.answer_index_){0u}
    , decltype(_impl_.party_questions_correct_){0u}
    , decltype(_impl_.party_questions_viewed_){0u}
    , decltype(_impl_.party_trivia_points_){0u}
  };
}

CMsgDOTAChatMessage_TriviaAnswered::~CMsgDOTAChatMessage_TriviaAnswered() {
  // @@protoc_insertion_point(destructor:CMsgDOTAChatMessage.TriviaAnswered)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgDOTAChatMessage_TriviaAnswered::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgDOTAChatMessage_TriviaAnswered::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgDOTAChatMessage_TriviaAnswered::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAChatMessage.TriviaAnswered)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&_impl_.question_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.party_trivia_points_) -
        reinterpret_cast<char*>(&_impl_.question_id_)) + sizeof(_impl_.party_trivia_points_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAChatMessage_TriviaAnswered::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 question_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_question_id(&has_bits);
          _impl_.question_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 answer_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_answer_index(&has_bits);
          _impl_.answer_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 party_questions_correct = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_party_questions_correct(&has_bits);
          _impl_.party_questions_correct_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 party_questions_viewed = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_party_questions_viewed(&has_bits);
          _impl_.party_questions_viewed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 party_trivia_points = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_party_trivia_points(&has_bits);
          _impl_.party_trivia_points_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgDOTAChatMessage_TriviaAnswered::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAChatMessage.TriviaAnswered)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 question_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_question_id(), target);
  }

  // optional uint32 answer_index = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_answer_index(), target);
  }

  // optional uint32 party_questions_correct = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_party_questions_correct(), target);
  }

  // optional uint32 party_questions_viewed = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_party_questions_viewed(), target);
  }

  // optional uint32 party_trivia_points = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_party_trivia_points(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAChatMessage.TriviaAnswered)
  return target;
}

size_t CMsgDOTAChatMessage_TriviaAnswered::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAChatMessage.TriviaAnswered)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint32 question_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_question_id());
    }

    // optional uint32 answer_index = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_answer_index());
    }

    // optional uint32 party_questions_correct = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_party_questions_correct());
    }

    // optional uint32 party_questions_viewed = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_party_questions_viewed());
    }

    // optional uint32 party_trivia_points = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_party_trivia_points());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgDOTAChatMessage_TriviaAnswered::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgDOTAChatMessage_TriviaAnswered::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgDOTAChatMessage_TriviaAnswered::GetClassData() const { return &_class_data_; }


void CMsgDOTAChatMessage_TriviaAnswered::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgDOTAChatMessage_TriviaAnswered*>(&to_msg);
  auto& from = static_cast<const CMsgDOTAChatMessage_TriviaAnswered&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAChatMessage.TriviaAnswered)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.question_id_ = from._impl_.question_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.answer_index_ = from._impl_.answer_index_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.party_questions_correct_ = from._impl_.party_questions_correct_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.party_questions_viewed_ = from._impl_.party_questions_viewed_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.party_trivia_points_ = from._impl_.party_trivia_points_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgDOTAChatMessage_TriviaAnswered::CopyFrom(const CMsgDOTAChatMessage_TriviaAnswered& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAChatMessage.TriviaAnswered)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAChatMessage_TriviaAnswered::IsInitialized() const {
  return true;
}

void CMsgDOTAChatMessage_TriviaAnswered::InternalSwap(CMsgDOTAChatMessage_TriviaAnswered* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTAChatMessage_TriviaAnswered, _impl_.party_trivia_points_)
      + sizeof(CMsgDOTAChatMessage_TriviaAnswered::_impl_.party_trivia_points_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTAChatMessage_TriviaAnswered, _impl_.question_id_)>(
          reinterpret_cast<char*>(&_impl_.question_id_),
          reinterpret_cast<char*>(&other->_impl_.question_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAChatMessage_TriviaAnswered::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fchat_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fchat_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fchat_2eproto[10]);
}

// ===================================================================

class CMsgDOTAChatMessage_PlayerDraftPick::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAChatMessage_PlayerDraftPick>()._impl_._has_bits_);
  static void set_has_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_team(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgDOTAChatMessage_PlayerDraftPick::CMsgDOTAChatMessage_PlayerDraftPick(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAChatMessage.PlayerDraftPick)
}
CMsgDOTAChatMessage_PlayerDraftPick::CMsgDOTAChatMessage_PlayerDraftPick(const CMsgDOTAChatMessage_PlayerDraftPick& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgDOTAChatMessage_PlayerDraftPick* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.team_){}
    , decltype(_impl_.player_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.team_, &from._impl_.team_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.player_id_) -
    reinterpret_cast<char*>(&_impl_.team_)) + sizeof(_impl_.player_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAChatMessage.PlayerDraftPick)
}

inline void CMsgDOTAChatMessage_PlayerDraftPick::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.team_){0}
    , decltype(_impl_.player_id_){-1}
  };
}

CMsgDOTAChatMessage_PlayerDraftPick::~CMsgDOTAChatMessage_PlayerDraftPick() {
  // @@protoc_insertion_point(destructor:CMsgDOTAChatMessage.PlayerDraftPick)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgDOTAChatMessage_PlayerDraftPick::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgDOTAChatMessage_PlayerDraftPick::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgDOTAChatMessage_PlayerDraftPick::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAChatMessage.PlayerDraftPick)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    _impl_.team_ = 0;
    _impl_.player_id_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAChatMessage_PlayerDraftPick::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 player_id = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_player_id(&has_bits);
          _impl_.player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 team = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_team(&has_bits);
          _impl_.team_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgDOTAChatMessage_PlayerDraftPick::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAChatMessage.PlayerDraftPick)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 player_id = 1 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_player_id(), target);
  }

  // optional int32 team = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_team(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAChatMessage.PlayerDraftPick)
  return target;
}

size_t CMsgDOTAChatMessage_PlayerDraftPick::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAChatMessage.PlayerDraftPick)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 team = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_team());
    }

    // optional int32 player_id = 1 [default = -1];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_player_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgDOTAChatMessage_PlayerDraftPick::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgDOTAChatMessage_PlayerDraftPick::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgDOTAChatMessage_PlayerDraftPick::GetClassData() const { return &_class_data_; }


void CMsgDOTAChatMessage_PlayerDraftPick::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgDOTAChatMessage_PlayerDraftPick*>(&to_msg);
  auto& from = static_cast<const CMsgDOTAChatMessage_PlayerDraftPick&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAChatMessage.PlayerDraftPick)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.team_ = from._impl_.team_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.player_id_ = from._impl_.player_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgDOTAChatMessage_PlayerDraftPick::CopyFrom(const CMsgDOTAChatMessage_PlayerDraftPick& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAChatMessage.PlayerDraftPick)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAChatMessage_PlayerDraftPick::IsInitialized() const {
  return true;
}

void CMsgDOTAChatMessage_PlayerDraftPick::InternalSwap(CMsgDOTAChatMessage_PlayerDraftPick* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.team_, other->_impl_.team_);
  swap(_impl_.player_id_, other->_impl_.player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAChatMessage_PlayerDraftPick::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fchat_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fchat_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fchat_2eproto[11]);
}

// ===================================================================

class CMsgDOTAChatMessage_ChatWheelMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAChatMessage_ChatWheelMessage>()._impl_._has_bits_);
  static void set_has_message_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_emoticon_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgDOTAChatMessage_ChatWheelMessage::CMsgDOTAChatMessage_ChatWheelMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAChatMessage.ChatWheelMessage)
}
CMsgDOTAChatMessage_ChatWheelMessage::CMsgDOTAChatMessage_ChatWheelMessage(const CMsgDOTAChatMessage_ChatWheelMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgDOTAChatMessage_ChatWheelMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.emoticon_id_){}
    , decltype(_impl_.message_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.emoticon_id_, &from._impl_.emoticon_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.message_id_) -
    reinterpret_cast<char*>(&_impl_.emoticon_id_)) + sizeof(_impl_.message_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAChatMessage.ChatWheelMessage)
}

inline void CMsgDOTAChatMessage_ChatWheelMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.emoticon_id_){0u}
    , decltype(_impl_.message_id_){4294967295u}
  };
}

CMsgDOTAChatMessage_ChatWheelMessage::~CMsgDOTAChatMessage_ChatWheelMessage() {
  // @@protoc_insertion_point(destructor:CMsgDOTAChatMessage.ChatWheelMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgDOTAChatMessage_ChatWheelMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgDOTAChatMessage_ChatWheelMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgDOTAChatMessage_ChatWheelMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAChatMessage.ChatWheelMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    _impl_.emoticon_id_ = 0u;
    _impl_.message_id_ = 4294967295u;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAChatMessage_ChatWheelMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 message_id = 1 [default = 4294967295];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_message_id(&has_bits);
          _impl_.message_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 emoticon_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_emoticon_id(&has_bits);
          _impl_.emoticon_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgDOTAChatMessage_ChatWheelMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAChatMessage.ChatWheelMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 message_id = 1 [default = 4294967295];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_message_id(), target);
  }

  // optional uint32 emoticon_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_emoticon_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAChatMessage.ChatWheelMessage)
  return target;
}

size_t CMsgDOTAChatMessage_ChatWheelMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAChatMessage.ChatWheelMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 emoticon_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_emoticon_id());
    }

    // optional uint32 message_id = 1 [default = 4294967295];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_message_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgDOTAChatMessage_ChatWheelMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgDOTAChatMessage_ChatWheelMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgDOTAChatMessage_ChatWheelMessage::GetClassData() const { return &_class_data_; }


void CMsgDOTAChatMessage_ChatWheelMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgDOTAChatMessage_ChatWheelMessage*>(&to_msg);
  auto& from = static_cast<const CMsgDOTAChatMessage_ChatWheelMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAChatMessage.ChatWheelMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.emoticon_id_ = from._impl_.emoticon_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.message_id_ = from._impl_.message_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgDOTAChatMessage_ChatWheelMessage::CopyFrom(const CMsgDOTAChatMessage_ChatWheelMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAChatMessage.ChatWheelMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAChatMessage_ChatWheelMessage::IsInitialized() const {
  return true;
}

void CMsgDOTAChatMessage_ChatWheelMessage::InternalSwap(CMsgDOTAChatMessage_ChatWheelMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.emoticon_id_, other->_impl_.emoticon_id_);
  swap(_impl_.message_id_, other->_impl_.message_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAChatMessage_ChatWheelMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fchat_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fchat_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fchat_2eproto[12]);
}

// ===================================================================

class CMsgDOTAChatMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAChatMessage>()._impl_._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_channel_id(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_persona_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_text(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_suggest_invite_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_suggest_invite_name(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_fantasy_draft_owner_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_fantasy_draft_player_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_event_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_suggest_invite_to_lobby(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_event_points(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_coin_flip(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_player_id(HasBits* has_bits) {
    (*has_bits)[1] |= 32u;
  }
  static void set_has_share_profile_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_channel_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static const ::CMsgDOTAChatMessage_DiceRoll& dice_roll(const CMsgDOTAChatMessage* msg);
  static void set_has_dice_roll(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_share_party_id(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_share_lobby_id(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_share_lobby_custom_game_id(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_share_lobby_passkey(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_private_chat_channel_id(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_legacy_battle_cup_victory(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_battle_cup_streak(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_badge_level(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_suggest_pick_hero_id(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_suggest_pick_hero_role(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_suggest_ban_hero_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static const ::CMsgDOTAChatMessage_TriviaAnswered& trivia_answer(const CMsgDOTAChatMessage* msg);
  static void set_has_trivia_answer(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_requested_ability_id(HasBits* has_bits) {
    (*has_bits)[1] |= 64u;
  }
  static void set_has_chat_flags(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static void set_has_started_finding_match(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_ctrl_is_down(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static void set_has_favorite_team_id(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static void set_has_favorite_team_quality(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static void set_has_suggest_player_draft_pick(HasBits* has_bits) {
    (*has_bits)[1] |= 16u;
  }
  static const ::CMsgDOTAChatMessage_PlayerDraftPick& player_draft_pick(const CMsgDOTAChatMessage* msg);
  static void set_has_player_draft_pick(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::CMsgDOTAChatMessage_ChatWheelMessage& chat_wheel_message(const CMsgDOTAChatMessage* msg);
  static void set_has_chat_wheel_message(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

const ::CMsgDOTAChatMessage_DiceRoll&
CMsgDOTAChatMessage::_Internal::dice_roll(const CMsgDOTAChatMessage* msg) {
  return *msg->_impl_.dice_roll_;
}
const ::CMsgDOTAChatMessage_TriviaAnswered&
CMsgDOTAChatMessage::_Internal::trivia_answer(const CMsgDOTAChatMessage* msg) {
  return *msg->_impl_.trivia_answer_;
}
const ::CMsgDOTAChatMessage_PlayerDraftPick&
CMsgDOTAChatMessage::_Internal::player_draft_pick(const CMsgDOTAChatMessage* msg) {
  return *msg->_impl_.player_draft_pick_;
}
const ::CMsgDOTAChatMessage_ChatWheelMessage&
CMsgDOTAChatMessage::_Internal::chat_wheel_message(const CMsgDOTAChatMessage* msg) {
  return *msg->_impl_.chat_wheel_message_;
}
CMsgDOTAChatMessage::CMsgDOTAChatMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAChatMessage)
}
CMsgDOTAChatMessage::CMsgDOTAChatMessage(const CMsgDOTAChatMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgDOTAChatMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.persona_name_){}
    , decltype(_impl_.text_){}
    , decltype(_impl_.suggest_invite_name_){}
    , decltype(_impl_.share_lobby_passkey_){}
    , decltype(_impl_.suggest_pick_hero_role_){}
    , decltype(_impl_.dice_roll_){nullptr}
    , decltype(_impl_.trivia_answer_){nullptr}
    , decltype(_impl_.player_draft_pick_){nullptr}
    , decltype(_impl_.chat_wheel_message_){nullptr}
    , decltype(_impl_.channel_id_){}
    , decltype(_impl_.account_id_){}
    , decltype(_impl_.timestamp_){}
    , decltype(_impl_.suggest_invite_account_id_){}
    , decltype(_impl_.fantasy_draft_owner_account_id_){}
    , decltype(_impl_.fantasy_draft_player_account_id_){}
    , decltype(_impl_.event_id_){}
    , decltype(_impl_.event_points_){}
    , decltype(_impl_.share_profile_account_id_){}
    , decltype(_impl_.share_party_id_){}
    , decltype(_impl_.share_lobby_id_){}
    , decltype(_impl_.channel_user_id_){}
    , decltype(_impl_.suggest_invite_to_lobby_){}
    , decltype(_impl_.coin_flip_){}
    , decltype(_impl_.legacy_battle_cup_victory_){}
    , decltype(_impl_.started_finding_match_){}
    , decltype(_impl_.share_lobby_custom_game_id_){}
    , decltype(_impl_.private_chat_channel_id_){}
    , decltype(_impl_.status_){}
    , decltype(_impl_.badge_level_){}
    , decltype(_impl_.suggest_pick_hero_id_){}
    , decltype(_impl_.battle_cup_streak_){}
    , decltype(_impl_.suggest_ban_hero_id_){}
    , decltype(_impl_.chat_flags_){}
    , decltype(_impl_.ctrl_is_down_){}
    , decltype(_impl_.favorite_team_id_){}
    , decltype(_impl_.favorite_team_quality_){}
    , decltype(_impl_.suggest_player_draft_pick_){}
    , decltype(_impl_.player_id_){}
    , decltype(_impl_.requested_ability_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.persona_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.persona_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_persona_name()) {
    _this->_impl_.persona_name_.Set(from._internal_persona_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_text()) {
    _this->_impl_.text_.Set(from._internal_text(), 
      _this->GetArenaForAllocation());
  }
  _impl_.suggest_invite_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.suggest_invite_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_suggest_invite_name()) {
    _this->_impl_.suggest_invite_name_.Set(from._internal_suggest_invite_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.share_lobby_passkey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.share_lobby_passkey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_share_lobby_passkey()) {
    _this->_impl_.share_lobby_passkey_.Set(from._internal_share_lobby_passkey(), 
      _this->GetArenaForAllocation());
  }
  _impl_.suggest_pick_hero_role_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.suggest_pick_hero_role_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_suggest_pick_hero_role()) {
    _this->_impl_.suggest_pick_hero_role_.Set(from._internal_suggest_pick_hero_role(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_dice_roll()) {
    _this->_impl_.dice_roll_ = new ::CMsgDOTAChatMessage_DiceRoll(*from._impl_.dice_roll_);
  }
  if (from._internal_has_trivia_answer()) {
    _this->_impl_.trivia_answer_ = new ::CMsgDOTAChatMessage_TriviaAnswered(*from._impl_.trivia_answer_);
  }
  if (from._internal_has_player_draft_pick()) {
    _this->_impl_.player_draft_pick_ = new ::CMsgDOTAChatMessage_PlayerDraftPick(*from._impl_.player_draft_pick_);
  }
  if (from._internal_has_chat_wheel_message()) {
    _this->_impl_.chat_wheel_message_ = new ::CMsgDOTAChatMessage_ChatWheelMessage(*from._impl_.chat_wheel_message_);
  }
  ::memcpy(&_impl_.channel_id_, &from._impl_.channel_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.requested_ability_id_) -
    reinterpret_cast<char*>(&_impl_.channel_id_)) + sizeof(_impl_.requested_ability_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAChatMessage)
}

inline void CMsgDOTAChatMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.persona_name_){}
    , decltype(_impl_.text_){}
    , decltype(_impl_.suggest_invite_name_){}
    , decltype(_impl_.share_lobby_passkey_){}
    , decltype(_impl_.suggest_pick_hero_role_){}
    , decltype(_impl_.dice_roll_){nullptr}
    , decltype(_impl_.trivia_answer_){nullptr}
    , decltype(_impl_.player_draft_pick_){nullptr}
    , decltype(_impl_.chat_wheel_message_){nullptr}
    , decltype(_impl_.channel_id_){uint64_t{0u}}
    , decltype(_impl_.account_id_){0u}
    , decltype(_impl_.timestamp_){0u}
    , decltype(_impl_.suggest_invite_account_id_){0u}
    , decltype(_impl_.fantasy_draft_owner_account_id_){0u}
    , decltype(_impl_.fantasy_draft_player_account_id_){0u}
    , decltype(_impl_.event_id_){0u}
    , decltype(_impl_.event_points_){0u}
    , decltype(_impl_.share_profile_account_id_){0u}
    , decltype(_impl_.share_party_id_){uint64_t{0u}}
    , decltype(_impl_.share_lobby_id_){uint64_t{0u}}
    , decltype(_impl_.channel_user_id_){0u}
    , decltype(_impl_.suggest_invite_to_lobby_){false}
    , decltype(_impl_.coin_flip_){false}
    , decltype(_impl_.legacy_battle_cup_victory_){false}
    , decltype(_impl_.started_finding_match_){false}
    , decltype(_impl_.share_lobby_custom_game_id_){uint64_t{0u}}
    , decltype(_impl_.private_chat_channel_id_){0u}
    , decltype(_impl_.status_){0u}
    , decltype(_impl_.badge_level_){0u}
    , decltype(_impl_.suggest_pick_hero_id_){0u}
    , decltype(_impl_.battle_cup_streak_){0u}
    , decltype(_impl_.suggest_ban_hero_id_){0u}
    , decltype(_impl_.chat_flags_){0u}
    , decltype(_impl_.ctrl_is_down_){false}
    , decltype(_impl_.favorite_team_id_){0u}
    , decltype(_impl_.favorite_team_quality_){0u}
    , decltype(_impl_.suggest_player_draft_pick_){-1}
    , decltype(_impl_.player_id_){-1}
    , decltype(_impl_.requested_ability_id_){-1}
  };
  _impl_.persona_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.persona_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.suggest_invite_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.suggest_invite_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.share_lobby_passkey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.share_lobby_passkey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.suggest_pick_hero_role_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.suggest_pick_hero_role_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgDOTAChatMessage::~CMsgDOTAChatMessage() {
  // @@protoc_insertion_point(destructor:CMsgDOTAChatMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgDOTAChatMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.persona_name_.Destroy();
  _impl_.text_.Destroy();
  _impl_.suggest_invite_name_.Destroy();
  _impl_.share_lobby_passkey_.Destroy();
  _impl_.suggest_pick_hero_role_.Destroy();
  if (this != internal_default_instance()) delete _impl_.dice_roll_;
  if (this != internal_default_instance()) delete _impl_.trivia_answer_;
  if (this != internal_default_instance()) delete _impl_.player_draft_pick_;
  if (this != internal_default_instance()) delete _impl_.chat_wheel_message_;
}

void CMsgDOTAChatMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgDOTAChatMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAChatMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.persona_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.text_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.suggest_invite_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.share_lobby_passkey_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.suggest_pick_hero_role_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.dice_roll_ != nullptr);
      _impl_.dice_roll_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.trivia_answer_ != nullptr);
      _impl_.trivia_answer_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(_impl_.player_draft_pick_ != nullptr);
      _impl_.player_draft_pick_->Clear();
    }
  }
  if (cached_has_bits & 0x00000100u) {
    GOOGLE_DCHECK(_impl_.chat_wheel_message_ != nullptr);
    _impl_.chat_wheel_message_->Clear();
  }
  if (cached_has_bits & 0x0000fe00u) {
    ::memset(&_impl_.channel_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.event_id_) -
        reinterpret_cast<char*>(&_impl_.channel_id_)) + sizeof(_impl_.event_id_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&_impl_.event_points_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.legacy_battle_cup_victory_) -
        reinterpret_cast<char*>(&_impl_.event_points_)) + sizeof(_impl_.legacy_battle_cup_victory_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&_impl_.started_finding_match_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.suggest_ban_hero_id_) -
        reinterpret_cast<char*>(&_impl_.started_finding_match_)) + sizeof(_impl_.suggest_ban_hero_id_));
  }
  cached_has_bits = _impl_._has_bits_[1];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&_impl_.chat_flags_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.favorite_team_quality_) -
        reinterpret_cast<char*>(&_impl_.chat_flags_)) + sizeof(_impl_.favorite_team_quality_));
    _impl_.suggest_player_draft_pick_ = -1;
    _impl_.player_id_ = -1;
    _impl_.requested_ability_id_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAChatMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_account_id(&_impl_._has_bits_);
          _impl_.account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 channel_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_channel_id(&_impl_._has_bits_);
          _impl_.channel_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string persona_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_persona_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgDOTAChatMessage.persona_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string text = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_text();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgDOTAChatMessage.text");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 timestamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_timestamp(&_impl_._has_bits_);
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 suggest_invite_account_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_suggest_invite_account_id(&_impl_._has_bits_);
          _impl_.suggest_invite_account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string suggest_invite_name = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_suggest_invite_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgDOTAChatMessage.suggest_invite_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 fantasy_draft_owner_account_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_fantasy_draft_owner_account_id(&_impl_._has_bits_);
          _impl_.fantasy_draft_owner_account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 fantasy_draft_player_account_id = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_fantasy_draft_player_account_id(&_impl_._has_bits_);
          _impl_.fantasy_draft_player_account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 event_id = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_event_id(&_impl_._has_bits_);
          _impl_.event_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool suggest_invite_to_lobby = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_suggest_invite_to_lobby(&_impl_._has_bits_);
          _impl_.suggest_invite_to_lobby_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 event_points = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_event_points(&_impl_._has_bits_);
          _impl_.event_points_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool coin_flip = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_coin_flip(&_impl_._has_bits_);
          _impl_.coin_flip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 player_id = 14 [default = -1];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_player_id(&_impl_._has_bits_);
          _impl_.player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 share_profile_account_id = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_share_profile_account_id(&_impl_._has_bits_);
          _impl_.share_profile_account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 channel_user_id = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_channel_user_id(&_impl_._has_bits_);
          _impl_.channel_user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgDOTAChatMessage.DiceRoll dice_roll = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_dice_roll(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 share_party_id = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_share_party_id(&_impl_._has_bits_);
          _impl_.share_party_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 share_lobby_id = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _Internal::set_has_share_lobby_id(&_impl_._has_bits_);
          _impl_.share_lobby_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 share_lobby_custom_game_id = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _Internal::set_has_share_lobby_custom_game_id(&_impl_._has_bits_);
          _impl_.share_lobby_custom_game_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string share_lobby_passkey = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          auto str = _internal_mutable_share_lobby_passkey();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgDOTAChatMessage.share_lobby_passkey");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 private_chat_channel_id = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _Internal::set_has_private_chat_channel_id(&_impl_._has_bits_);
          _impl_.private_chat_channel_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 status = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _Internal::set_has_status(&_impl_._has_bits_);
          _impl_.status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool legacy_battle_cup_victory = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          _Internal::set_has_legacy_battle_cup_victory(&_impl_._has_bits_);
          _impl_.legacy_battle_cup_victory_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 badge_level = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          _Internal::set_has_badge_level(&_impl_._has_bits_);
          _impl_.badge_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 suggest_pick_hero_id = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          _Internal::set_has_suggest_pick_hero_id(&_impl_._has_bits_);
          _impl_.suggest_pick_hero_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string suggest_pick_hero_role = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          auto str = _internal_mutable_suggest_pick_hero_role();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgDOTAChatMessage.suggest_pick_hero_role");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 battle_cup_streak = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 232)) {
          _Internal::set_has_battle_cup_streak(&_impl_._has_bits_);
          _impl_.battle_cup_streak_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 suggest_ban_hero_id = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 240)) {
          _Internal::set_has_suggest_ban_hero_id(&_impl_._has_bits_);
          _impl_.suggest_ban_hero_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgDOTAChatMessage.TriviaAnswered trivia_answer = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_trivia_answer(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 requested_ability_id = 33 [default = -1];
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_requested_ability_id(&_impl_._has_bits_);
          _impl_.requested_ability_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 chat_flags = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_chat_flags(&_impl_._has_bits_);
          _impl_.chat_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool started_finding_match = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_started_finding_match(&_impl_._has_bits_);
          _impl_.started_finding_match_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool ctrl_is_down = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_ctrl_is_down(&_impl_._has_bits_);
          _impl_.ctrl_is_down_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 favorite_team_id = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_favorite_team_id(&_impl_._has_bits_);
          _impl_.favorite_team_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 favorite_team_quality = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_favorite_team_quality(&_impl_._has_bits_);
          _impl_.favorite_team_quality_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 suggest_player_draft_pick = 39 [default = -1];
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_suggest_player_draft_pick(&_impl_._has_bits_);
          _impl_.suggest_player_draft_pick_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgDOTAChatMessage.PlayerDraftPick player_draft_pick = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_draft_pick(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgDOTAChatMessage.ChatWheelMessage chat_wheel_message = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_chat_wheel_message(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgDOTAChatMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAChatMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional uint64 channel_id = 2;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_channel_id(), target);
  }

  // optional string persona_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_persona_name().data(), static_cast<int>(this->_internal_persona_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTAChatMessage.persona_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_persona_name(), target);
  }

  // optional string text = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTAChatMessage.text");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_text(), target);
  }

  // optional uint32 timestamp = 5;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_timestamp(), target);
  }

  // optional uint32 suggest_invite_account_id = 6;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_suggest_invite_account_id(), target);
  }

  // optional string suggest_invite_name = 7;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_suggest_invite_name().data(), static_cast<int>(this->_internal_suggest_invite_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTAChatMessage.suggest_invite_name");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_suggest_invite_name(), target);
  }

  // optional uint32 fantasy_draft_owner_account_id = 8;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_fantasy_draft_owner_account_id(), target);
  }

  // optional uint32 fantasy_draft_player_account_id = 9;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_fantasy_draft_player_account_id(), target);
  }

  // optional uint32 event_id = 10;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_event_id(), target);
  }

  // optional bool suggest_invite_to_lobby = 11;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(11, this->_internal_suggest_invite_to_lobby(), target);
  }

  // optional uint32 event_points = 12;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(12, this->_internal_event_points(), target);
  }

  // optional bool coin_flip = 13;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(13, this->_internal_coin_flip(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional int32 player_id = 14 [default = -1];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(14, this->_internal_player_id(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 share_profile_account_id = 15;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(15, this->_internal_share_profile_account_id(), target);
  }

  // optional uint32 channel_user_id = 16;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(16, this->_internal_channel_user_id(), target);
  }

  // optional .CMsgDOTAChatMessage.DiceRoll dice_roll = 17;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, _Internal::dice_roll(this),
        _Internal::dice_roll(this).GetCachedSize(), target, stream);
  }

  // optional uint64 share_party_id = 18;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(18, this->_internal_share_party_id(), target);
  }

  // optional uint64 share_lobby_id = 19;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(19, this->_internal_share_lobby_id(), target);
  }

  // optional uint64 share_lobby_custom_game_id = 20;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(20, this->_internal_share_lobby_custom_game_id(), target);
  }

  // optional string share_lobby_passkey = 21;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_share_lobby_passkey().data(), static_cast<int>(this->_internal_share_lobby_passkey().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTAChatMessage.share_lobby_passkey");
    target = stream->WriteStringMaybeAliased(
        21, this->_internal_share_lobby_passkey(), target);
  }

  // optional uint32 private_chat_channel_id = 22;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(22, this->_internal_private_chat_channel_id(), target);
  }

  // optional uint32 status = 23;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(23, this->_internal_status(), target);
  }

  // optional bool legacy_battle_cup_victory = 24;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(24, this->_internal_legacy_battle_cup_victory(), target);
  }

  // optional uint32 badge_level = 25;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(25, this->_internal_badge_level(), target);
  }

  // optional uint32 suggest_pick_hero_id = 26;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(26, this->_internal_suggest_pick_hero_id(), target);
  }

  // optional string suggest_pick_hero_role = 27;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_suggest_pick_hero_role().data(), static_cast<int>(this->_internal_suggest_pick_hero_role().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTAChatMessage.suggest_pick_hero_role");
    target = stream->WriteStringMaybeAliased(
        27, this->_internal_suggest_pick_hero_role(), target);
  }

  // optional uint32 battle_cup_streak = 29;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(29, this->_internal_battle_cup_streak(), target);
  }

  // optional uint32 suggest_ban_hero_id = 30;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(30, this->_internal_suggest_ban_hero_id(), target);
  }

  // optional .CMsgDOTAChatMessage.TriviaAnswered trivia_answer = 32;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(32, _Internal::trivia_answer(this),
        _Internal::trivia_answer(this).GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional int32 requested_ability_id = 33 [default = -1];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(33, this->_internal_requested_ability_id(), target);
  }

  // optional uint32 chat_flags = 34;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(34, this->_internal_chat_flags(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool started_finding_match = 35;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(35, this->_internal_started_finding_match(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional bool ctrl_is_down = 36;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(36, this->_internal_ctrl_is_down(), target);
  }

  // optional uint32 favorite_team_id = 37;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(37, this->_internal_favorite_team_id(), target);
  }

  // optional uint32 favorite_team_quality = 38;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(38, this->_internal_favorite_team_quality(), target);
  }

  // optional int32 suggest_player_draft_pick = 39 [default = -1];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(39, this->_internal_suggest_player_draft_pick(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CMsgDOTAChatMessage.PlayerDraftPick player_draft_pick = 40;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(40, _Internal::player_draft_pick(this),
        _Internal::player_draft_pick(this).GetCachedSize(), target, stream);
  }

  // optional .CMsgDOTAChatMessage.ChatWheelMessage chat_wheel_message = 41;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(41, _Internal::chat_wheel_message(this),
        _Internal::chat_wheel_message(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAChatMessage)
  return target;
}

size_t CMsgDOTAChatMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAChatMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string persona_name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_persona_name());
    }

    // optional string text = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_text());
    }

    // optional string suggest_invite_name = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_suggest_invite_name());
    }

    // optional string share_lobby_passkey = 21;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_share_lobby_passkey());
    }

    // optional string suggest_pick_hero_role = 27;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_suggest_pick_hero_role());
    }

    // optional .CMsgDOTAChatMessage.DiceRoll dice_roll = 17;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.dice_roll_);
    }

    // optional .CMsgDOTAChatMessage.TriviaAnswered trivia_answer = 32;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.trivia_answer_);
    }

    // optional .CMsgDOTAChatMessage.PlayerDraftPick player_draft_pick = 40;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.player_draft_pick_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .CMsgDOTAChatMessage.ChatWheelMessage chat_wheel_message = 41;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.chat_wheel_message_);
    }

    // optional uint64 channel_id = 2;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_channel_id());
    }

    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_account_id());
    }

    // optional uint32 timestamp = 5;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_timestamp());
    }

    // optional uint32 suggest_invite_account_id = 6;
    if (cached_has_bits & 0x00001000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_suggest_invite_account_id());
    }

    // optional uint32 fantasy_draft_owner_account_id = 8;
    if (cached_has_bits & 0x00002000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_fantasy_draft_owner_account_id());
    }

    // optional uint32 fantasy_draft_player_account_id = 9;
    if (cached_has_bits & 0x00004000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_fantasy_draft_player_account_id());
    }

    // optional uint32 event_id = 10;
    if (cached_has_bits & 0x00008000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_event_id());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional uint32 event_points = 12;
    if (cached_has_bits & 0x00010000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_event_points());
    }

    // optional uint32 share_profile_account_id = 15;
    if (cached_has_bits & 0x00020000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_share_profile_account_id());
    }

    // optional uint64 share_party_id = 18;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt64Size(
          this->_internal_share_party_id());
    }

    // optional uint64 share_lobby_id = 19;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt64Size(
          this->_internal_share_lobby_id());
    }

    // optional uint32 channel_user_id = 16;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_channel_user_id());
    }

    // optional bool suggest_invite_to_lobby = 11;
    if (cached_has_bits & 0x00200000u) {
      total_size += 1 + 1;
    }

    // optional bool coin_flip = 13;
    if (cached_has_bits & 0x00400000u) {
      total_size += 1 + 1;
    }

    // optional bool legacy_battle_cup_victory = 24;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional bool started_finding_match = 35;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 + 1;
    }

    // optional uint64 share_lobby_custom_game_id = 20;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt64Size(
          this->_internal_share_lobby_custom_game_id());
    }

    // optional uint32 private_chat_channel_id = 22;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_private_chat_channel_id());
    }

    // optional uint32 status = 23;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_status());
    }

    // optional uint32 badge_level = 25;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_badge_level());
    }

    // optional uint32 suggest_pick_hero_id = 26;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_suggest_pick_hero_id());
    }

    // optional uint32 battle_cup_streak = 29;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_battle_cup_streak());
    }

    // optional uint32 suggest_ban_hero_id = 30;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_suggest_ban_hero_id());
    }

  }
  cached_has_bits = _impl_._has_bits_[1];
  if (cached_has_bits & 0x0000007fu) {
    // optional uint32 chat_flags = 34;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_chat_flags());
    }

    // optional bool ctrl_is_down = 36;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + 1;
    }

    // optional uint32 favorite_team_id = 37;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_favorite_team_id());
    }

    // optional uint32 favorite_team_quality = 38;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_favorite_team_quality());
    }

    // optional int32 suggest_player_draft_pick = 39 [default = -1];
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_suggest_player_draft_pick());
    }

    // optional int32 player_id = 14 [default = -1];
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_player_id());
    }

    // optional int32 requested_ability_id = 33 [default = -1];
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_requested_ability_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgDOTAChatMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgDOTAChatMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgDOTAChatMessage::GetClassData() const { return &_class_data_; }


void CMsgDOTAChatMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgDOTAChatMessage*>(&to_msg);
  auto& from = static_cast<const CMsgDOTAChatMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAChatMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_persona_name(from._internal_persona_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_text(from._internal_text());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_suggest_invite_name(from._internal_suggest_invite_name());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_share_lobby_passkey(from._internal_share_lobby_passkey());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_set_suggest_pick_hero_role(from._internal_suggest_pick_hero_role());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_dice_roll()->::CMsgDOTAChatMessage_DiceRoll::MergeFrom(
          from._internal_dice_roll());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_trivia_answer()->::CMsgDOTAChatMessage_TriviaAnswered::MergeFrom(
          from._internal_trivia_answer());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_mutable_player_draft_pick()->::CMsgDOTAChatMessage_PlayerDraftPick::MergeFrom(
          from._internal_player_draft_pick());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_mutable_chat_wheel_message()->::CMsgDOTAChatMessage_ChatWheelMessage::MergeFrom(
          from._internal_chat_wheel_message());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.channel_id_ = from._impl_.channel_id_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.account_id_ = from._impl_.account_id_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.timestamp_ = from._impl_.timestamp_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.suggest_invite_account_id_ = from._impl_.suggest_invite_account_id_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.fantasy_draft_owner_account_id_ = from._impl_.fantasy_draft_owner_account_id_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.fantasy_draft_player_account_id_ = from._impl_.fantasy_draft_player_account_id_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.event_id_ = from._impl_.event_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.event_points_ = from._impl_.event_points_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.share_profile_account_id_ = from._impl_.share_profile_account_id_;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.share_party_id_ = from._impl_.share_party_id_;
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_impl_.share_lobby_id_ = from._impl_.share_lobby_id_;
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_impl_.channel_user_id_ = from._impl_.channel_user_id_;
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_impl_.suggest_invite_to_lobby_ = from._impl_.suggest_invite_to_lobby_;
    }
    if (cached_has_bits & 0x00400000u) {
      _this->_impl_.coin_flip_ = from._impl_.coin_flip_;
    }
    if (cached_has_bits & 0x00800000u) {
      _this->_impl_.legacy_battle_cup_victory_ = from._impl_.legacy_battle_cup_victory_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      _this->_impl_.started_finding_match_ = from._impl_.started_finding_match_;
    }
    if (cached_has_bits & 0x02000000u) {
      _this->_impl_.share_lobby_custom_game_id_ = from._impl_.share_lobby_custom_game_id_;
    }
    if (cached_has_bits & 0x04000000u) {
      _this->_impl_.private_chat_channel_id_ = from._impl_.private_chat_channel_id_;
    }
    if (cached_has_bits & 0x08000000u) {
      _this->_impl_.status_ = from._impl_.status_;
    }
    if (cached_has_bits & 0x10000000u) {
      _this->_impl_.badge_level_ = from._impl_.badge_level_;
    }
    if (cached_has_bits & 0x20000000u) {
      _this->_impl_.suggest_pick_hero_id_ = from._impl_.suggest_pick_hero_id_;
    }
    if (cached_has_bits & 0x40000000u) {
      _this->_impl_.battle_cup_streak_ = from._impl_.battle_cup_streak_;
    }
    if (cached_has_bits & 0x80000000u) {
      _this->_impl_.suggest_ban_hero_id_ = from._impl_.suggest_ban_hero_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._impl_._has_bits_[1];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.chat_flags_ = from._impl_.chat_flags_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.ctrl_is_down_ = from._impl_.ctrl_is_down_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.favorite_team_id_ = from._impl_.favorite_team_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.favorite_team_quality_ = from._impl_.favorite_team_quality_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.suggest_player_draft_pick_ = from._impl_.suggest_player_draft_pick_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.player_id_ = from._impl_.player_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.requested_ability_id_ = from._impl_.requested_ability_id_;
    }
    _this->_impl_._has_bits_[1] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgDOTAChatMessage::CopyFrom(const CMsgDOTAChatMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAChatMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAChatMessage::IsInitialized() const {
  return true;
}

void CMsgDOTAChatMessage::InternalSwap(CMsgDOTAChatMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_._has_bits_[1], other->_impl_._has_bits_[1]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.persona_name_, lhs_arena,
      &other->_impl_.persona_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.text_, lhs_arena,
      &other->_impl_.text_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.suggest_invite_name_, lhs_arena,
      &other->_impl_.suggest_invite_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.share_lobby_passkey_, lhs_arena,
      &other->_impl_.share_lobby_passkey_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.suggest_pick_hero_role_, lhs_arena,
      &other->_impl_.suggest_pick_hero_role_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTAChatMessage, _impl_.favorite_team_quality_)
      + sizeof(CMsgDOTAChatMessage::_impl_.favorite_team_quality_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTAChatMessage, _impl_.dice_roll_)>(
          reinterpret_cast<char*>(&_impl_.dice_roll_),
          reinterpret_cast<char*>(&other->_impl_.dice_roll_));
  swap(_impl_.suggest_player_draft_pick_, other->_impl_.suggest_player_draft_pick_);
  swap(_impl_.player_id_, other->_impl_.player_id_);
  swap(_impl_.requested_ability_id_, other->_impl_.requested_ability_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAChatMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fchat_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fchat_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fchat_2eproto[13]);
}

// ===================================================================

class CMsgDOTAChatMember::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAChatMember>()._impl_._has_bits_);
  static void set_has_steam_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_persona_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_channel_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgDOTAChatMember::CMsgDOTAChatMember(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAChatMember)
}
CMsgDOTAChatMember::CMsgDOTAChatMember(const CMsgDOTAChatMember& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgDOTAChatMember* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.persona_name_){}
    , decltype(_impl_.steam_id_){}
    , decltype(_impl_.channel_user_id_){}
    , decltype(_impl_.status_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.persona_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.persona_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_persona_name()) {
    _this->_impl_.persona_name_.Set(from._internal_persona_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.steam_id_, &from._impl_.steam_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.status_) -
    reinterpret_cast<char*>(&_impl_.steam_id_)) + sizeof(_impl_.status_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAChatMember)
}

inline void CMsgDOTAChatMember::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.persona_name_){}
    , decltype(_impl_.steam_id_){uint64_t{0u}}
    , decltype(_impl_.channel_user_id_){0u}
    , decltype(_impl_.status_){0u}
  };
  _impl_.persona_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.persona_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgDOTAChatMember::~CMsgDOTAChatMember() {
  // @@protoc_insertion_point(destructor:CMsgDOTAChatMember)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgDOTAChatMember::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.persona_name_.Destroy();
}

void CMsgDOTAChatMember::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgDOTAChatMember::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAChatMember)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.persona_name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&_impl_.steam_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.status_) -
        reinterpret_cast<char*>(&_impl_.steam_id_)) + sizeof(_impl_.status_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAChatMember::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 steam_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_steam_id(&has_bits);
          _impl_.steam_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional string persona_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_persona_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgDOTAChatMember.persona_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 channel_user_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_channel_user_id(&has_bits);
          _impl_.channel_user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 status = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_status(&has_bits);
          _impl_.status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgDOTAChatMember::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAChatMember)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steam_id(), target);
  }

  // optional string persona_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_persona_name().data(), static_cast<int>(this->_internal_persona_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTAChatMember.persona_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_persona_name(), target);
  }

  // optional uint32 channel_user_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_channel_user_id(), target);
  }

  // optional uint32 status = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAChatMember)
  return target;
}

size_t CMsgDOTAChatMember::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAChatMember)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string persona_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_persona_name());
    }

    // optional fixed64 steam_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional uint32 channel_user_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_channel_user_id());
    }

    // optional uint32 status = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_status());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgDOTAChatMember::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgDOTAChatMember::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgDOTAChatMember::GetClassData() const { return &_class_data_; }


void CMsgDOTAChatMember::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgDOTAChatMember*>(&to_msg);
  auto& from = static_cast<const CMsgDOTAChatMember&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAChatMember)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_persona_name(from._internal_persona_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.steam_id_ = from._impl_.steam_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.channel_user_id_ = from._impl_.channel_user_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.status_ = from._impl_.status_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgDOTAChatMember::CopyFrom(const CMsgDOTAChatMember& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAChatMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAChatMember::IsInitialized() const {
  return true;
}

void CMsgDOTAChatMember::InternalSwap(CMsgDOTAChatMember* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.persona_name_, lhs_arena,
      &other->_impl_.persona_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTAChatMember, _impl_.status_)
      + sizeof(CMsgDOTAChatMember::_impl_.status_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTAChatMember, _impl_.steam_id_)>(
          reinterpret_cast<char*>(&_impl_.steam_id_),
          reinterpret_cast<char*>(&other->_impl_.steam_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAChatMember::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fchat_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fchat_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fchat_2eproto[14]);
}

// ===================================================================

class CMsgDOTAJoinChatChannelResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAJoinChatChannelResponse>()._impl_._has_bits_);
  static void set_has_response(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_channel_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_channel_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_max_members(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_channel_type(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_gc_initiated_join(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_channel_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_welcome_message(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_special_privileges(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

CMsgDOTAJoinChatChannelResponse::CMsgDOTAJoinChatChannelResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAJoinChatChannelResponse)
}
CMsgDOTAJoinChatChannelResponse::CMsgDOTAJoinChatChannelResponse(const CMsgDOTAJoinChatChannelResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgDOTAJoinChatChannelResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.members_){from._impl_.members_}
    , decltype(_impl_.channel_name_){}
    , decltype(_impl_.welcome_message_){}
    , decltype(_impl_.response_){}
    , decltype(_impl_.max_members_){}
    , decltype(_impl_.channel_id_){}
    , decltype(_impl_.channel_type_){}
    , decltype(_impl_.result_){}
    , decltype(_impl_.gc_initiated_join_){}
    , decltype(_impl_.channel_user_id_){}
    , decltype(_impl_.special_privileges_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.channel_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.channel_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_channel_name()) {
    _this->_impl_.channel_name_.Set(from._internal_channel_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.welcome_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.welcome_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_welcome_message()) {
    _this->_impl_.welcome_message_.Set(from._internal_welcome_message(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.response_, &from._impl_.response_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.special_privileges_) -
    reinterpret_cast<char*>(&_impl_.response_)) + sizeof(_impl_.special_privileges_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAJoinChatChannelResponse)
}

inline void CMsgDOTAJoinChatChannelResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.members_){arena}
    , decltype(_impl_.channel_name_){}
    , decltype(_impl_.welcome_message_){}
    , decltype(_impl_.response_){0u}
    , decltype(_impl_.max_members_){0u}
    , decltype(_impl_.channel_id_){uint64_t{0u}}
    , decltype(_impl_.channel_type_){0}
    , decltype(_impl_.result_){0}
    , decltype(_impl_.gc_initiated_join_){false}
    , decltype(_impl_.channel_user_id_){0u}
    , decltype(_impl_.special_privileges_){0}
  };
  _impl_.channel_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.channel_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.welcome_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.welcome_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgDOTAJoinChatChannelResponse::~CMsgDOTAJoinChatChannelResponse() {
  // @@protoc_insertion_point(destructor:CMsgDOTAJoinChatChannelResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgDOTAJoinChatChannelResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.members_.~RepeatedPtrField();
  _impl_.channel_name_.Destroy();
  _impl_.welcome_message_.Destroy();
}

void CMsgDOTAJoinChatChannelResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgDOTAJoinChatChannelResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAJoinChatChannelResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.members_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.channel_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.welcome_message_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&_impl_.response_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.gc_initiated_join_) -
        reinterpret_cast<char*>(&_impl_.response_)) + sizeof(_impl_.gc_initiated_join_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&_impl_.channel_user_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.special_privileges_) -
        reinterpret_cast<char*>(&_impl_.channel_user_id_)) + sizeof(_impl_.special_privileges_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAJoinChatChannelResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 response = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_response(&has_bits);
          _impl_.response_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string channel_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_channel_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgDOTAJoinChatChannelResponse.channel_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 channel_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_channel_id(&has_bits);
          _impl_.channel_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 max_members = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_max_members(&has_bits);
          _impl_.max_members_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgDOTAChatMember members = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_members(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .DOTAChatChannelType_t channel_type = 6 [default = DOTAChannelType_Regional];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::DOTAChatChannelType_t_IsValid(val))) {
            _internal_set_channel_type(static_cast<::DOTAChatChannelType_t>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgDOTAJoinChatChannelResponse.Result result = 7 [default = JOIN_SUCCESS];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgDOTAJoinChatChannelResponse_Result_IsValid(val))) {
            _internal_set_result(static_cast<::CMsgDOTAJoinChatChannelResponse_Result>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(7, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bool gc_initiated_join = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_gc_initiated_join(&has_bits);
          _impl_.gc_initiated_join_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 channel_user_id = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_channel_user_id(&has_bits);
          _impl_.channel_user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string welcome_message = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_welcome_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgDOTAJoinChatChannelResponse.welcome_message");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .EChatSpecialPrivileges special_privileges = 11 [default = k_EChatSpecialPrivileges_None];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EChatSpecialPrivileges_IsValid(val))) {
            _internal_set_special_privileges(static_cast<::EChatSpecialPrivileges>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(11, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgDOTAJoinChatChannelResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAJoinChatChannelResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 response = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_response(), target);
  }

  // optional string channel_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_channel_name().data(), static_cast<int>(this->_internal_channel_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTAJoinChatChannelResponse.channel_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_channel_name(), target);
  }

  // optional fixed64 channel_id = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(3, this->_internal_channel_id(), target);
  }

  // optional uint32 max_members = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_max_members(), target);
  }

  // repeated .CMsgDOTAChatMember members = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_members_size()); i < n; i++) {
    const auto& repfield = this->_internal_members(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .DOTAChatChannelType_t channel_type = 6 [default = DOTAChannelType_Regional];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_channel_type(), target);
  }

  // optional .CMsgDOTAJoinChatChannelResponse.Result result = 7 [default = JOIN_SUCCESS];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      7, this->_internal_result(), target);
  }

  // optional bool gc_initiated_join = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_gc_initiated_join(), target);
  }

  // optional uint32 channel_user_id = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_channel_user_id(), target);
  }

  // optional string welcome_message = 10;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_welcome_message().data(), static_cast<int>(this->_internal_welcome_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTAJoinChatChannelResponse.welcome_message");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_welcome_message(), target);
  }

  // optional .EChatSpecialPrivileges special_privileges = 11 [default = k_EChatSpecialPrivileges_None];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      11, this->_internal_special_privileges(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAJoinChatChannelResponse)
  return target;
}

size_t CMsgDOTAJoinChatChannelResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAJoinChatChannelResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgDOTAChatMember members = 5;
  total_size += 1UL * this->_internal_members_size();
  for (const auto& msg : this->_impl_.members_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string channel_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_channel_name());
    }

    // optional string welcome_message = 10;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_welcome_message());
    }

    // optional uint32 response = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_response());
    }

    // optional uint32 max_members = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_max_members());
    }

    // optional fixed64 channel_id = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional .DOTAChatChannelType_t channel_type = 6 [default = DOTAChannelType_Regional];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_channel_type());
    }

    // optional .CMsgDOTAJoinChatChannelResponse.Result result = 7 [default = JOIN_SUCCESS];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_result());
    }

    // optional bool gc_initiated_join = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional uint32 channel_user_id = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_channel_user_id());
    }

    // optional .EChatSpecialPrivileges special_privileges = 11 [default = k_EChatSpecialPrivileges_None];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_special_privileges());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgDOTAJoinChatChannelResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgDOTAJoinChatChannelResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgDOTAJoinChatChannelResponse::GetClassData() const { return &_class_data_; }


void CMsgDOTAJoinChatChannelResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgDOTAJoinChatChannelResponse*>(&to_msg);
  auto& from = static_cast<const CMsgDOTAJoinChatChannelResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAJoinChatChannelResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.members_.MergeFrom(from._impl_.members_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_channel_name(from._internal_channel_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_welcome_message(from._internal_welcome_message());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.response_ = from._impl_.response_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.max_members_ = from._impl_.max_members_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.channel_id_ = from._impl_.channel_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.channel_type_ = from._impl_.channel_type_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.result_ = from._impl_.result_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.gc_initiated_join_ = from._impl_.gc_initiated_join_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.channel_user_id_ = from._impl_.channel_user_id_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.special_privileges_ = from._impl_.special_privileges_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgDOTAJoinChatChannelResponse::CopyFrom(const CMsgDOTAJoinChatChannelResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAJoinChatChannelResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAJoinChatChannelResponse::IsInitialized() const {
  return true;
}

void CMsgDOTAJoinChatChannelResponse::InternalSwap(CMsgDOTAJoinChatChannelResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.members_.InternalSwap(&other->_impl_.members_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.channel_name_, lhs_arena,
      &other->_impl_.channel_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.welcome_message_, lhs_arena,
      &other->_impl_.welcome_message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTAJoinChatChannelResponse, _impl_.special_privileges_)
      + sizeof(CMsgDOTAJoinChatChannelResponse::_impl_.special_privileges_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTAJoinChatChannelResponse, _impl_.response_)>(
          reinterpret_cast<char*>(&_impl_.response_),
          reinterpret_cast<char*>(&other->_impl_.response_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAJoinChatChannelResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fchat_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fchat_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fchat_2eproto[15]);
}

// ===================================================================

class CMsgDOTAOtherJoinedChatChannel::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAOtherJoinedChatChannel>()._impl_._has_bits_);
  static void set_has_channel_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_persona_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_steam_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_channel_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CMsgDOTAOtherJoinedChatChannel::CMsgDOTAOtherJoinedChatChannel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAOtherJoinedChatChannel)
}
CMsgDOTAOtherJoinedChatChannel::CMsgDOTAOtherJoinedChatChannel(const CMsgDOTAOtherJoinedChatChannel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgDOTAOtherJoinedChatChannel* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.persona_name_){}
    , decltype(_impl_.channel_id_){}
    , decltype(_impl_.steam_id_){}
    , decltype(_impl_.channel_user_id_){}
    , decltype(_impl_.status_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.persona_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.persona_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_persona_name()) {
    _this->_impl_.persona_name_.Set(from._internal_persona_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.channel_id_, &from._impl_.channel_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.status_) -
    reinterpret_cast<char*>(&_impl_.channel_id_)) + sizeof(_impl_.status_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAOtherJoinedChatChannel)
}

inline void CMsgDOTAOtherJoinedChatChannel::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.persona_name_){}
    , decltype(_impl_.channel_id_){uint64_t{0u}}
    , decltype(_impl_.steam_id_){uint64_t{0u}}
    , decltype(_impl_.channel_user_id_){0u}
    , decltype(_impl_.status_){0u}
  };
  _impl_.persona_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.persona_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgDOTAOtherJoinedChatChannel::~CMsgDOTAOtherJoinedChatChannel() {
  // @@protoc_insertion_point(destructor:CMsgDOTAOtherJoinedChatChannel)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgDOTAOtherJoinedChatChannel::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.persona_name_.Destroy();
}

void CMsgDOTAOtherJoinedChatChannel::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgDOTAOtherJoinedChatChannel::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAOtherJoinedChatChannel)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.persona_name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&_impl_.channel_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.status_) -
        reinterpret_cast<char*>(&_impl_.channel_id_)) + sizeof(_impl_.status_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAOtherJoinedChatChannel::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 channel_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_channel_id(&has_bits);
          _impl_.channel_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional string persona_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_persona_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgDOTAOtherJoinedChatChannel.persona_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 steam_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_steam_id(&has_bits);
          _impl_.steam_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 channel_user_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_channel_user_id(&has_bits);
          _impl_.channel_user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 status = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_status(&has_bits);
          _impl_.status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgDOTAOtherJoinedChatChannel::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAOtherJoinedChatChannel)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional fixed64 channel_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(1, this->_internal_channel_id(), target);
  }

  // optional string persona_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_persona_name().data(), static_cast<int>(this->_internal_persona_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTAOtherJoinedChatChannel.persona_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_persona_name(), target);
  }

  // optional fixed64 steam_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(3, this->_internal_steam_id(), target);
  }

  // optional uint32 channel_user_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_channel_user_id(), target);
  }

  // optional uint32 status = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAOtherJoinedChatChannel)
  return target;
}

size_t CMsgDOTAOtherJoinedChatChannel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAOtherJoinedChatChannel)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string persona_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_persona_name());
    }

    // optional fixed64 channel_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional fixed64 steam_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional uint32 channel_user_id = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_channel_user_id());
    }

    // optional uint32 status = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_status());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgDOTAOtherJoinedChatChannel::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgDOTAOtherJoinedChatChannel::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgDOTAOtherJoinedChatChannel::GetClassData() const { return &_class_data_; }


void CMsgDOTAOtherJoinedChatChannel::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgDOTAOtherJoinedChatChannel*>(&to_msg);
  auto& from = static_cast<const CMsgDOTAOtherJoinedChatChannel&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAOtherJoinedChatChannel)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_persona_name(from._internal_persona_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.channel_id_ = from._impl_.channel_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.steam_id_ = from._impl_.steam_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.channel_user_id_ = from._impl_.channel_user_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.status_ = from._impl_.status_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgDOTAOtherJoinedChatChannel::CopyFrom(const CMsgDOTAOtherJoinedChatChannel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAOtherJoinedChatChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAOtherJoinedChatChannel::IsInitialized() const {
  return true;
}

void CMsgDOTAOtherJoinedChatChannel::InternalSwap(CMsgDOTAOtherJoinedChatChannel* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.persona_name_, lhs_arena,
      &other->_impl_.persona_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTAOtherJoinedChatChannel, _impl_.status_)
      + sizeof(CMsgDOTAOtherJoinedChatChannel::_impl_.status_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTAOtherJoinedChatChannel, _impl_.channel_id_)>(
          reinterpret_cast<char*>(&_impl_.channel_id_),
          reinterpret_cast<char*>(&other->_impl_.channel_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAOtherJoinedChatChannel::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fchat_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fchat_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fchat_2eproto[16]);
}

// ===================================================================

class CMsgDOTAOtherLeftChatChannel::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAOtherLeftChatChannel>()._impl_._has_bits_);
  static void set_has_channel_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_steam_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_channel_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgDOTAOtherLeftChatChannel::CMsgDOTAOtherLeftChatChannel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAOtherLeftChatChannel)
}
CMsgDOTAOtherLeftChatChannel::CMsgDOTAOtherLeftChatChannel(const CMsgDOTAOtherLeftChatChannel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgDOTAOtherLeftChatChannel* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.channel_id_){}
    , decltype(_impl_.steam_id_){}
    , decltype(_impl_.channel_user_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.channel_id_, &from._impl_.channel_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.channel_user_id_) -
    reinterpret_cast<char*>(&_impl_.channel_id_)) + sizeof(_impl_.channel_user_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAOtherLeftChatChannel)
}

inline void CMsgDOTAOtherLeftChatChannel::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.channel_id_){uint64_t{0u}}
    , decltype(_impl_.steam_id_){uint64_t{0u}}
    , decltype(_impl_.channel_user_id_){0u}
  };
}

CMsgDOTAOtherLeftChatChannel::~CMsgDOTAOtherLeftChatChannel() {
  // @@protoc_insertion_point(destructor:CMsgDOTAOtherLeftChatChannel)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgDOTAOtherLeftChatChannel::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgDOTAOtherLeftChatChannel::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgDOTAOtherLeftChatChannel::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAOtherLeftChatChannel)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.channel_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.channel_user_id_) -
        reinterpret_cast<char*>(&_impl_.channel_id_)) + sizeof(_impl_.channel_user_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAOtherLeftChatChannel::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 channel_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_channel_id(&has_bits);
          _impl_.channel_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 steam_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_steam_id(&has_bits);
          _impl_.steam_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 channel_user_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_channel_user_id(&has_bits);
          _impl_.channel_user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgDOTAOtherLeftChatChannel::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAOtherLeftChatChannel)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional fixed64 channel_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(1, this->_internal_channel_id(), target);
  }

  // optional fixed64 steam_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(2, this->_internal_steam_id(), target);
  }

  // optional uint32 channel_user_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_channel_user_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAOtherLeftChatChannel)
  return target;
}

size_t CMsgDOTAOtherLeftChatChannel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAOtherLeftChatChannel)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional fixed64 channel_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional fixed64 steam_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional uint32 channel_user_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_channel_user_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgDOTAOtherLeftChatChannel::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgDOTAOtherLeftChatChannel::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgDOTAOtherLeftChatChannel::GetClassData() const { return &_class_data_; }


void CMsgDOTAOtherLeftChatChannel::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgDOTAOtherLeftChatChannel*>(&to_msg);
  auto& from = static_cast<const CMsgDOTAOtherLeftChatChannel&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAOtherLeftChatChannel)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.channel_id_ = from._impl_.channel_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.steam_id_ = from._impl_.steam_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.channel_user_id_ = from._impl_.channel_user_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgDOTAOtherLeftChatChannel::CopyFrom(const CMsgDOTAOtherLeftChatChannel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAOtherLeftChatChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAOtherLeftChatChannel::IsInitialized() const {
  return true;
}

void CMsgDOTAOtherLeftChatChannel::InternalSwap(CMsgDOTAOtherLeftChatChannel* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTAOtherLeftChatChannel, _impl_.channel_user_id_)
      + sizeof(CMsgDOTAOtherLeftChatChannel::_impl_.channel_user_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTAOtherLeftChatChannel, _impl_.channel_id_)>(
          reinterpret_cast<char*>(&_impl_.channel_id_),
          reinterpret_cast<char*>(&other->_impl_.channel_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAOtherLeftChatChannel::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fchat_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fchat_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fchat_2eproto[17]);
}

// ===================================================================

class CMsgDOTARequestChatChannelList::_Internal {
 public:
};

CMsgDOTARequestChatChannelList::CMsgDOTARequestChatChannelList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CMsgDOTARequestChatChannelList)
}
CMsgDOTARequestChatChannelList::CMsgDOTARequestChatChannelList(const CMsgDOTARequestChatChannelList& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  CMsgDOTARequestChatChannelList* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTARequestChatChannelList)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgDOTARequestChatChannelList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgDOTARequestChatChannelList::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTARequestChatChannelList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fchat_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fchat_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fchat_2eproto[18]);
}

// ===================================================================

class CMsgDOTARequestChatChannelListResponse_ChatChannel::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTARequestChatChannelListResponse_ChatChannel>()._impl_._has_bits_);
  static void set_has_channel_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_num_members(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_channel_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgDOTARequestChatChannelListResponse_ChatChannel::CMsgDOTARequestChatChannelListResponse_ChatChannel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTARequestChatChannelListResponse.ChatChannel)
}
CMsgDOTARequestChatChannelListResponse_ChatChannel::CMsgDOTARequestChatChannelListResponse_ChatChannel(const CMsgDOTARequestChatChannelListResponse_ChatChannel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgDOTARequestChatChannelListResponse_ChatChannel* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.channel_name_){}
    , decltype(_impl_.num_members_){}
    , decltype(_impl_.channel_type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.channel_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.channel_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_channel_name()) {
    _this->_impl_.channel_name_.Set(from._internal_channel_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.num_members_, &from._impl_.num_members_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.channel_type_) -
    reinterpret_cast<char*>(&_impl_.num_members_)) + sizeof(_impl_.channel_type_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTARequestChatChannelListResponse.ChatChannel)
}

inline void CMsgDOTARequestChatChannelListResponse_ChatChannel::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.channel_name_){}
    , decltype(_impl_.num_members_){0u}
    , decltype(_impl_.channel_type_){0}
  };
  _impl_.channel_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.channel_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgDOTARequestChatChannelListResponse_ChatChannel::~CMsgDOTARequestChatChannelListResponse_ChatChannel() {
  // @@protoc_insertion_point(destructor:CMsgDOTARequestChatChannelListResponse.ChatChannel)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgDOTARequestChatChannelListResponse_ChatChannel::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.channel_name_.Destroy();
}

void CMsgDOTARequestChatChannelListResponse_ChatChannel::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgDOTARequestChatChannelListResponse_ChatChannel::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTARequestChatChannelListResponse.ChatChannel)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.channel_name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.num_members_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.channel_type_) -
        reinterpret_cast<char*>(&_impl_.num_members_)) + sizeof(_impl_.channel_type_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTARequestChatChannelListResponse_ChatChannel::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string channel_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_channel_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgDOTARequestChatChannelListResponse.ChatChannel.channel_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 num_members = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_num_members(&has_bits);
          _impl_.num_members_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .DOTAChatChannelType_t channel_type = 3 [default = DOTAChannelType_Regional];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::DOTAChatChannelType_t_IsValid(val))) {
            _internal_set_channel_type(static_cast<::DOTAChatChannelType_t>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgDOTARequestChatChannelListResponse_ChatChannel::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTARequestChatChannelListResponse.ChatChannel)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string channel_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_channel_name().data(), static_cast<int>(this->_internal_channel_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTARequestChatChannelListResponse.ChatChannel.channel_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_channel_name(), target);
  }

  // optional uint32 num_members = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_num_members(), target);
  }

  // optional .DOTAChatChannelType_t channel_type = 3 [default = DOTAChannelType_Regional];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_channel_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTARequestChatChannelListResponse.ChatChannel)
  return target;
}

size_t CMsgDOTARequestChatChannelListResponse_ChatChannel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTARequestChatChannelListResponse.ChatChannel)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string channel_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_channel_name());
    }

    // optional uint32 num_members = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_num_members());
    }

    // optional .DOTAChatChannelType_t channel_type = 3 [default = DOTAChannelType_Regional];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_channel_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgDOTARequestChatChannelListResponse_ChatChannel::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgDOTARequestChatChannelListResponse_ChatChannel::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgDOTARequestChatChannelListResponse_ChatChannel::GetClassData() const { return &_class_data_; }


void CMsgDOTARequestChatChannelListResponse_ChatChannel::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgDOTARequestChatChannelListResponse_ChatChannel*>(&to_msg);
  auto& from = static_cast<const CMsgDOTARequestChatChannelListResponse_ChatChannel&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTARequestChatChannelListResponse.ChatChannel)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_channel_name(from._internal_channel_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.num_members_ = from._impl_.num_members_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.channel_type_ = from._impl_.channel_type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgDOTARequestChatChannelListResponse_ChatChannel::CopyFrom(const CMsgDOTARequestChatChannelListResponse_ChatChannel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTARequestChatChannelListResponse.ChatChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTARequestChatChannelListResponse_ChatChannel::IsInitialized() const {
  return true;
}

void CMsgDOTARequestChatChannelListResponse_ChatChannel::InternalSwap(CMsgDOTARequestChatChannelListResponse_ChatChannel* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.channel_name_, lhs_arena,
      &other->_impl_.channel_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTARequestChatChannelListResponse_ChatChannel, _impl_.channel_type_)
      + sizeof(CMsgDOTARequestChatChannelListResponse_ChatChannel::_impl_.channel_type_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTARequestChatChannelListResponse_ChatChannel, _impl_.num_members_)>(
          reinterpret_cast<char*>(&_impl_.num_members_),
          reinterpret_cast<char*>(&other->_impl_.num_members_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTARequestChatChannelListResponse_ChatChannel::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fchat_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fchat_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fchat_2eproto[19]);
}

// ===================================================================

class CMsgDOTARequestChatChannelListResponse::_Internal {
 public:
};

CMsgDOTARequestChatChannelListResponse::CMsgDOTARequestChatChannelListResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTARequestChatChannelListResponse)
}
CMsgDOTARequestChatChannelListResponse::CMsgDOTARequestChatChannelListResponse(const CMsgDOTARequestChatChannelListResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgDOTARequestChatChannelListResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.channels_){from._impl_.channels_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTARequestChatChannelListResponse)
}

inline void CMsgDOTARequestChatChannelListResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.channels_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CMsgDOTARequestChatChannelListResponse::~CMsgDOTARequestChatChannelListResponse() {
  // @@protoc_insertion_point(destructor:CMsgDOTARequestChatChannelListResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgDOTARequestChatChannelListResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.channels_.~RepeatedPtrField();
}

void CMsgDOTARequestChatChannelListResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgDOTARequestChatChannelListResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTARequestChatChannelListResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.channels_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTARequestChatChannelListResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CMsgDOTARequestChatChannelListResponse.ChatChannel channels = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_channels(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgDOTARequestChatChannelListResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTARequestChatChannelListResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgDOTARequestChatChannelListResponse.ChatChannel channels = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_channels_size()); i < n; i++) {
    const auto& repfield = this->_internal_channels(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTARequestChatChannelListResponse)
  return target;
}

size_t CMsgDOTARequestChatChannelListResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTARequestChatChannelListResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgDOTARequestChatChannelListResponse.ChatChannel channels = 1;
  total_size += 1UL * this->_internal_channels_size();
  for (const auto& msg : this->_impl_.channels_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgDOTARequestChatChannelListResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgDOTARequestChatChannelListResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgDOTARequestChatChannelListResponse::GetClassData() const { return &_class_data_; }


void CMsgDOTARequestChatChannelListResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgDOTARequestChatChannelListResponse*>(&to_msg);
  auto& from = static_cast<const CMsgDOTARequestChatChannelListResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTARequestChatChannelListResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.channels_.MergeFrom(from._impl_.channels_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgDOTARequestChatChannelListResponse::CopyFrom(const CMsgDOTARequestChatChannelListResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTARequestChatChannelListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTARequestChatChannelListResponse::IsInitialized() const {
  return true;
}

void CMsgDOTARequestChatChannelListResponse::InternalSwap(CMsgDOTARequestChatChannelListResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.channels_.InternalSwap(&other->_impl_.channels_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTARequestChatChannelListResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fchat_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fchat_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fchat_2eproto[20]);
}

// ===================================================================

class CMsgDOTAChatGetUserListResponse_Member::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAChatGetUserListResponse_Member>()._impl_._has_bits_);
  static void set_has_steam_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_persona_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_channel_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgDOTAChatGetUserListResponse_Member::CMsgDOTAChatGetUserListResponse_Member(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAChatGetUserListResponse.Member)
}
CMsgDOTAChatGetUserListResponse_Member::CMsgDOTAChatGetUserListResponse_Member(const CMsgDOTAChatGetUserListResponse_Member& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgDOTAChatGetUserListResponse_Member* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.persona_name_){}
    , decltype(_impl_.steam_id_){}
    , decltype(_impl_.channel_user_id_){}
    , decltype(_impl_.status_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.persona_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.persona_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_persona_name()) {
    _this->_impl_.persona_name_.Set(from._internal_persona_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.steam_id_, &from._impl_.steam_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.status_) -
    reinterpret_cast<char*>(&_impl_.steam_id_)) + sizeof(_impl_.status_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAChatGetUserListResponse.Member)
}

inline void CMsgDOTAChatGetUserListResponse_Member::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.persona_name_){}
    , decltype(_impl_.steam_id_){uint64_t{0u}}
    , decltype(_impl_.channel_user_id_){0u}
    , decltype(_impl_.status_){0u}
  };
  _impl_.persona_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.persona_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgDOTAChatGetUserListResponse_Member::~CMsgDOTAChatGetUserListResponse_Member() {
  // @@protoc_insertion_point(destructor:CMsgDOTAChatGetUserListResponse.Member)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgDOTAChatGetUserListResponse_Member::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.persona_name_.Destroy();
}

void CMsgDOTAChatGetUserListResponse_Member::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgDOTAChatGetUserListResponse_Member::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAChatGetUserListResponse.Member)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.persona_name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&_impl_.steam_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.status_) -
        reinterpret_cast<char*>(&_impl_.steam_id_)) + sizeof(_impl_.status_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAChatGetUserListResponse_Member::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 steam_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_steam_id(&has_bits);
          _impl_.steam_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional string persona_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_persona_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgDOTAChatGetUserListResponse.Member.persona_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 channel_user_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_channel_user_id(&has_bits);
          _impl_.channel_user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 status = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_status(&has_bits);
          _impl_.status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgDOTAChatGetUserListResponse_Member::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAChatGetUserListResponse.Member)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steam_id(), target);
  }

  // optional string persona_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_persona_name().data(), static_cast<int>(this->_internal_persona_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTAChatGetUserListResponse.Member.persona_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_persona_name(), target);
  }

  // optional uint32 channel_user_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_channel_user_id(), target);
  }

  // optional uint32 status = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAChatGetUserListResponse.Member)
  return target;
}

size_t CMsgDOTAChatGetUserListResponse_Member::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAChatGetUserListResponse.Member)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string persona_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_persona_name());
    }

    // optional fixed64 steam_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional uint32 channel_user_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_channel_user_id());
    }

    // optional uint32 status = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_status());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgDOTAChatGetUserListResponse_Member::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgDOTAChatGetUserListResponse_Member::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgDOTAChatGetUserListResponse_Member::GetClassData() const { return &_class_data_; }


void CMsgDOTAChatGetUserListResponse_Member::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgDOTAChatGetUserListResponse_Member*>(&to_msg);
  auto& from = static_cast<const CMsgDOTAChatGetUserListResponse_Member&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAChatGetUserListResponse.Member)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_persona_name(from._internal_persona_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.steam_id_ = from._impl_.steam_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.channel_user_id_ = from._impl_.channel_user_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.status_ = from._impl_.status_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgDOTAChatGetUserListResponse_Member::CopyFrom(const CMsgDOTAChatGetUserListResponse_Member& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAChatGetUserListResponse.Member)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAChatGetUserListResponse_Member::IsInitialized() const {
  return true;
}

void CMsgDOTAChatGetUserListResponse_Member::InternalSwap(CMsgDOTAChatGetUserListResponse_Member* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.persona_name_, lhs_arena,
      &other->_impl_.persona_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTAChatGetUserListResponse_Member, _impl_.status_)
      + sizeof(CMsgDOTAChatGetUserListResponse_Member::_impl_.status_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTAChatGetUserListResponse_Member, _impl_.steam_id_)>(
          reinterpret_cast<char*>(&_impl_.steam_id_),
          reinterpret_cast<char*>(&other->_impl_.steam_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAChatGetUserListResponse_Member::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fchat_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fchat_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fchat_2eproto[21]);
}

// ===================================================================

class CMsgDOTAChatGetUserListResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAChatGetUserListResponse>()._impl_._has_bits_);
  static void set_has_channel_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgDOTAChatGetUserListResponse::CMsgDOTAChatGetUserListResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAChatGetUserListResponse)
}
CMsgDOTAChatGetUserListResponse::CMsgDOTAChatGetUserListResponse(const CMsgDOTAChatGetUserListResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgDOTAChatGetUserListResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.members_){from._impl_.members_}
    , decltype(_impl_.channel_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.channel_id_ = from._impl_.channel_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAChatGetUserListResponse)
}

inline void CMsgDOTAChatGetUserListResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.members_){arena}
    , decltype(_impl_.channel_id_){uint64_t{0u}}
  };
}

CMsgDOTAChatGetUserListResponse::~CMsgDOTAChatGetUserListResponse() {
  // @@protoc_insertion_point(destructor:CMsgDOTAChatGetUserListResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgDOTAChatGetUserListResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.members_.~RepeatedPtrField();
}

void CMsgDOTAChatGetUserListResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgDOTAChatGetUserListResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAChatGetUserListResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.members_.Clear();
  _impl_.channel_id_ = uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAChatGetUserListResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 channel_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_channel_id(&has_bits);
          _impl_.channel_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgDOTAChatGetUserListResponse.Member members = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_members(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgDOTAChatGetUserListResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAChatGetUserListResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional fixed64 channel_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(1, this->_internal_channel_id(), target);
  }

  // repeated .CMsgDOTAChatGetUserListResponse.Member members = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_members_size()); i < n; i++) {
    const auto& repfield = this->_internal_members(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAChatGetUserListResponse)
  return target;
}

size_t CMsgDOTAChatGetUserListResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAChatGetUserListResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgDOTAChatGetUserListResponse.Member members = 2;
  total_size += 1UL * this->_internal_members_size();
  for (const auto& msg : this->_impl_.members_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional fixed64 channel_id = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgDOTAChatGetUserListResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgDOTAChatGetUserListResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgDOTAChatGetUserListResponse::GetClassData() const { return &_class_data_; }


void CMsgDOTAChatGetUserListResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgDOTAChatGetUserListResponse*>(&to_msg);
  auto& from = static_cast<const CMsgDOTAChatGetUserListResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAChatGetUserListResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.members_.MergeFrom(from._impl_.members_);
  if (from._internal_has_channel_id()) {
    _this->_internal_set_channel_id(from._internal_channel_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgDOTAChatGetUserListResponse::CopyFrom(const CMsgDOTAChatGetUserListResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAChatGetUserListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAChatGetUserListResponse::IsInitialized() const {
  return true;
}

void CMsgDOTAChatGetUserListResponse::InternalSwap(CMsgDOTAChatGetUserListResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.members_.InternalSwap(&other->_impl_.members_);
  swap(_impl_.channel_id_, other->_impl_.channel_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAChatGetUserListResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fchat_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fchat_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fchat_2eproto[22]);
}

// ===================================================================

class CMsgDOTAChatGetMemberCount::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAChatGetMemberCount>()._impl_._has_bits_);
  static void set_has_channel_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_channel_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgDOTAChatGetMemberCount::CMsgDOTAChatGetMemberCount(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAChatGetMemberCount)
}
CMsgDOTAChatGetMemberCount::CMsgDOTAChatGetMemberCount(const CMsgDOTAChatGetMemberCount& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgDOTAChatGetMemberCount* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.channel_name_){}
    , decltype(_impl_.channel_type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.channel_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.channel_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_channel_name()) {
    _this->_impl_.channel_name_.Set(from._internal_channel_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.channel_type_ = from._impl_.channel_type_;
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAChatGetMemberCount)
}

inline void CMsgDOTAChatGetMemberCount::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.channel_name_){}
    , decltype(_impl_.channel_type_){0}
  };
  _impl_.channel_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.channel_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgDOTAChatGetMemberCount::~CMsgDOTAChatGetMemberCount() {
  // @@protoc_insertion_point(destructor:CMsgDOTAChatGetMemberCount)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgDOTAChatGetMemberCount::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.channel_name_.Destroy();
}

void CMsgDOTAChatGetMemberCount::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgDOTAChatGetMemberCount::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAChatGetMemberCount)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.channel_name_.ClearNonDefaultToEmpty();
  }
  _impl_.channel_type_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAChatGetMemberCount::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string channel_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_channel_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgDOTAChatGetMemberCount.channel_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .DOTAChatChannelType_t channel_type = 2 [default = DOTAChannelType_Regional];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::DOTAChatChannelType_t_IsValid(val))) {
            _internal_set_channel_type(static_cast<::DOTAChatChannelType_t>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgDOTAChatGetMemberCount::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAChatGetMemberCount)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string channel_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_channel_name().data(), static_cast<int>(this->_internal_channel_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTAChatGetMemberCount.channel_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_channel_name(), target);
  }

  // optional .DOTAChatChannelType_t channel_type = 2 [default = DOTAChannelType_Regional];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_channel_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAChatGetMemberCount)
  return target;
}

size_t CMsgDOTAChatGetMemberCount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAChatGetMemberCount)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string channel_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_channel_name());
    }

    // optional .DOTAChatChannelType_t channel_type = 2 [default = DOTAChannelType_Regional];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_channel_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgDOTAChatGetMemberCount::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgDOTAChatGetMemberCount::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgDOTAChatGetMemberCount::GetClassData() const { return &_class_data_; }


void CMsgDOTAChatGetMemberCount::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgDOTAChatGetMemberCount*>(&to_msg);
  auto& from = static_cast<const CMsgDOTAChatGetMemberCount&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAChatGetMemberCount)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_channel_name(from._internal_channel_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.channel_type_ = from._impl_.channel_type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgDOTAChatGetMemberCount::CopyFrom(const CMsgDOTAChatGetMemberCount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAChatGetMemberCount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAChatGetMemberCount::IsInitialized() const {
  return true;
}

void CMsgDOTAChatGetMemberCount::InternalSwap(CMsgDOTAChatGetMemberCount* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.channel_name_, lhs_arena,
      &other->_impl_.channel_name_, rhs_arena
  );
  swap(_impl_.channel_type_, other->_impl_.channel_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAChatGetMemberCount::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fchat_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fchat_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fchat_2eproto[23]);
}

// ===================================================================

class CMsgDOTAChatGetMemberCountResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAChatGetMemberCountResponse>()._impl_._has_bits_);
  static void set_has_channel_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_channel_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_member_count(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgDOTAChatGetMemberCountResponse::CMsgDOTAChatGetMemberCountResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAChatGetMemberCountResponse)
}
CMsgDOTAChatGetMemberCountResponse::CMsgDOTAChatGetMemberCountResponse(const CMsgDOTAChatGetMemberCountResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgDOTAChatGetMemberCountResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.channel_name_){}
    , decltype(_impl_.channel_type_){}
    , decltype(_impl_.member_count_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.channel_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.channel_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_channel_name()) {
    _this->_impl_.channel_name_.Set(from._internal_channel_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.channel_type_, &from._impl_.channel_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.member_count_) -
    reinterpret_cast<char*>(&_impl_.channel_type_)) + sizeof(_impl_.member_count_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAChatGetMemberCountResponse)
}

inline void CMsgDOTAChatGetMemberCountResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.channel_name_){}
    , decltype(_impl_.channel_type_){0}
    , decltype(_impl_.member_count_){0u}
  };
  _impl_.channel_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.channel_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgDOTAChatGetMemberCountResponse::~CMsgDOTAChatGetMemberCountResponse() {
  // @@protoc_insertion_point(destructor:CMsgDOTAChatGetMemberCountResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgDOTAChatGetMemberCountResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.channel_name_.Destroy();
}

void CMsgDOTAChatGetMemberCountResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgDOTAChatGetMemberCountResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAChatGetMemberCountResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.channel_name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.channel_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.member_count_) -
        reinterpret_cast<char*>(&_impl_.channel_type_)) + sizeof(_impl_.member_count_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAChatGetMemberCountResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string channel_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_channel_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgDOTAChatGetMemberCountResponse.channel_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .DOTAChatChannelType_t channel_type = 2 [default = DOTAChannelType_Regional];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::DOTAChatChannelType_t_IsValid(val))) {
            _internal_set_channel_type(static_cast<::DOTAChatChannelType_t>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 member_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_member_count(&has_bits);
          _impl_.member_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgDOTAChatGetMemberCountResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAChatGetMemberCountResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string channel_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_channel_name().data(), static_cast<int>(this->_internal_channel_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTAChatGetMemberCountResponse.channel_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_channel_name(), target);
  }

  // optional .DOTAChatChannelType_t channel_type = 2 [default = DOTAChannelType_Regional];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_channel_type(), target);
  }

  // optional uint32 member_count = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_member_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAChatGetMemberCountResponse)
  return target;
}

size_t CMsgDOTAChatGetMemberCountResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAChatGetMemberCountResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string channel_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_channel_name());
    }

    // optional .DOTAChatChannelType_t channel_type = 2 [default = DOTAChannelType_Regional];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_channel_type());
    }

    // optional uint32 member_count = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_member_count());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgDOTAChatGetMemberCountResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgDOTAChatGetMemberCountResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgDOTAChatGetMemberCountResponse::GetClassData() const { return &_class_data_; }


void CMsgDOTAChatGetMemberCountResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgDOTAChatGetMemberCountResponse*>(&to_msg);
  auto& from = static_cast<const CMsgDOTAChatGetMemberCountResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAChatGetMemberCountResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_channel_name(from._internal_channel_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.channel_type_ = from._impl_.channel_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.member_count_ = from._impl_.member_count_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgDOTAChatGetMemberCountResponse::CopyFrom(const CMsgDOTAChatGetMemberCountResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAChatGetMemberCountResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAChatGetMemberCountResponse::IsInitialized() const {
  return true;
}

void CMsgDOTAChatGetMemberCountResponse::InternalSwap(CMsgDOTAChatGetMemberCountResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.channel_name_, lhs_arena,
      &other->_impl_.channel_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTAChatGetMemberCountResponse, _impl_.member_count_)
      + sizeof(CMsgDOTAChatGetMemberCountResponse::_impl_.member_count_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTAChatGetMemberCountResponse, _impl_.channel_type_)>(
          reinterpret_cast<char*>(&_impl_.channel_type_),
          reinterpret_cast<char*>(&other->_impl_.channel_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAChatGetMemberCountResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fchat_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fchat_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fchat_2eproto[24]);
}

// ===================================================================

class CMsgDOTAChatRegionsEnabled_Region::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAChatRegionsEnabled_Region>()._impl_._has_bits_);
  static void set_has_min_latitude(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_max_latitude(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_min_longitude(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_max_longitude(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgDOTAChatRegionsEnabled_Region::CMsgDOTAChatRegionsEnabled_Region(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAChatRegionsEnabled.Region)
}
CMsgDOTAChatRegionsEnabled_Region::CMsgDOTAChatRegionsEnabled_Region(const CMsgDOTAChatRegionsEnabled_Region& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgDOTAChatRegionsEnabled_Region* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.min_latitude_){}
    , decltype(_impl_.max_latitude_){}
    , decltype(_impl_.min_longitude_){}
    , decltype(_impl_.max_longitude_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.min_latitude_, &from._impl_.min_latitude_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.max_longitude_) -
    reinterpret_cast<char*>(&_impl_.min_latitude_)) + sizeof(_impl_.max_longitude_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAChatRegionsEnabled.Region)
}

inline void CMsgDOTAChatRegionsEnabled_Region::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.min_latitude_){0}
    , decltype(_impl_.max_latitude_){0}
    , decltype(_impl_.min_longitude_){0}
    , decltype(_impl_.max_longitude_){0}
  };
}

CMsgDOTAChatRegionsEnabled_Region::~CMsgDOTAChatRegionsEnabled_Region() {
  // @@protoc_insertion_point(destructor:CMsgDOTAChatRegionsEnabled.Region)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgDOTAChatRegionsEnabled_Region::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgDOTAChatRegionsEnabled_Region::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgDOTAChatRegionsEnabled_Region::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAChatRegionsEnabled.Region)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.min_latitude_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.max_longitude_) -
        reinterpret_cast<char*>(&_impl_.min_latitude_)) + sizeof(_impl_.max_longitude_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAChatRegionsEnabled_Region::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float min_latitude = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_min_latitude(&has_bits);
          _impl_.min_latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float max_latitude = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_max_latitude(&has_bits);
          _impl_.max_latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float min_longitude = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_min_longitude(&has_bits);
          _impl_.min_longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float max_longitude = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_max_longitude(&has_bits);
          _impl_.max_longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgDOTAChatRegionsEnabled_Region::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAChatRegionsEnabled.Region)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional float min_latitude = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_min_latitude(), target);
  }

  // optional float max_latitude = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_max_latitude(), target);
  }

  // optional float min_longitude = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_min_longitude(), target);
  }

  // optional float max_longitude = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_max_longitude(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAChatRegionsEnabled.Region)
  return target;
}

size_t CMsgDOTAChatRegionsEnabled_Region::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAChatRegionsEnabled.Region)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional float min_latitude = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float max_latitude = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float min_longitude = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float max_longitude = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgDOTAChatRegionsEnabled_Region::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgDOTAChatRegionsEnabled_Region::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgDOTAChatRegionsEnabled_Region::GetClassData() const { return &_class_data_; }


void CMsgDOTAChatRegionsEnabled_Region::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgDOTAChatRegionsEnabled_Region*>(&to_msg);
  auto& from = static_cast<const CMsgDOTAChatRegionsEnabled_Region&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAChatRegionsEnabled.Region)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.min_latitude_ = from._impl_.min_latitude_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.max_latitude_ = from._impl_.max_latitude_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.min_longitude_ = from._impl_.min_longitude_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.max_longitude_ = from._impl_.max_longitude_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgDOTAChatRegionsEnabled_Region::CopyFrom(const CMsgDOTAChatRegionsEnabled_Region& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAChatRegionsEnabled.Region)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAChatRegionsEnabled_Region::IsInitialized() const {
  return true;
}

void CMsgDOTAChatRegionsEnabled_Region::InternalSwap(CMsgDOTAChatRegionsEnabled_Region* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTAChatRegionsEnabled_Region, _impl_.max_longitude_)
      + sizeof(CMsgDOTAChatRegionsEnabled_Region::_impl_.max_longitude_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTAChatRegionsEnabled_Region, _impl_.min_latitude_)>(
          reinterpret_cast<char*>(&_impl_.min_latitude_),
          reinterpret_cast<char*>(&other->_impl_.min_latitude_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAChatRegionsEnabled_Region::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fchat_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fchat_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fchat_2eproto[25]);
}

// ===================================================================

class CMsgDOTAChatRegionsEnabled::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAChatRegionsEnabled>()._impl_._has_bits_);
  static void set_has_enable_all_regions(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgDOTAChatRegionsEnabled::CMsgDOTAChatRegionsEnabled(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAChatRegionsEnabled)
}
CMsgDOTAChatRegionsEnabled::CMsgDOTAChatRegionsEnabled(const CMsgDOTAChatRegionsEnabled& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgDOTAChatRegionsEnabled* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.enabled_regions_){from._impl_.enabled_regions_}
    , decltype(_impl_.enable_all_regions_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.enable_all_regions_ = from._impl_.enable_all_regions_;
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAChatRegionsEnabled)
}

inline void CMsgDOTAChatRegionsEnabled::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.enabled_regions_){arena}
    , decltype(_impl_.enable_all_regions_){false}
  };
}

CMsgDOTAChatRegionsEnabled::~CMsgDOTAChatRegionsEnabled() {
  // @@protoc_insertion_point(destructor:CMsgDOTAChatRegionsEnabled)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgDOTAChatRegionsEnabled::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.enabled_regions_.~RepeatedPtrField();
}

void CMsgDOTAChatRegionsEnabled::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgDOTAChatRegionsEnabled::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAChatRegionsEnabled)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.enabled_regions_.Clear();
  _impl_.enable_all_regions_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAChatRegionsEnabled::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool enable_all_regions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_enable_all_regions(&has_bits);
          _impl_.enable_all_regions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgDOTAChatRegionsEnabled.Region enabled_regions = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_enabled_regions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgDOTAChatRegionsEnabled::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAChatRegionsEnabled)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool enable_all_regions = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_enable_all_regions(), target);
  }

  // repeated .CMsgDOTAChatRegionsEnabled.Region enabled_regions = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_enabled_regions_size()); i < n; i++) {
    const auto& repfield = this->_internal_enabled_regions(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAChatRegionsEnabled)
  return target;
}

size_t CMsgDOTAChatRegionsEnabled::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAChatRegionsEnabled)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgDOTAChatRegionsEnabled.Region enabled_regions = 2;
  total_size += 1UL * this->_internal_enabled_regions_size();
  for (const auto& msg : this->_impl_.enabled_regions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional bool enable_all_regions = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgDOTAChatRegionsEnabled::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgDOTAChatRegionsEnabled::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgDOTAChatRegionsEnabled::GetClassData() const { return &_class_data_; }


void CMsgDOTAChatRegionsEnabled::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgDOTAChatRegionsEnabled*>(&to_msg);
  auto& from = static_cast<const CMsgDOTAChatRegionsEnabled&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAChatRegionsEnabled)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.enabled_regions_.MergeFrom(from._impl_.enabled_regions_);
  if (from._internal_has_enable_all_regions()) {
    _this->_internal_set_enable_all_regions(from._internal_enable_all_regions());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgDOTAChatRegionsEnabled::CopyFrom(const CMsgDOTAChatRegionsEnabled& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAChatRegionsEnabled)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAChatRegionsEnabled::IsInitialized() const {
  return true;
}

void CMsgDOTAChatRegionsEnabled::InternalSwap(CMsgDOTAChatRegionsEnabled* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.enabled_regions_.InternalSwap(&other->_impl_.enabled_regions_);
  swap(_impl_.enable_all_regions_, other->_impl_.enable_all_regions_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAChatRegionsEnabled::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fchat_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fchat_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fchat_2eproto[26]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CMsgClientToGCPrivateChatInvite*
Arena::CreateMaybeMessage< ::CMsgClientToGCPrivateChatInvite >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCPrivateChatInvite >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCPrivateChatKick*
Arena::CreateMaybeMessage< ::CMsgClientToGCPrivateChatKick >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCPrivateChatKick >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCPrivateChatPromote*
Arena::CreateMaybeMessage< ::CMsgClientToGCPrivateChatPromote >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCPrivateChatPromote >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCPrivateChatDemote*
Arena::CreateMaybeMessage< ::CMsgClientToGCPrivateChatDemote >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCPrivateChatDemote >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToClientPrivateChatResponse*
Arena::CreateMaybeMessage< ::CMsgGCToClientPrivateChatResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToClientPrivateChatResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAJoinChatChannel*
Arena::CreateMaybeMessage< ::CMsgDOTAJoinChatChannel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAJoinChatChannel >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTALeaveChatChannel*
Arena::CreateMaybeMessage< ::CMsgDOTALeaveChatChannel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTALeaveChatChannel >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCChatReportPublicSpam*
Arena::CreateMaybeMessage< ::CMsgGCChatReportPublicSpam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCChatReportPublicSpam >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAChatModeratorBan*
Arena::CreateMaybeMessage< ::CMsgDOTAChatModeratorBan >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAChatModeratorBan >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAChatMessage_DiceRoll*
Arena::CreateMaybeMessage< ::CMsgDOTAChatMessage_DiceRoll >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAChatMessage_DiceRoll >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAChatMessage_TriviaAnswered*
Arena::CreateMaybeMessage< ::CMsgDOTAChatMessage_TriviaAnswered >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAChatMessage_TriviaAnswered >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAChatMessage_PlayerDraftPick*
Arena::CreateMaybeMessage< ::CMsgDOTAChatMessage_PlayerDraftPick >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAChatMessage_PlayerDraftPick >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAChatMessage_ChatWheelMessage*
Arena::CreateMaybeMessage< ::CMsgDOTAChatMessage_ChatWheelMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAChatMessage_ChatWheelMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAChatMessage*
Arena::CreateMaybeMessage< ::CMsgDOTAChatMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAChatMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAChatMember*
Arena::CreateMaybeMessage< ::CMsgDOTAChatMember >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAChatMember >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAJoinChatChannelResponse*
Arena::CreateMaybeMessage< ::CMsgDOTAJoinChatChannelResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAJoinChatChannelResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAOtherJoinedChatChannel*
Arena::CreateMaybeMessage< ::CMsgDOTAOtherJoinedChatChannel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAOtherJoinedChatChannel >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAOtherLeftChatChannel*
Arena::CreateMaybeMessage< ::CMsgDOTAOtherLeftChatChannel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAOtherLeftChatChannel >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTARequestChatChannelList*
Arena::CreateMaybeMessage< ::CMsgDOTARequestChatChannelList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTARequestChatChannelList >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTARequestChatChannelListResponse_ChatChannel*
Arena::CreateMaybeMessage< ::CMsgDOTARequestChatChannelListResponse_ChatChannel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTARequestChatChannelListResponse_ChatChannel >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTARequestChatChannelListResponse*
Arena::CreateMaybeMessage< ::CMsgDOTARequestChatChannelListResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTARequestChatChannelListResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAChatGetUserListResponse_Member*
Arena::CreateMaybeMessage< ::CMsgDOTAChatGetUserListResponse_Member >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAChatGetUserListResponse_Member >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAChatGetUserListResponse*
Arena::CreateMaybeMessage< ::CMsgDOTAChatGetUserListResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAChatGetUserListResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAChatGetMemberCount*
Arena::CreateMaybeMessage< ::CMsgDOTAChatGetMemberCount >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAChatGetMemberCount >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAChatGetMemberCountResponse*
Arena::CreateMaybeMessage< ::CMsgDOTAChatGetMemberCountResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAChatGetMemberCountResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAChatRegionsEnabled_Region*
Arena::CreateMaybeMessage< ::CMsgDOTAChatRegionsEnabled_Region >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAChatRegionsEnabled_Region >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAChatRegionsEnabled*
Arena::CreateMaybeMessage< ::CMsgDOTAChatRegionsEnabled >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAChatRegionsEnabled >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
