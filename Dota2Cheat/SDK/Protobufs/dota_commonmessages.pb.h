// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dota_commonmessages.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_dota_5fcommonmessages_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_dota_5fcommonmessages_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "networkbasetypes.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_dota_5fcommonmessages_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_dota_5fcommonmessages_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_dota_5fcommonmessages_2eproto;
class CDOTAMsg_CoachHUDPing;
struct CDOTAMsg_CoachHUDPingDefaultTypeInternal;
extern CDOTAMsg_CoachHUDPingDefaultTypeInternal _CDOTAMsg_CoachHUDPing_default_instance_;
class CDOTAMsg_DismissAllStatPopups;
struct CDOTAMsg_DismissAllStatPopupsDefaultTypeInternal;
extern CDOTAMsg_DismissAllStatPopupsDefaultTypeInternal _CDOTAMsg_DismissAllStatPopups_default_instance_;
class CDOTAMsg_ItemAlert;
struct CDOTAMsg_ItemAlertDefaultTypeInternal;
extern CDOTAMsg_ItemAlertDefaultTypeInternal _CDOTAMsg_ItemAlert_default_instance_;
class CDOTAMsg_LocationPing;
struct CDOTAMsg_LocationPingDefaultTypeInternal;
extern CDOTAMsg_LocationPingDefaultTypeInternal _CDOTAMsg_LocationPing_default_instance_;
class CDOTAMsg_MapLine;
struct CDOTAMsg_MapLineDefaultTypeInternal;
extern CDOTAMsg_MapLineDefaultTypeInternal _CDOTAMsg_MapLine_default_instance_;
class CDOTAMsg_SendStatPopup;
struct CDOTAMsg_SendStatPopupDefaultTypeInternal;
extern CDOTAMsg_SendStatPopupDefaultTypeInternal _CDOTAMsg_SendStatPopup_default_instance_;
class CDOTAMsg_UnitOrder;
struct CDOTAMsg_UnitOrderDefaultTypeInternal;
extern CDOTAMsg_UnitOrderDefaultTypeInternal _CDOTAMsg_UnitOrder_default_instance_;
class CDOTAMsg_WorldLine;
struct CDOTAMsg_WorldLineDefaultTypeInternal;
extern CDOTAMsg_WorldLineDefaultTypeInternal _CDOTAMsg_WorldLine_default_instance_;
class VersusScene_ChatWheel;
struct VersusScene_ChatWheelDefaultTypeInternal;
extern VersusScene_ChatWheelDefaultTypeInternal _VersusScene_ChatWheel_default_instance_;
class VersusScene_PlayActivity;
struct VersusScene_PlayActivityDefaultTypeInternal;
extern VersusScene_PlayActivityDefaultTypeInternal _VersusScene_PlayActivity_default_instance_;
class VersusScene_PlayActivity_ActivityInfo;
struct VersusScene_PlayActivity_ActivityInfoDefaultTypeInternal;
extern VersusScene_PlayActivity_ActivityInfoDefaultTypeInternal _VersusScene_PlayActivity_ActivityInfo_default_instance_;
class VersusScene_PlaybackRate;
struct VersusScene_PlaybackRateDefaultTypeInternal;
extern VersusScene_PlaybackRateDefaultTypeInternal _VersusScene_PlaybackRate_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CDOTAMsg_CoachHUDPing* Arena::CreateMaybeMessage<::CDOTAMsg_CoachHUDPing>(Arena*);
template<> ::CDOTAMsg_DismissAllStatPopups* Arena::CreateMaybeMessage<::CDOTAMsg_DismissAllStatPopups>(Arena*);
template<> ::CDOTAMsg_ItemAlert* Arena::CreateMaybeMessage<::CDOTAMsg_ItemAlert>(Arena*);
template<> ::CDOTAMsg_LocationPing* Arena::CreateMaybeMessage<::CDOTAMsg_LocationPing>(Arena*);
template<> ::CDOTAMsg_MapLine* Arena::CreateMaybeMessage<::CDOTAMsg_MapLine>(Arena*);
template<> ::CDOTAMsg_SendStatPopup* Arena::CreateMaybeMessage<::CDOTAMsg_SendStatPopup>(Arena*);
template<> ::CDOTAMsg_UnitOrder* Arena::CreateMaybeMessage<::CDOTAMsg_UnitOrder>(Arena*);
template<> ::CDOTAMsg_WorldLine* Arena::CreateMaybeMessage<::CDOTAMsg_WorldLine>(Arena*);
template<> ::VersusScene_ChatWheel* Arena::CreateMaybeMessage<::VersusScene_ChatWheel>(Arena*);
template<> ::VersusScene_PlayActivity* Arena::CreateMaybeMessage<::VersusScene_PlayActivity>(Arena*);
template<> ::VersusScene_PlayActivity_ActivityInfo* Arena::CreateMaybeMessage<::VersusScene_PlayActivity_ActivityInfo>(Arena*);
template<> ::VersusScene_PlaybackRate* Arena::CreateMaybeMessage<::VersusScene_PlaybackRate>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum EPingSource : int {
  k_ePingSource_Default = 0,
  k_ePingSource_Warning = 1,
  k_ePingSource_Wheel = 2,
  k_ePingSource_System = 3
};
bool EPingSource_IsValid(int value);
constexpr EPingSource EPingSource_MIN = k_ePingSource_Default;
constexpr EPingSource EPingSource_MAX = k_ePingSource_System;
constexpr int EPingSource_ARRAYSIZE = EPingSource_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EPingSource_descriptor();
template<typename T>
inline const std::string& EPingSource_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EPingSource>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EPingSource_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EPingSource_descriptor(), enum_t_value);
}
inline bool EPingSource_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EPingSource* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EPingSource>(
    EPingSource_descriptor(), name, value);
}
enum EDOTAStatPopupTypes : int {
  k_EDOTA_SPT_Textline = 0,
  k_EDOTA_SPT_Basic = 1,
  k_EDOTA_SPT_Poll = 2,
  k_EDOTA_SPT_Grid = 3,
  k_EDOTA_SPT_DualImage = 4,
  k_EDOTA_SPT_Movie = 5
};
bool EDOTAStatPopupTypes_IsValid(int value);
constexpr EDOTAStatPopupTypes EDOTAStatPopupTypes_MIN = k_EDOTA_SPT_Textline;
constexpr EDOTAStatPopupTypes EDOTAStatPopupTypes_MAX = k_EDOTA_SPT_Movie;
constexpr int EDOTAStatPopupTypes_ARRAYSIZE = EDOTAStatPopupTypes_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EDOTAStatPopupTypes_descriptor();
template<typename T>
inline const std::string& EDOTAStatPopupTypes_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EDOTAStatPopupTypes>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EDOTAStatPopupTypes_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EDOTAStatPopupTypes_descriptor(), enum_t_value);
}
inline bool EDOTAStatPopupTypes_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EDOTAStatPopupTypes* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EDOTAStatPopupTypes>(
    EDOTAStatPopupTypes_descriptor(), name, value);
}
enum dotaunitorder_t : int {
  DOTA_UNIT_ORDER_NONE = 0,
  DOTA_UNIT_ORDER_MOVE_TO_POSITION = 1,
  DOTA_UNIT_ORDER_MOVE_TO_TARGET = 2,
  DOTA_UNIT_ORDER_ATTACK_MOVE = 3,
  DOTA_UNIT_ORDER_ATTACK_TARGET = 4,
  DOTA_UNIT_ORDER_CAST_POSITION = 5,
  DOTA_UNIT_ORDER_CAST_TARGET = 6,
  DOTA_UNIT_ORDER_CAST_TARGET_TREE = 7,
  DOTA_UNIT_ORDER_CAST_NO_TARGET = 8,
  DOTA_UNIT_ORDER_CAST_TOGGLE = 9,
  DOTA_UNIT_ORDER_HOLD_POSITION = 10,
  DOTA_UNIT_ORDER_TRAIN_ABILITY = 11,
  DOTA_UNIT_ORDER_DROP_ITEM = 12,
  DOTA_UNIT_ORDER_GIVE_ITEM = 13,
  DOTA_UNIT_ORDER_PICKUP_ITEM = 14,
  DOTA_UNIT_ORDER_PICKUP_RUNE = 15,
  DOTA_UNIT_ORDER_PURCHASE_ITEM = 16,
  DOTA_UNIT_ORDER_SELL_ITEM = 17,
  DOTA_UNIT_ORDER_DISASSEMBLE_ITEM = 18,
  DOTA_UNIT_ORDER_MOVE_ITEM = 19,
  DOTA_UNIT_ORDER_CAST_TOGGLE_AUTO = 20,
  DOTA_UNIT_ORDER_STOP = 21,
  DOTA_UNIT_ORDER_TAUNT = 22,
  DOTA_UNIT_ORDER_BUYBACK = 23,
  DOTA_UNIT_ORDER_GLYPH = 24,
  DOTA_UNIT_ORDER_EJECT_ITEM_FROM_STASH = 25,
  DOTA_UNIT_ORDER_CAST_RUNE = 26,
  DOTA_UNIT_ORDER_PING_ABILITY = 27,
  DOTA_UNIT_ORDER_MOVE_TO_DIRECTION = 28,
  DOTA_UNIT_ORDER_PATROL = 29,
  DOTA_UNIT_ORDER_VECTOR_TARGET_POSITION = 30,
  DOTA_UNIT_ORDER_RADAR = 31,
  DOTA_UNIT_ORDER_SET_ITEM_COMBINE_LOCK = 32,
  DOTA_UNIT_ORDER_CONTINUE = 33,
  DOTA_UNIT_ORDER_VECTOR_TARGET_CANCELED = 34,
  DOTA_UNIT_ORDER_CAST_RIVER_PAINT = 35,
  DOTA_UNIT_ORDER_PREGAME_ADJUST_ITEM_ASSIGNMENT = 36,
  DOTA_UNIT_ORDER_DROP_ITEM_AT_FOUNTAIN = 37,
  DOTA_UNIT_ORDER_TAKE_ITEM_FROM_NEUTRAL_ITEM_STASH = 38,
  DOTA_UNIT_ORDER_MOVE_RELATIVE = 39,
  DOTA_UNIT_ORDER_CAST_TOGGLE_ALT = 40
};
bool dotaunitorder_t_IsValid(int value);
constexpr dotaunitorder_t dotaunitorder_t_MIN = DOTA_UNIT_ORDER_NONE;
constexpr dotaunitorder_t dotaunitorder_t_MAX = DOTA_UNIT_ORDER_CAST_TOGGLE_ALT;
constexpr int dotaunitorder_t_ARRAYSIZE = dotaunitorder_t_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* dotaunitorder_t_descriptor();
template<typename T>
inline const std::string& dotaunitorder_t_Name(T enum_t_value) {
  static_assert(::std::is_same<T, dotaunitorder_t>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function dotaunitorder_t_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    dotaunitorder_t_descriptor(), enum_t_value);
}
inline bool dotaunitorder_t_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, dotaunitorder_t* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<dotaunitorder_t>(
    dotaunitorder_t_descriptor(), name, value);
}
enum EDOTAVersusScenePlayerBehavior : int {
  VS_PLAYER_BEHAVIOR_PLAY_ACTIVITY = 1,
  VS_PLAYER_BEHAVIOR_CHAT_WHEEL = 2,
  VS_PLAYER_BEHAVIOR_PLAYBACK_RATE = 3
};
bool EDOTAVersusScenePlayerBehavior_IsValid(int value);
constexpr EDOTAVersusScenePlayerBehavior EDOTAVersusScenePlayerBehavior_MIN = VS_PLAYER_BEHAVIOR_PLAY_ACTIVITY;
constexpr EDOTAVersusScenePlayerBehavior EDOTAVersusScenePlayerBehavior_MAX = VS_PLAYER_BEHAVIOR_PLAYBACK_RATE;
constexpr int EDOTAVersusScenePlayerBehavior_ARRAYSIZE = EDOTAVersusScenePlayerBehavior_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EDOTAVersusScenePlayerBehavior_descriptor();
template<typename T>
inline const std::string& EDOTAVersusScenePlayerBehavior_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EDOTAVersusScenePlayerBehavior>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EDOTAVersusScenePlayerBehavior_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EDOTAVersusScenePlayerBehavior_descriptor(), enum_t_value);
}
inline bool EDOTAVersusScenePlayerBehavior_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EDOTAVersusScenePlayerBehavior* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EDOTAVersusScenePlayerBehavior>(
    EDOTAVersusScenePlayerBehavior_descriptor(), name, value);
}
// ===================================================================

class CDOTAMsg_LocationPing final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDOTAMsg_LocationPing) */ {
 public:
  inline CDOTAMsg_LocationPing() : CDOTAMsg_LocationPing(nullptr) {}
  ~CDOTAMsg_LocationPing() override;
  explicit PROTOBUF_CONSTEXPR CDOTAMsg_LocationPing(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDOTAMsg_LocationPing(const CDOTAMsg_LocationPing& from);
  CDOTAMsg_LocationPing(CDOTAMsg_LocationPing&& from) noexcept
    : CDOTAMsg_LocationPing() {
    *this = ::std::move(from);
  }

  inline CDOTAMsg_LocationPing& operator=(const CDOTAMsg_LocationPing& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDOTAMsg_LocationPing& operator=(CDOTAMsg_LocationPing&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDOTAMsg_LocationPing& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDOTAMsg_LocationPing* internal_default_instance() {
    return reinterpret_cast<const CDOTAMsg_LocationPing*>(
               &_CDOTAMsg_LocationPing_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CDOTAMsg_LocationPing& a, CDOTAMsg_LocationPing& b) {
    a.Swap(&b);
  }
  inline void Swap(CDOTAMsg_LocationPing* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDOTAMsg_LocationPing* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CDOTAMsg_LocationPing* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CDOTAMsg_LocationPing>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CDOTAMsg_LocationPing& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CDOTAMsg_LocationPing& from) {
    CDOTAMsg_LocationPing::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAMsg_LocationPing* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDOTAMsg_LocationPing";
  }
  protected:
  explicit CDOTAMsg_LocationPing(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kDirectPingFieldNumber = 4,
    kPingSourceFieldNumber = 6,
    kTargetFieldNumber = 3,
    kTypeFieldNumber = 5,
  };
  // optional int32 x = 1;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  int32_t x() const;
  void set_x(int32_t value);
  private:
  int32_t _internal_x() const;
  void _internal_set_x(int32_t value);
  public:

  // optional int32 y = 2;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  int32_t y() const;
  void set_y(int32_t value);
  private:
  int32_t _internal_y() const;
  void _internal_set_y(int32_t value);
  public:

  // optional bool direct_ping = 4;
  bool has_direct_ping() const;
  private:
  bool _internal_has_direct_ping() const;
  public:
  void clear_direct_ping();
  bool direct_ping() const;
  void set_direct_ping(bool value);
  private:
  bool _internal_direct_ping() const;
  void _internal_set_direct_ping(bool value);
  public:

  // optional .EPingSource ping_source = 6 [default = k_ePingSource_Default];
  bool has_ping_source() const;
  private:
  bool _internal_has_ping_source() const;
  public:
  void clear_ping_source();
  ::EPingSource ping_source() const;
  void set_ping_source(::EPingSource value);
  private:
  ::EPingSource _internal_ping_source() const;
  void _internal_set_ping_source(::EPingSource value);
  public:

  // optional int32 target = 3 [default = -1];
  bool has_target() const;
  private:
  bool _internal_has_target() const;
  public:
  void clear_target();
  int32_t target() const;
  void set_target(int32_t value);
  private:
  int32_t _internal_target() const;
  void _internal_set_target(int32_t value);
  public:

  // optional uint32 type = 5 [default = 4294967295];
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  uint32_t type() const;
  void set_type(uint32_t value);
  private:
  uint32_t _internal_type() const;
  void _internal_set_type(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CDOTAMsg_LocationPing)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int32_t x_;
    int32_t y_;
    bool direct_ping_;
    int ping_source_;
    int32_t target_;
    uint32_t type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fcommonmessages_2eproto;
};
// -------------------------------------------------------------------

class CDOTAMsg_ItemAlert final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDOTAMsg_ItemAlert) */ {
 public:
  inline CDOTAMsg_ItemAlert() : CDOTAMsg_ItemAlert(nullptr) {}
  ~CDOTAMsg_ItemAlert() override;
  explicit PROTOBUF_CONSTEXPR CDOTAMsg_ItemAlert(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDOTAMsg_ItemAlert(const CDOTAMsg_ItemAlert& from);
  CDOTAMsg_ItemAlert(CDOTAMsg_ItemAlert&& from) noexcept
    : CDOTAMsg_ItemAlert() {
    *this = ::std::move(from);
  }

  inline CDOTAMsg_ItemAlert& operator=(const CDOTAMsg_ItemAlert& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDOTAMsg_ItemAlert& operator=(CDOTAMsg_ItemAlert&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDOTAMsg_ItemAlert& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDOTAMsg_ItemAlert* internal_default_instance() {
    return reinterpret_cast<const CDOTAMsg_ItemAlert*>(
               &_CDOTAMsg_ItemAlert_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CDOTAMsg_ItemAlert& a, CDOTAMsg_ItemAlert& b) {
    a.Swap(&b);
  }
  inline void Swap(CDOTAMsg_ItemAlert* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDOTAMsg_ItemAlert* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CDOTAMsg_ItemAlert* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CDOTAMsg_ItemAlert>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CDOTAMsg_ItemAlert& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CDOTAMsg_ItemAlert& from) {
    CDOTAMsg_ItemAlert::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAMsg_ItemAlert* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDOTAMsg_ItemAlert";
  }
  protected:
  explicit CDOTAMsg_ItemAlert(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kItemAbilityIdFieldNumber = 3,
  };
  // optional int32 x = 1;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  int32_t x() const;
  void set_x(int32_t value);
  private:
  int32_t _internal_x() const;
  void _internal_set_x(int32_t value);
  public:

  // optional int32 y = 2;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  int32_t y() const;
  void set_y(int32_t value);
  private:
  int32_t _internal_y() const;
  void _internal_set_y(int32_t value);
  public:

  // optional int32 item_ability_id = 3 [default = -1];
  bool has_item_ability_id() const;
  private:
  bool _internal_has_item_ability_id() const;
  public:
  void clear_item_ability_id();
  int32_t item_ability_id() const;
  void set_item_ability_id(int32_t value);
  private:
  int32_t _internal_item_ability_id() const;
  void _internal_set_item_ability_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CDOTAMsg_ItemAlert)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int32_t x_;
    int32_t y_;
    int32_t item_ability_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fcommonmessages_2eproto;
};
// -------------------------------------------------------------------

class CDOTAMsg_MapLine final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDOTAMsg_MapLine) */ {
 public:
  inline CDOTAMsg_MapLine() : CDOTAMsg_MapLine(nullptr) {}
  ~CDOTAMsg_MapLine() override;
  explicit PROTOBUF_CONSTEXPR CDOTAMsg_MapLine(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDOTAMsg_MapLine(const CDOTAMsg_MapLine& from);
  CDOTAMsg_MapLine(CDOTAMsg_MapLine&& from) noexcept
    : CDOTAMsg_MapLine() {
    *this = ::std::move(from);
  }

  inline CDOTAMsg_MapLine& operator=(const CDOTAMsg_MapLine& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDOTAMsg_MapLine& operator=(CDOTAMsg_MapLine&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDOTAMsg_MapLine& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDOTAMsg_MapLine* internal_default_instance() {
    return reinterpret_cast<const CDOTAMsg_MapLine*>(
               &_CDOTAMsg_MapLine_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CDOTAMsg_MapLine& a, CDOTAMsg_MapLine& b) {
    a.Swap(&b);
  }
  inline void Swap(CDOTAMsg_MapLine* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDOTAMsg_MapLine* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CDOTAMsg_MapLine* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CDOTAMsg_MapLine>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CDOTAMsg_MapLine& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CDOTAMsg_MapLine& from) {
    CDOTAMsg_MapLine::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAMsg_MapLine* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDOTAMsg_MapLine";
  }
  protected:
  explicit CDOTAMsg_MapLine(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kInitialFieldNumber = 3,
  };
  // optional int32 x = 1;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  int32_t x() const;
  void set_x(int32_t value);
  private:
  int32_t _internal_x() const;
  void _internal_set_x(int32_t value);
  public:

  // optional int32 y = 2;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  int32_t y() const;
  void set_y(int32_t value);
  private:
  int32_t _internal_y() const;
  void _internal_set_y(int32_t value);
  public:

  // optional bool initial = 3;
  bool has_initial() const;
  private:
  bool _internal_has_initial() const;
  public:
  void clear_initial();
  bool initial() const;
  void set_initial(bool value);
  private:
  bool _internal_initial() const;
  void _internal_set_initial(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CDOTAMsg_MapLine)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int32_t x_;
    int32_t y_;
    bool initial_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fcommonmessages_2eproto;
};
// -------------------------------------------------------------------

class CDOTAMsg_WorldLine final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDOTAMsg_WorldLine) */ {
 public:
  inline CDOTAMsg_WorldLine() : CDOTAMsg_WorldLine(nullptr) {}
  ~CDOTAMsg_WorldLine() override;
  explicit PROTOBUF_CONSTEXPR CDOTAMsg_WorldLine(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDOTAMsg_WorldLine(const CDOTAMsg_WorldLine& from);
  CDOTAMsg_WorldLine(CDOTAMsg_WorldLine&& from) noexcept
    : CDOTAMsg_WorldLine() {
    *this = ::std::move(from);
  }

  inline CDOTAMsg_WorldLine& operator=(const CDOTAMsg_WorldLine& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDOTAMsg_WorldLine& operator=(CDOTAMsg_WorldLine&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDOTAMsg_WorldLine& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDOTAMsg_WorldLine* internal_default_instance() {
    return reinterpret_cast<const CDOTAMsg_WorldLine*>(
               &_CDOTAMsg_WorldLine_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CDOTAMsg_WorldLine& a, CDOTAMsg_WorldLine& b) {
    a.Swap(&b);
  }
  inline void Swap(CDOTAMsg_WorldLine* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDOTAMsg_WorldLine* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CDOTAMsg_WorldLine* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CDOTAMsg_WorldLine>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CDOTAMsg_WorldLine& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CDOTAMsg_WorldLine& from) {
    CDOTAMsg_WorldLine::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAMsg_WorldLine* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDOTAMsg_WorldLine";
  }
  protected:
  explicit CDOTAMsg_WorldLine(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
    kInitialFieldNumber = 4,
    kEndFieldNumber = 5,
  };
  // optional int32 x = 1;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  int32_t x() const;
  void set_x(int32_t value);
  private:
  int32_t _internal_x() const;
  void _internal_set_x(int32_t value);
  public:

  // optional int32 y = 2;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  int32_t y() const;
  void set_y(int32_t value);
  private:
  int32_t _internal_y() const;
  void _internal_set_y(int32_t value);
  public:

  // optional int32 z = 3;
  bool has_z() const;
  private:
  bool _internal_has_z() const;
  public:
  void clear_z();
  int32_t z() const;
  void set_z(int32_t value);
  private:
  int32_t _internal_z() const;
  void _internal_set_z(int32_t value);
  public:

  // optional bool initial = 4;
  bool has_initial() const;
  private:
  bool _internal_has_initial() const;
  public:
  void clear_initial();
  bool initial() const;
  void set_initial(bool value);
  private:
  bool _internal_initial() const;
  void _internal_set_initial(bool value);
  public:

  // optional bool end = 5;
  bool has_end() const;
  private:
  bool _internal_has_end() const;
  public:
  void clear_end();
  bool end() const;
  void set_end(bool value);
  private:
  bool _internal_end() const;
  void _internal_set_end(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CDOTAMsg_WorldLine)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int32_t x_;
    int32_t y_;
    int32_t z_;
    bool initial_;
    bool end_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fcommonmessages_2eproto;
};
// -------------------------------------------------------------------

class CDOTAMsg_SendStatPopup final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDOTAMsg_SendStatPopup) */ {
 public:
  inline CDOTAMsg_SendStatPopup() : CDOTAMsg_SendStatPopup(nullptr) {}
  ~CDOTAMsg_SendStatPopup() override;
  explicit PROTOBUF_CONSTEXPR CDOTAMsg_SendStatPopup(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDOTAMsg_SendStatPopup(const CDOTAMsg_SendStatPopup& from);
  CDOTAMsg_SendStatPopup(CDOTAMsg_SendStatPopup&& from) noexcept
    : CDOTAMsg_SendStatPopup() {
    *this = ::std::move(from);
  }

  inline CDOTAMsg_SendStatPopup& operator=(const CDOTAMsg_SendStatPopup& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDOTAMsg_SendStatPopup& operator=(CDOTAMsg_SendStatPopup&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDOTAMsg_SendStatPopup& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDOTAMsg_SendStatPopup* internal_default_instance() {
    return reinterpret_cast<const CDOTAMsg_SendStatPopup*>(
               &_CDOTAMsg_SendStatPopup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CDOTAMsg_SendStatPopup& a, CDOTAMsg_SendStatPopup& b) {
    a.Swap(&b);
  }
  inline void Swap(CDOTAMsg_SendStatPopup* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDOTAMsg_SendStatPopup* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CDOTAMsg_SendStatPopup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CDOTAMsg_SendStatPopup>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CDOTAMsg_SendStatPopup& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CDOTAMsg_SendStatPopup& from) {
    CDOTAMsg_SendStatPopup::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAMsg_SendStatPopup* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDOTAMsg_SendStatPopup";
  }
  protected:
  explicit CDOTAMsg_SendStatPopup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatStringsFieldNumber = 2,
    kStatImagesFieldNumber = 3,
    kStatImageTypesFieldNumber = 4,
    kMovieNameFieldNumber = 7,
    kStyleFieldNumber = 1,
    kDurationFieldNumber = 5,
    kUseHtmlFieldNumber = 6,
  };
  // repeated string stat_strings = 2;
  int stat_strings_size() const;
  private:
  int _internal_stat_strings_size() const;
  public:
  void clear_stat_strings();
  const std::string& stat_strings(int index) const;
  std::string* mutable_stat_strings(int index);
  void set_stat_strings(int index, const std::string& value);
  void set_stat_strings(int index, std::string&& value);
  void set_stat_strings(int index, const char* value);
  void set_stat_strings(int index, const char* value, size_t size);
  std::string* add_stat_strings();
  void add_stat_strings(const std::string& value);
  void add_stat_strings(std::string&& value);
  void add_stat_strings(const char* value);
  void add_stat_strings(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& stat_strings() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_stat_strings();
  private:
  const std::string& _internal_stat_strings(int index) const;
  std::string* _internal_add_stat_strings();
  public:

  // repeated int32 stat_images = 3;
  int stat_images_size() const;
  private:
  int _internal_stat_images_size() const;
  public:
  void clear_stat_images();
  private:
  int32_t _internal_stat_images(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_stat_images() const;
  void _internal_add_stat_images(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_stat_images();
  public:
  int32_t stat_images(int index) const;
  void set_stat_images(int index, int32_t value);
  void add_stat_images(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      stat_images() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_stat_images();

  // repeated int32 stat_image_types = 4;
  int stat_image_types_size() const;
  private:
  int _internal_stat_image_types_size() const;
  public:
  void clear_stat_image_types();
  private:
  int32_t _internal_stat_image_types(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_stat_image_types() const;
  void _internal_add_stat_image_types(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_stat_image_types();
  public:
  int32_t stat_image_types(int index) const;
  void set_stat_image_types(int index, int32_t value);
  void add_stat_image_types(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      stat_image_types() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_stat_image_types();

  // optional string movie_name = 7;
  bool has_movie_name() const;
  private:
  bool _internal_has_movie_name() const;
  public:
  void clear_movie_name();
  const std::string& movie_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_movie_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_movie_name();
  PROTOBUF_NODISCARD std::string* release_movie_name();
  void set_allocated_movie_name(std::string* movie_name);
  private:
  const std::string& _internal_movie_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_movie_name(const std::string& value);
  std::string* _internal_mutable_movie_name();
  public:

  // optional .EDOTAStatPopupTypes style = 1 [default = k_EDOTA_SPT_Textline];
  bool has_style() const;
  private:
  bool _internal_has_style() const;
  public:
  void clear_style();
  ::EDOTAStatPopupTypes style() const;
  void set_style(::EDOTAStatPopupTypes value);
  private:
  ::EDOTAStatPopupTypes _internal_style() const;
  void _internal_set_style(::EDOTAStatPopupTypes value);
  public:

  // optional float duration = 5;
  bool has_duration() const;
  private:
  bool _internal_has_duration() const;
  public:
  void clear_duration();
  float duration() const;
  void set_duration(float value);
  private:
  float _internal_duration() const;
  void _internal_set_duration(float value);
  public:

  // optional bool use_html = 6;
  bool has_use_html() const;
  private:
  bool _internal_has_use_html() const;
  public:
  void clear_use_html();
  bool use_html() const;
  void set_use_html(bool value);
  private:
  bool _internal_use_html() const;
  void _internal_set_use_html(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CDOTAMsg_SendStatPopup)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> stat_strings_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > stat_images_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > stat_image_types_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr movie_name_;
    int style_;
    float duration_;
    bool use_html_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fcommonmessages_2eproto;
};
// -------------------------------------------------------------------

class CDOTAMsg_DismissAllStatPopups final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDOTAMsg_DismissAllStatPopups) */ {
 public:
  inline CDOTAMsg_DismissAllStatPopups() : CDOTAMsg_DismissAllStatPopups(nullptr) {}
  ~CDOTAMsg_DismissAllStatPopups() override;
  explicit PROTOBUF_CONSTEXPR CDOTAMsg_DismissAllStatPopups(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDOTAMsg_DismissAllStatPopups(const CDOTAMsg_DismissAllStatPopups& from);
  CDOTAMsg_DismissAllStatPopups(CDOTAMsg_DismissAllStatPopups&& from) noexcept
    : CDOTAMsg_DismissAllStatPopups() {
    *this = ::std::move(from);
  }

  inline CDOTAMsg_DismissAllStatPopups& operator=(const CDOTAMsg_DismissAllStatPopups& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDOTAMsg_DismissAllStatPopups& operator=(CDOTAMsg_DismissAllStatPopups&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDOTAMsg_DismissAllStatPopups& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDOTAMsg_DismissAllStatPopups* internal_default_instance() {
    return reinterpret_cast<const CDOTAMsg_DismissAllStatPopups*>(
               &_CDOTAMsg_DismissAllStatPopups_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CDOTAMsg_DismissAllStatPopups& a, CDOTAMsg_DismissAllStatPopups& b) {
    a.Swap(&b);
  }
  inline void Swap(CDOTAMsg_DismissAllStatPopups* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDOTAMsg_DismissAllStatPopups* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CDOTAMsg_DismissAllStatPopups* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CDOTAMsg_DismissAllStatPopups>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CDOTAMsg_DismissAllStatPopups& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CDOTAMsg_DismissAllStatPopups& from) {
    CDOTAMsg_DismissAllStatPopups::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAMsg_DismissAllStatPopups* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDOTAMsg_DismissAllStatPopups";
  }
  protected:
  explicit CDOTAMsg_DismissAllStatPopups(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeDelayFieldNumber = 1,
  };
  // optional float time_delay = 1;
  bool has_time_delay() const;
  private:
  bool _internal_has_time_delay() const;
  public:
  void clear_time_delay();
  float time_delay() const;
  void set_time_delay(float value);
  private:
  float _internal_time_delay() const;
  void _internal_set_time_delay(float value);
  public:

  // @@protoc_insertion_point(class_scope:CDOTAMsg_DismissAllStatPopups)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    float time_delay_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fcommonmessages_2eproto;
};
// -------------------------------------------------------------------

class CDOTAMsg_CoachHUDPing final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDOTAMsg_CoachHUDPing) */ {
 public:
  inline CDOTAMsg_CoachHUDPing() : CDOTAMsg_CoachHUDPing(nullptr) {}
  ~CDOTAMsg_CoachHUDPing() override;
  explicit PROTOBUF_CONSTEXPR CDOTAMsg_CoachHUDPing(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDOTAMsg_CoachHUDPing(const CDOTAMsg_CoachHUDPing& from);
  CDOTAMsg_CoachHUDPing(CDOTAMsg_CoachHUDPing&& from) noexcept
    : CDOTAMsg_CoachHUDPing() {
    *this = ::std::move(from);
  }

  inline CDOTAMsg_CoachHUDPing& operator=(const CDOTAMsg_CoachHUDPing& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDOTAMsg_CoachHUDPing& operator=(CDOTAMsg_CoachHUDPing&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDOTAMsg_CoachHUDPing& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDOTAMsg_CoachHUDPing* internal_default_instance() {
    return reinterpret_cast<const CDOTAMsg_CoachHUDPing*>(
               &_CDOTAMsg_CoachHUDPing_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CDOTAMsg_CoachHUDPing& a, CDOTAMsg_CoachHUDPing& b) {
    a.Swap(&b);
  }
  inline void Swap(CDOTAMsg_CoachHUDPing* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDOTAMsg_CoachHUDPing* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CDOTAMsg_CoachHUDPing* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CDOTAMsg_CoachHUDPing>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CDOTAMsg_CoachHUDPing& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CDOTAMsg_CoachHUDPing& from) {
    CDOTAMsg_CoachHUDPing::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAMsg_CoachHUDPing* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDOTAMsg_CoachHUDPing";
  }
  protected:
  explicit CDOTAMsg_CoachHUDPing(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTgtpathFieldNumber = 3,
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // optional string tgtpath = 3;
  bool has_tgtpath() const;
  private:
  bool _internal_has_tgtpath() const;
  public:
  void clear_tgtpath();
  const std::string& tgtpath() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tgtpath(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tgtpath();
  PROTOBUF_NODISCARD std::string* release_tgtpath();
  void set_allocated_tgtpath(std::string* tgtpath);
  private:
  const std::string& _internal_tgtpath() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tgtpath(const std::string& value);
  std::string* _internal_mutable_tgtpath();
  public:

  // optional uint32 x = 1;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  uint32_t x() const;
  void set_x(uint32_t value);
  private:
  uint32_t _internal_x() const;
  void _internal_set_x(uint32_t value);
  public:

  // optional uint32 y = 2;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  uint32_t y() const;
  void set_y(uint32_t value);
  private:
  uint32_t _internal_y() const;
  void _internal_set_y(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CDOTAMsg_CoachHUDPing)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tgtpath_;
    uint32_t x_;
    uint32_t y_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fcommonmessages_2eproto;
};
// -------------------------------------------------------------------

class CDOTAMsg_UnitOrder final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDOTAMsg_UnitOrder) */ {
 public:
  inline CDOTAMsg_UnitOrder() : CDOTAMsg_UnitOrder(nullptr) {}
  ~CDOTAMsg_UnitOrder() override;
  explicit PROTOBUF_CONSTEXPR CDOTAMsg_UnitOrder(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDOTAMsg_UnitOrder(const CDOTAMsg_UnitOrder& from);
  CDOTAMsg_UnitOrder(CDOTAMsg_UnitOrder&& from) noexcept
    : CDOTAMsg_UnitOrder() {
    *this = ::std::move(from);
  }

  inline CDOTAMsg_UnitOrder& operator=(const CDOTAMsg_UnitOrder& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDOTAMsg_UnitOrder& operator=(CDOTAMsg_UnitOrder&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDOTAMsg_UnitOrder& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDOTAMsg_UnitOrder* internal_default_instance() {
    return reinterpret_cast<const CDOTAMsg_UnitOrder*>(
               &_CDOTAMsg_UnitOrder_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CDOTAMsg_UnitOrder& a, CDOTAMsg_UnitOrder& b) {
    a.Swap(&b);
  }
  inline void Swap(CDOTAMsg_UnitOrder* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDOTAMsg_UnitOrder* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CDOTAMsg_UnitOrder* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CDOTAMsg_UnitOrder>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CDOTAMsg_UnitOrder& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CDOTAMsg_UnitOrder& from) {
    CDOTAMsg_UnitOrder::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAMsg_UnitOrder* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDOTAMsg_UnitOrder";
  }
  protected:
  explicit CDOTAMsg_UnitOrder(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUnitsFieldNumber = 3,
    kPositionFieldNumber = 6,
    kOrderTypeFieldNumber = 2,
    kTargetIndexFieldNumber = 4,
    kSequenceNumberFieldNumber = 8,
    kFlagsFieldNumber = 9,
    kAbilityIndexFieldNumber = 5,
  };
  // repeated int32 units = 3;
  int units_size() const;
  private:
  int _internal_units_size() const;
  public:
  void clear_units();
  private:
  int32_t _internal_units(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_units() const;
  void _internal_add_units(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_units();
  public:
  int32_t units(int index) const;
  void set_units(int index, int32_t value);
  void add_units(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      units() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_units();

  // optional .CMsgVector position = 6;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::CMsgVector& position() const;
  PROTOBUF_NODISCARD ::CMsgVector* release_position();
  ::CMsgVector* mutable_position();
  void set_allocated_position(::CMsgVector* position);
  private:
  const ::CMsgVector& _internal_position() const;
  ::CMsgVector* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::CMsgVector* position);
  ::CMsgVector* unsafe_arena_release_position();

  // optional .dotaunitorder_t order_type = 2 [default = DOTA_UNIT_ORDER_NONE];
  bool has_order_type() const;
  private:
  bool _internal_has_order_type() const;
  public:
  void clear_order_type();
  ::dotaunitorder_t order_type() const;
  void set_order_type(::dotaunitorder_t value);
  private:
  ::dotaunitorder_t _internal_order_type() const;
  void _internal_set_order_type(::dotaunitorder_t value);
  public:

  // optional int32 target_index = 4 [default = 0];
  bool has_target_index() const;
  private:
  bool _internal_has_target_index() const;
  public:
  void clear_target_index();
  int32_t target_index() const;
  void set_target_index(int32_t value);
  private:
  int32_t _internal_target_index() const;
  void _internal_set_target_index(int32_t value);
  public:

  // optional int32 sequence_number = 8;
  bool has_sequence_number() const;
  private:
  bool _internal_has_sequence_number() const;
  public:
  void clear_sequence_number();
  int32_t sequence_number() const;
  void set_sequence_number(int32_t value);
  private:
  int32_t _internal_sequence_number() const;
  void _internal_set_sequence_number(int32_t value);
  public:

  // optional uint32 flags = 9;
  bool has_flags() const;
  private:
  bool _internal_has_flags() const;
  public:
  void clear_flags();
  uint32_t flags() const;
  void set_flags(uint32_t value);
  private:
  uint32_t _internal_flags() const;
  void _internal_set_flags(uint32_t value);
  public:

  // optional int32 ability_index = 5 [default = -1];
  bool has_ability_index() const;
  private:
  bool _internal_has_ability_index() const;
  public:
  void clear_ability_index();
  int32_t ability_index() const;
  void set_ability_index(int32_t value);
  private:
  int32_t _internal_ability_index() const;
  void _internal_set_ability_index(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CDOTAMsg_UnitOrder)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > units_;
    ::CMsgVector* position_;
    int order_type_;
    int32_t target_index_;
    int32_t sequence_number_;
    uint32_t flags_;
    int32_t ability_index_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fcommonmessages_2eproto;
};
// -------------------------------------------------------------------

class VersusScene_PlayActivity_ActivityInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:VersusScene_PlayActivity.ActivityInfo) */ {
 public:
  inline VersusScene_PlayActivity_ActivityInfo() : VersusScene_PlayActivity_ActivityInfo(nullptr) {}
  ~VersusScene_PlayActivity_ActivityInfo() override;
  explicit PROTOBUF_CONSTEXPR VersusScene_PlayActivity_ActivityInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VersusScene_PlayActivity_ActivityInfo(const VersusScene_PlayActivity_ActivityInfo& from);
  VersusScene_PlayActivity_ActivityInfo(VersusScene_PlayActivity_ActivityInfo&& from) noexcept
    : VersusScene_PlayActivity_ActivityInfo() {
    *this = ::std::move(from);
  }

  inline VersusScene_PlayActivity_ActivityInfo& operator=(const VersusScene_PlayActivity_ActivityInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline VersusScene_PlayActivity_ActivityInfo& operator=(VersusScene_PlayActivity_ActivityInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VersusScene_PlayActivity_ActivityInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const VersusScene_PlayActivity_ActivityInfo* internal_default_instance() {
    return reinterpret_cast<const VersusScene_PlayActivity_ActivityInfo*>(
               &_VersusScene_PlayActivity_ActivityInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(VersusScene_PlayActivity_ActivityInfo& a, VersusScene_PlayActivity_ActivityInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(VersusScene_PlayActivity_ActivityInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VersusScene_PlayActivity_ActivityInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VersusScene_PlayActivity_ActivityInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VersusScene_PlayActivity_ActivityInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VersusScene_PlayActivity_ActivityInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const VersusScene_PlayActivity_ActivityInfo& from) {
    VersusScene_PlayActivity_ActivityInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VersusScene_PlayActivity_ActivityInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "VersusScene_PlayActivity.ActivityInfo";
  }
  protected:
  explicit VersusScene_PlayActivity_ActivityInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActivityFieldNumber = 1,
    kDisableAutoKillFieldNumber = 2,
    kForceLoopingFieldNumber = 3,
  };
  // optional string activity = 1;
  bool has_activity() const;
  private:
  bool _internal_has_activity() const;
  public:
  void clear_activity();
  const std::string& activity() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_activity(ArgT0&& arg0, ArgT... args);
  std::string* mutable_activity();
  PROTOBUF_NODISCARD std::string* release_activity();
  void set_allocated_activity(std::string* activity);
  private:
  const std::string& _internal_activity() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_activity(const std::string& value);
  std::string* _internal_mutable_activity();
  public:

  // optional bool disable_auto_kill = 2;
  bool has_disable_auto_kill() const;
  private:
  bool _internal_has_disable_auto_kill() const;
  public:
  void clear_disable_auto_kill();
  bool disable_auto_kill() const;
  void set_disable_auto_kill(bool value);
  private:
  bool _internal_disable_auto_kill() const;
  void _internal_set_disable_auto_kill(bool value);
  public:

  // optional bool force_looping = 3;
  bool has_force_looping() const;
  private:
  bool _internal_has_force_looping() const;
  public:
  void clear_force_looping();
  bool force_looping() const;
  void set_force_looping(bool value);
  private:
  bool _internal_force_looping() const;
  void _internal_set_force_looping(bool value);
  public:

  // @@protoc_insertion_point(class_scope:VersusScene_PlayActivity.ActivityInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr activity_;
    bool disable_auto_kill_;
    bool force_looping_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fcommonmessages_2eproto;
};
// -------------------------------------------------------------------

class VersusScene_PlayActivity final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:VersusScene_PlayActivity) */ {
 public:
  inline VersusScene_PlayActivity() : VersusScene_PlayActivity(nullptr) {}
  ~VersusScene_PlayActivity() override;
  explicit PROTOBUF_CONSTEXPR VersusScene_PlayActivity(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VersusScene_PlayActivity(const VersusScene_PlayActivity& from);
  VersusScene_PlayActivity(VersusScene_PlayActivity&& from) noexcept
    : VersusScene_PlayActivity() {
    *this = ::std::move(from);
  }

  inline VersusScene_PlayActivity& operator=(const VersusScene_PlayActivity& from) {
    CopyFrom(from);
    return *this;
  }
  inline VersusScene_PlayActivity& operator=(VersusScene_PlayActivity&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VersusScene_PlayActivity& default_instance() {
    return *internal_default_instance();
  }
  static inline const VersusScene_PlayActivity* internal_default_instance() {
    return reinterpret_cast<const VersusScene_PlayActivity*>(
               &_VersusScene_PlayActivity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(VersusScene_PlayActivity& a, VersusScene_PlayActivity& b) {
    a.Swap(&b);
  }
  inline void Swap(VersusScene_PlayActivity* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VersusScene_PlayActivity* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VersusScene_PlayActivity* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VersusScene_PlayActivity>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VersusScene_PlayActivity& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const VersusScene_PlayActivity& from) {
    VersusScene_PlayActivity::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VersusScene_PlayActivity* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "VersusScene_PlayActivity";
  }
  protected:
  explicit VersusScene_PlayActivity(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef VersusScene_PlayActivity_ActivityInfo ActivityInfo;

  // accessors -------------------------------------------------------

  enum : int {
    kActivitiesFieldNumber = 1,
    kPlaybackRateFieldNumber = 2,
  };
  // repeated .VersusScene_PlayActivity.ActivityInfo activities = 1;
  int activities_size() const;
  private:
  int _internal_activities_size() const;
  public:
  void clear_activities();
  ::VersusScene_PlayActivity_ActivityInfo* mutable_activities(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VersusScene_PlayActivity_ActivityInfo >*
      mutable_activities();
  private:
  const ::VersusScene_PlayActivity_ActivityInfo& _internal_activities(int index) const;
  ::VersusScene_PlayActivity_ActivityInfo* _internal_add_activities();
  public:
  const ::VersusScene_PlayActivity_ActivityInfo& activities(int index) const;
  ::VersusScene_PlayActivity_ActivityInfo* add_activities();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VersusScene_PlayActivity_ActivityInfo >&
      activities() const;

  // optional float playback_rate = 2;
  bool has_playback_rate() const;
  private:
  bool _internal_has_playback_rate() const;
  public:
  void clear_playback_rate();
  float playback_rate() const;
  void set_playback_rate(float value);
  private:
  float _internal_playback_rate() const;
  void _internal_set_playback_rate(float value);
  public:

  // @@protoc_insertion_point(class_scope:VersusScene_PlayActivity)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VersusScene_PlayActivity_ActivityInfo > activities_;
    float playback_rate_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fcommonmessages_2eproto;
};
// -------------------------------------------------------------------

class VersusScene_ChatWheel final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:VersusScene_ChatWheel) */ {
 public:
  inline VersusScene_ChatWheel() : VersusScene_ChatWheel(nullptr) {}
  ~VersusScene_ChatWheel() override;
  explicit PROTOBUF_CONSTEXPR VersusScene_ChatWheel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VersusScene_ChatWheel(const VersusScene_ChatWheel& from);
  VersusScene_ChatWheel(VersusScene_ChatWheel&& from) noexcept
    : VersusScene_ChatWheel() {
    *this = ::std::move(from);
  }

  inline VersusScene_ChatWheel& operator=(const VersusScene_ChatWheel& from) {
    CopyFrom(from);
    return *this;
  }
  inline VersusScene_ChatWheel& operator=(VersusScene_ChatWheel&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VersusScene_ChatWheel& default_instance() {
    return *internal_default_instance();
  }
  static inline const VersusScene_ChatWheel* internal_default_instance() {
    return reinterpret_cast<const VersusScene_ChatWheel*>(
               &_VersusScene_ChatWheel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(VersusScene_ChatWheel& a, VersusScene_ChatWheel& b) {
    a.Swap(&b);
  }
  inline void Swap(VersusScene_ChatWheel* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VersusScene_ChatWheel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VersusScene_ChatWheel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VersusScene_ChatWheel>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VersusScene_ChatWheel& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const VersusScene_ChatWheel& from) {
    VersusScene_ChatWheel::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VersusScene_ChatWheel* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "VersusScene_ChatWheel";
  }
  protected:
  explicit VersusScene_ChatWheel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEmoticonIdFieldNumber = 2,
    kChatMessageIdFieldNumber = 1,
  };
  // optional uint32 emoticon_id = 2;
  bool has_emoticon_id() const;
  private:
  bool _internal_has_emoticon_id() const;
  public:
  void clear_emoticon_id();
  uint32_t emoticon_id() const;
  void set_emoticon_id(uint32_t value);
  private:
  uint32_t _internal_emoticon_id() const;
  void _internal_set_emoticon_id(uint32_t value);
  public:

  // optional uint32 chat_message_id = 1 [default = 4294967295];
  bool has_chat_message_id() const;
  private:
  bool _internal_has_chat_message_id() const;
  public:
  void clear_chat_message_id();
  uint32_t chat_message_id() const;
  void set_chat_message_id(uint32_t value);
  private:
  uint32_t _internal_chat_message_id() const;
  void _internal_set_chat_message_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:VersusScene_ChatWheel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t emoticon_id_;
    uint32_t chat_message_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fcommonmessages_2eproto;
};
// -------------------------------------------------------------------

class VersusScene_PlaybackRate final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:VersusScene_PlaybackRate) */ {
 public:
  inline VersusScene_PlaybackRate() : VersusScene_PlaybackRate(nullptr) {}
  ~VersusScene_PlaybackRate() override;
  explicit PROTOBUF_CONSTEXPR VersusScene_PlaybackRate(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VersusScene_PlaybackRate(const VersusScene_PlaybackRate& from);
  VersusScene_PlaybackRate(VersusScene_PlaybackRate&& from) noexcept
    : VersusScene_PlaybackRate() {
    *this = ::std::move(from);
  }

  inline VersusScene_PlaybackRate& operator=(const VersusScene_PlaybackRate& from) {
    CopyFrom(from);
    return *this;
  }
  inline VersusScene_PlaybackRate& operator=(VersusScene_PlaybackRate&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VersusScene_PlaybackRate& default_instance() {
    return *internal_default_instance();
  }
  static inline const VersusScene_PlaybackRate* internal_default_instance() {
    return reinterpret_cast<const VersusScene_PlaybackRate*>(
               &_VersusScene_PlaybackRate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(VersusScene_PlaybackRate& a, VersusScene_PlaybackRate& b) {
    a.Swap(&b);
  }
  inline void Swap(VersusScene_PlaybackRate* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VersusScene_PlaybackRate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VersusScene_PlaybackRate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VersusScene_PlaybackRate>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VersusScene_PlaybackRate& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const VersusScene_PlaybackRate& from) {
    VersusScene_PlaybackRate::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VersusScene_PlaybackRate* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "VersusScene_PlaybackRate";
  }
  protected:
  explicit VersusScene_PlaybackRate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRateFieldNumber = 1,
  };
  // optional float rate = 1;
  bool has_rate() const;
  private:
  bool _internal_has_rate() const;
  public:
  void clear_rate();
  float rate() const;
  void set_rate(float value);
  private:
  float _internal_rate() const;
  void _internal_set_rate(float value);
  public:

  // @@protoc_insertion_point(class_scope:VersusScene_PlaybackRate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    float rate_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fcommonmessages_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CDOTAMsg_LocationPing

// optional int32 x = 1;
inline bool CDOTAMsg_LocationPing::_internal_has_x() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDOTAMsg_LocationPing::has_x() const {
  return _internal_has_x();
}
inline void CDOTAMsg_LocationPing::clear_x() {
  _impl_.x_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t CDOTAMsg_LocationPing::_internal_x() const {
  return _impl_.x_;
}
inline int32_t CDOTAMsg_LocationPing::x() const {
  // @@protoc_insertion_point(field_get:CDOTAMsg_LocationPing.x)
  return _internal_x();
}
inline void CDOTAMsg_LocationPing::_internal_set_x(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.x_ = value;
}
inline void CDOTAMsg_LocationPing::set_x(int32_t value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:CDOTAMsg_LocationPing.x)
}

// optional int32 y = 2;
inline bool CDOTAMsg_LocationPing::_internal_has_y() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CDOTAMsg_LocationPing::has_y() const {
  return _internal_has_y();
}
inline void CDOTAMsg_LocationPing::clear_y() {
  _impl_.y_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t CDOTAMsg_LocationPing::_internal_y() const {
  return _impl_.y_;
}
inline int32_t CDOTAMsg_LocationPing::y() const {
  // @@protoc_insertion_point(field_get:CDOTAMsg_LocationPing.y)
  return _internal_y();
}
inline void CDOTAMsg_LocationPing::_internal_set_y(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.y_ = value;
}
inline void CDOTAMsg_LocationPing::set_y(int32_t value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:CDOTAMsg_LocationPing.y)
}

// optional int32 target = 3 [default = -1];
inline bool CDOTAMsg_LocationPing::_internal_has_target() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CDOTAMsg_LocationPing::has_target() const {
  return _internal_has_target();
}
inline void CDOTAMsg_LocationPing::clear_target() {
  _impl_.target_ = -1;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline int32_t CDOTAMsg_LocationPing::_internal_target() const {
  return _impl_.target_;
}
inline int32_t CDOTAMsg_LocationPing::target() const {
  // @@protoc_insertion_point(field_get:CDOTAMsg_LocationPing.target)
  return _internal_target();
}
inline void CDOTAMsg_LocationPing::_internal_set_target(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.target_ = value;
}
inline void CDOTAMsg_LocationPing::set_target(int32_t value) {
  _internal_set_target(value);
  // @@protoc_insertion_point(field_set:CDOTAMsg_LocationPing.target)
}

// optional bool direct_ping = 4;
inline bool CDOTAMsg_LocationPing::_internal_has_direct_ping() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CDOTAMsg_LocationPing::has_direct_ping() const {
  return _internal_has_direct_ping();
}
inline void CDOTAMsg_LocationPing::clear_direct_ping() {
  _impl_.direct_ping_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool CDOTAMsg_LocationPing::_internal_direct_ping() const {
  return _impl_.direct_ping_;
}
inline bool CDOTAMsg_LocationPing::direct_ping() const {
  // @@protoc_insertion_point(field_get:CDOTAMsg_LocationPing.direct_ping)
  return _internal_direct_ping();
}
inline void CDOTAMsg_LocationPing::_internal_set_direct_ping(bool value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.direct_ping_ = value;
}
inline void CDOTAMsg_LocationPing::set_direct_ping(bool value) {
  _internal_set_direct_ping(value);
  // @@protoc_insertion_point(field_set:CDOTAMsg_LocationPing.direct_ping)
}

// optional uint32 type = 5 [default = 4294967295];
inline bool CDOTAMsg_LocationPing::_internal_has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CDOTAMsg_LocationPing::has_type() const {
  return _internal_has_type();
}
inline void CDOTAMsg_LocationPing::clear_type() {
  _impl_.type_ = 4294967295u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CDOTAMsg_LocationPing::_internal_type() const {
  return _impl_.type_;
}
inline uint32_t CDOTAMsg_LocationPing::type() const {
  // @@protoc_insertion_point(field_get:CDOTAMsg_LocationPing.type)
  return _internal_type();
}
inline void CDOTAMsg_LocationPing::_internal_set_type(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.type_ = value;
}
inline void CDOTAMsg_LocationPing::set_type(uint32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:CDOTAMsg_LocationPing.type)
}

// optional .EPingSource ping_source = 6 [default = k_ePingSource_Default];
inline bool CDOTAMsg_LocationPing::_internal_has_ping_source() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CDOTAMsg_LocationPing::has_ping_source() const {
  return _internal_has_ping_source();
}
inline void CDOTAMsg_LocationPing::clear_ping_source() {
  _impl_.ping_source_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::EPingSource CDOTAMsg_LocationPing::_internal_ping_source() const {
  return static_cast< ::EPingSource >(_impl_.ping_source_);
}
inline ::EPingSource CDOTAMsg_LocationPing::ping_source() const {
  // @@protoc_insertion_point(field_get:CDOTAMsg_LocationPing.ping_source)
  return _internal_ping_source();
}
inline void CDOTAMsg_LocationPing::_internal_set_ping_source(::EPingSource value) {
  assert(::EPingSource_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.ping_source_ = value;
}
inline void CDOTAMsg_LocationPing::set_ping_source(::EPingSource value) {
  _internal_set_ping_source(value);
  // @@protoc_insertion_point(field_set:CDOTAMsg_LocationPing.ping_source)
}

// -------------------------------------------------------------------

// CDOTAMsg_ItemAlert

// optional int32 x = 1;
inline bool CDOTAMsg_ItemAlert::_internal_has_x() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDOTAMsg_ItemAlert::has_x() const {
  return _internal_has_x();
}
inline void CDOTAMsg_ItemAlert::clear_x() {
  _impl_.x_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t CDOTAMsg_ItemAlert::_internal_x() const {
  return _impl_.x_;
}
inline int32_t CDOTAMsg_ItemAlert::x() const {
  // @@protoc_insertion_point(field_get:CDOTAMsg_ItemAlert.x)
  return _internal_x();
}
inline void CDOTAMsg_ItemAlert::_internal_set_x(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.x_ = value;
}
inline void CDOTAMsg_ItemAlert::set_x(int32_t value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:CDOTAMsg_ItemAlert.x)
}

// optional int32 y = 2;
inline bool CDOTAMsg_ItemAlert::_internal_has_y() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CDOTAMsg_ItemAlert::has_y() const {
  return _internal_has_y();
}
inline void CDOTAMsg_ItemAlert::clear_y() {
  _impl_.y_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t CDOTAMsg_ItemAlert::_internal_y() const {
  return _impl_.y_;
}
inline int32_t CDOTAMsg_ItemAlert::y() const {
  // @@protoc_insertion_point(field_get:CDOTAMsg_ItemAlert.y)
  return _internal_y();
}
inline void CDOTAMsg_ItemAlert::_internal_set_y(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.y_ = value;
}
inline void CDOTAMsg_ItemAlert::set_y(int32_t value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:CDOTAMsg_ItemAlert.y)
}

// optional int32 item_ability_id = 3 [default = -1];
inline bool CDOTAMsg_ItemAlert::_internal_has_item_ability_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CDOTAMsg_ItemAlert::has_item_ability_id() const {
  return _internal_has_item_ability_id();
}
inline void CDOTAMsg_ItemAlert::clear_item_ability_id() {
  _impl_.item_ability_id_ = -1;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t CDOTAMsg_ItemAlert::_internal_item_ability_id() const {
  return _impl_.item_ability_id_;
}
inline int32_t CDOTAMsg_ItemAlert::item_ability_id() const {
  // @@protoc_insertion_point(field_get:CDOTAMsg_ItemAlert.item_ability_id)
  return _internal_item_ability_id();
}
inline void CDOTAMsg_ItemAlert::_internal_set_item_ability_id(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.item_ability_id_ = value;
}
inline void CDOTAMsg_ItemAlert::set_item_ability_id(int32_t value) {
  _internal_set_item_ability_id(value);
  // @@protoc_insertion_point(field_set:CDOTAMsg_ItemAlert.item_ability_id)
}

// -------------------------------------------------------------------

// CDOTAMsg_MapLine

// optional int32 x = 1;
inline bool CDOTAMsg_MapLine::_internal_has_x() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDOTAMsg_MapLine::has_x() const {
  return _internal_has_x();
}
inline void CDOTAMsg_MapLine::clear_x() {
  _impl_.x_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t CDOTAMsg_MapLine::_internal_x() const {
  return _impl_.x_;
}
inline int32_t CDOTAMsg_MapLine::x() const {
  // @@protoc_insertion_point(field_get:CDOTAMsg_MapLine.x)
  return _internal_x();
}
inline void CDOTAMsg_MapLine::_internal_set_x(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.x_ = value;
}
inline void CDOTAMsg_MapLine::set_x(int32_t value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:CDOTAMsg_MapLine.x)
}

// optional int32 y = 2;
inline bool CDOTAMsg_MapLine::_internal_has_y() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CDOTAMsg_MapLine::has_y() const {
  return _internal_has_y();
}
inline void CDOTAMsg_MapLine::clear_y() {
  _impl_.y_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t CDOTAMsg_MapLine::_internal_y() const {
  return _impl_.y_;
}
inline int32_t CDOTAMsg_MapLine::y() const {
  // @@protoc_insertion_point(field_get:CDOTAMsg_MapLine.y)
  return _internal_y();
}
inline void CDOTAMsg_MapLine::_internal_set_y(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.y_ = value;
}
inline void CDOTAMsg_MapLine::set_y(int32_t value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:CDOTAMsg_MapLine.y)
}

// optional bool initial = 3;
inline bool CDOTAMsg_MapLine::_internal_has_initial() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CDOTAMsg_MapLine::has_initial() const {
  return _internal_has_initial();
}
inline void CDOTAMsg_MapLine::clear_initial() {
  _impl_.initial_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool CDOTAMsg_MapLine::_internal_initial() const {
  return _impl_.initial_;
}
inline bool CDOTAMsg_MapLine::initial() const {
  // @@protoc_insertion_point(field_get:CDOTAMsg_MapLine.initial)
  return _internal_initial();
}
inline void CDOTAMsg_MapLine::_internal_set_initial(bool value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.initial_ = value;
}
inline void CDOTAMsg_MapLine::set_initial(bool value) {
  _internal_set_initial(value);
  // @@protoc_insertion_point(field_set:CDOTAMsg_MapLine.initial)
}

// -------------------------------------------------------------------

// CDOTAMsg_WorldLine

// optional int32 x = 1;
inline bool CDOTAMsg_WorldLine::_internal_has_x() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDOTAMsg_WorldLine::has_x() const {
  return _internal_has_x();
}
inline void CDOTAMsg_WorldLine::clear_x() {
  _impl_.x_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t CDOTAMsg_WorldLine::_internal_x() const {
  return _impl_.x_;
}
inline int32_t CDOTAMsg_WorldLine::x() const {
  // @@protoc_insertion_point(field_get:CDOTAMsg_WorldLine.x)
  return _internal_x();
}
inline void CDOTAMsg_WorldLine::_internal_set_x(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.x_ = value;
}
inline void CDOTAMsg_WorldLine::set_x(int32_t value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:CDOTAMsg_WorldLine.x)
}

// optional int32 y = 2;
inline bool CDOTAMsg_WorldLine::_internal_has_y() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CDOTAMsg_WorldLine::has_y() const {
  return _internal_has_y();
}
inline void CDOTAMsg_WorldLine::clear_y() {
  _impl_.y_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t CDOTAMsg_WorldLine::_internal_y() const {
  return _impl_.y_;
}
inline int32_t CDOTAMsg_WorldLine::y() const {
  // @@protoc_insertion_point(field_get:CDOTAMsg_WorldLine.y)
  return _internal_y();
}
inline void CDOTAMsg_WorldLine::_internal_set_y(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.y_ = value;
}
inline void CDOTAMsg_WorldLine::set_y(int32_t value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:CDOTAMsg_WorldLine.y)
}

// optional int32 z = 3;
inline bool CDOTAMsg_WorldLine::_internal_has_z() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CDOTAMsg_WorldLine::has_z() const {
  return _internal_has_z();
}
inline void CDOTAMsg_WorldLine::clear_z() {
  _impl_.z_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t CDOTAMsg_WorldLine::_internal_z() const {
  return _impl_.z_;
}
inline int32_t CDOTAMsg_WorldLine::z() const {
  // @@protoc_insertion_point(field_get:CDOTAMsg_WorldLine.z)
  return _internal_z();
}
inline void CDOTAMsg_WorldLine::_internal_set_z(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.z_ = value;
}
inline void CDOTAMsg_WorldLine::set_z(int32_t value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:CDOTAMsg_WorldLine.z)
}

// optional bool initial = 4;
inline bool CDOTAMsg_WorldLine::_internal_has_initial() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CDOTAMsg_WorldLine::has_initial() const {
  return _internal_has_initial();
}
inline void CDOTAMsg_WorldLine::clear_initial() {
  _impl_.initial_ = false;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool CDOTAMsg_WorldLine::_internal_initial() const {
  return _impl_.initial_;
}
inline bool CDOTAMsg_WorldLine::initial() const {
  // @@protoc_insertion_point(field_get:CDOTAMsg_WorldLine.initial)
  return _internal_initial();
}
inline void CDOTAMsg_WorldLine::_internal_set_initial(bool value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.initial_ = value;
}
inline void CDOTAMsg_WorldLine::set_initial(bool value) {
  _internal_set_initial(value);
  // @@protoc_insertion_point(field_set:CDOTAMsg_WorldLine.initial)
}

// optional bool end = 5;
inline bool CDOTAMsg_WorldLine::_internal_has_end() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CDOTAMsg_WorldLine::has_end() const {
  return _internal_has_end();
}
inline void CDOTAMsg_WorldLine::clear_end() {
  _impl_.end_ = false;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline bool CDOTAMsg_WorldLine::_internal_end() const {
  return _impl_.end_;
}
inline bool CDOTAMsg_WorldLine::end() const {
  // @@protoc_insertion_point(field_get:CDOTAMsg_WorldLine.end)
  return _internal_end();
}
inline void CDOTAMsg_WorldLine::_internal_set_end(bool value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.end_ = value;
}
inline void CDOTAMsg_WorldLine::set_end(bool value) {
  _internal_set_end(value);
  // @@protoc_insertion_point(field_set:CDOTAMsg_WorldLine.end)
}

// -------------------------------------------------------------------

// CDOTAMsg_SendStatPopup

// optional .EDOTAStatPopupTypes style = 1 [default = k_EDOTA_SPT_Textline];
inline bool CDOTAMsg_SendStatPopup::_internal_has_style() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CDOTAMsg_SendStatPopup::has_style() const {
  return _internal_has_style();
}
inline void CDOTAMsg_SendStatPopup::clear_style() {
  _impl_.style_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::EDOTAStatPopupTypes CDOTAMsg_SendStatPopup::_internal_style() const {
  return static_cast< ::EDOTAStatPopupTypes >(_impl_.style_);
}
inline ::EDOTAStatPopupTypes CDOTAMsg_SendStatPopup::style() const {
  // @@protoc_insertion_point(field_get:CDOTAMsg_SendStatPopup.style)
  return _internal_style();
}
inline void CDOTAMsg_SendStatPopup::_internal_set_style(::EDOTAStatPopupTypes value) {
  assert(::EDOTAStatPopupTypes_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.style_ = value;
}
inline void CDOTAMsg_SendStatPopup::set_style(::EDOTAStatPopupTypes value) {
  _internal_set_style(value);
  // @@protoc_insertion_point(field_set:CDOTAMsg_SendStatPopup.style)
}

// repeated string stat_strings = 2;
inline int CDOTAMsg_SendStatPopup::_internal_stat_strings_size() const {
  return _impl_.stat_strings_.size();
}
inline int CDOTAMsg_SendStatPopup::stat_strings_size() const {
  return _internal_stat_strings_size();
}
inline void CDOTAMsg_SendStatPopup::clear_stat_strings() {
  _impl_.stat_strings_.Clear();
}
inline std::string* CDOTAMsg_SendStatPopup::add_stat_strings() {
  std::string* _s = _internal_add_stat_strings();
  // @@protoc_insertion_point(field_add_mutable:CDOTAMsg_SendStatPopup.stat_strings)
  return _s;
}
inline const std::string& CDOTAMsg_SendStatPopup::_internal_stat_strings(int index) const {
  return _impl_.stat_strings_.Get(index);
}
inline const std::string& CDOTAMsg_SendStatPopup::stat_strings(int index) const {
  // @@protoc_insertion_point(field_get:CDOTAMsg_SendStatPopup.stat_strings)
  return _internal_stat_strings(index);
}
inline std::string* CDOTAMsg_SendStatPopup::mutable_stat_strings(int index) {
  // @@protoc_insertion_point(field_mutable:CDOTAMsg_SendStatPopup.stat_strings)
  return _impl_.stat_strings_.Mutable(index);
}
inline void CDOTAMsg_SendStatPopup::set_stat_strings(int index, const std::string& value) {
  _impl_.stat_strings_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:CDOTAMsg_SendStatPopup.stat_strings)
}
inline void CDOTAMsg_SendStatPopup::set_stat_strings(int index, std::string&& value) {
  _impl_.stat_strings_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:CDOTAMsg_SendStatPopup.stat_strings)
}
inline void CDOTAMsg_SendStatPopup::set_stat_strings(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.stat_strings_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:CDOTAMsg_SendStatPopup.stat_strings)
}
inline void CDOTAMsg_SendStatPopup::set_stat_strings(int index, const char* value, size_t size) {
  _impl_.stat_strings_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CDOTAMsg_SendStatPopup.stat_strings)
}
inline std::string* CDOTAMsg_SendStatPopup::_internal_add_stat_strings() {
  return _impl_.stat_strings_.Add();
}
inline void CDOTAMsg_SendStatPopup::add_stat_strings(const std::string& value) {
  _impl_.stat_strings_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:CDOTAMsg_SendStatPopup.stat_strings)
}
inline void CDOTAMsg_SendStatPopup::add_stat_strings(std::string&& value) {
  _impl_.stat_strings_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:CDOTAMsg_SendStatPopup.stat_strings)
}
inline void CDOTAMsg_SendStatPopup::add_stat_strings(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.stat_strings_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:CDOTAMsg_SendStatPopup.stat_strings)
}
inline void CDOTAMsg_SendStatPopup::add_stat_strings(const char* value, size_t size) {
  _impl_.stat_strings_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:CDOTAMsg_SendStatPopup.stat_strings)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CDOTAMsg_SendStatPopup::stat_strings() const {
  // @@protoc_insertion_point(field_list:CDOTAMsg_SendStatPopup.stat_strings)
  return _impl_.stat_strings_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CDOTAMsg_SendStatPopup::mutable_stat_strings() {
  // @@protoc_insertion_point(field_mutable_list:CDOTAMsg_SendStatPopup.stat_strings)
  return &_impl_.stat_strings_;
}

// repeated int32 stat_images = 3;
inline int CDOTAMsg_SendStatPopup::_internal_stat_images_size() const {
  return _impl_.stat_images_.size();
}
inline int CDOTAMsg_SendStatPopup::stat_images_size() const {
  return _internal_stat_images_size();
}
inline void CDOTAMsg_SendStatPopup::clear_stat_images() {
  _impl_.stat_images_.Clear();
}
inline int32_t CDOTAMsg_SendStatPopup::_internal_stat_images(int index) const {
  return _impl_.stat_images_.Get(index);
}
inline int32_t CDOTAMsg_SendStatPopup::stat_images(int index) const {
  // @@protoc_insertion_point(field_get:CDOTAMsg_SendStatPopup.stat_images)
  return _internal_stat_images(index);
}
inline void CDOTAMsg_SendStatPopup::set_stat_images(int index, int32_t value) {
  _impl_.stat_images_.Set(index, value);
  // @@protoc_insertion_point(field_set:CDOTAMsg_SendStatPopup.stat_images)
}
inline void CDOTAMsg_SendStatPopup::_internal_add_stat_images(int32_t value) {
  _impl_.stat_images_.Add(value);
}
inline void CDOTAMsg_SendStatPopup::add_stat_images(int32_t value) {
  _internal_add_stat_images(value);
  // @@protoc_insertion_point(field_add:CDOTAMsg_SendStatPopup.stat_images)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
CDOTAMsg_SendStatPopup::_internal_stat_images() const {
  return _impl_.stat_images_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
CDOTAMsg_SendStatPopup::stat_images() const {
  // @@protoc_insertion_point(field_list:CDOTAMsg_SendStatPopup.stat_images)
  return _internal_stat_images();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
CDOTAMsg_SendStatPopup::_internal_mutable_stat_images() {
  return &_impl_.stat_images_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
CDOTAMsg_SendStatPopup::mutable_stat_images() {
  // @@protoc_insertion_point(field_mutable_list:CDOTAMsg_SendStatPopup.stat_images)
  return _internal_mutable_stat_images();
}

// repeated int32 stat_image_types = 4;
inline int CDOTAMsg_SendStatPopup::_internal_stat_image_types_size() const {
  return _impl_.stat_image_types_.size();
}
inline int CDOTAMsg_SendStatPopup::stat_image_types_size() const {
  return _internal_stat_image_types_size();
}
inline void CDOTAMsg_SendStatPopup::clear_stat_image_types() {
  _impl_.stat_image_types_.Clear();
}
inline int32_t CDOTAMsg_SendStatPopup::_internal_stat_image_types(int index) const {
  return _impl_.stat_image_types_.Get(index);
}
inline int32_t CDOTAMsg_SendStatPopup::stat_image_types(int index) const {
  // @@protoc_insertion_point(field_get:CDOTAMsg_SendStatPopup.stat_image_types)
  return _internal_stat_image_types(index);
}
inline void CDOTAMsg_SendStatPopup::set_stat_image_types(int index, int32_t value) {
  _impl_.stat_image_types_.Set(index, value);
  // @@protoc_insertion_point(field_set:CDOTAMsg_SendStatPopup.stat_image_types)
}
inline void CDOTAMsg_SendStatPopup::_internal_add_stat_image_types(int32_t value) {
  _impl_.stat_image_types_.Add(value);
}
inline void CDOTAMsg_SendStatPopup::add_stat_image_types(int32_t value) {
  _internal_add_stat_image_types(value);
  // @@protoc_insertion_point(field_add:CDOTAMsg_SendStatPopup.stat_image_types)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
CDOTAMsg_SendStatPopup::_internal_stat_image_types() const {
  return _impl_.stat_image_types_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
CDOTAMsg_SendStatPopup::stat_image_types() const {
  // @@protoc_insertion_point(field_list:CDOTAMsg_SendStatPopup.stat_image_types)
  return _internal_stat_image_types();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
CDOTAMsg_SendStatPopup::_internal_mutable_stat_image_types() {
  return &_impl_.stat_image_types_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
CDOTAMsg_SendStatPopup::mutable_stat_image_types() {
  // @@protoc_insertion_point(field_mutable_list:CDOTAMsg_SendStatPopup.stat_image_types)
  return _internal_mutable_stat_image_types();
}

// optional float duration = 5;
inline bool CDOTAMsg_SendStatPopup::_internal_has_duration() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CDOTAMsg_SendStatPopup::has_duration() const {
  return _internal_has_duration();
}
inline void CDOTAMsg_SendStatPopup::clear_duration() {
  _impl_.duration_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline float CDOTAMsg_SendStatPopup::_internal_duration() const {
  return _impl_.duration_;
}
inline float CDOTAMsg_SendStatPopup::duration() const {
  // @@protoc_insertion_point(field_get:CDOTAMsg_SendStatPopup.duration)
  return _internal_duration();
}
inline void CDOTAMsg_SendStatPopup::_internal_set_duration(float value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.duration_ = value;
}
inline void CDOTAMsg_SendStatPopup::set_duration(float value) {
  _internal_set_duration(value);
  // @@protoc_insertion_point(field_set:CDOTAMsg_SendStatPopup.duration)
}

// optional bool use_html = 6;
inline bool CDOTAMsg_SendStatPopup::_internal_has_use_html() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CDOTAMsg_SendStatPopup::has_use_html() const {
  return _internal_has_use_html();
}
inline void CDOTAMsg_SendStatPopup::clear_use_html() {
  _impl_.use_html_ = false;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool CDOTAMsg_SendStatPopup::_internal_use_html() const {
  return _impl_.use_html_;
}
inline bool CDOTAMsg_SendStatPopup::use_html() const {
  // @@protoc_insertion_point(field_get:CDOTAMsg_SendStatPopup.use_html)
  return _internal_use_html();
}
inline void CDOTAMsg_SendStatPopup::_internal_set_use_html(bool value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.use_html_ = value;
}
inline void CDOTAMsg_SendStatPopup::set_use_html(bool value) {
  _internal_set_use_html(value);
  // @@protoc_insertion_point(field_set:CDOTAMsg_SendStatPopup.use_html)
}

// optional string movie_name = 7;
inline bool CDOTAMsg_SendStatPopup::_internal_has_movie_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDOTAMsg_SendStatPopup::has_movie_name() const {
  return _internal_has_movie_name();
}
inline void CDOTAMsg_SendStatPopup::clear_movie_name() {
  _impl_.movie_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CDOTAMsg_SendStatPopup::movie_name() const {
  // @@protoc_insertion_point(field_get:CDOTAMsg_SendStatPopup.movie_name)
  return _internal_movie_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CDOTAMsg_SendStatPopup::set_movie_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.movie_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CDOTAMsg_SendStatPopup.movie_name)
}
inline std::string* CDOTAMsg_SendStatPopup::mutable_movie_name() {
  std::string* _s = _internal_mutable_movie_name();
  // @@protoc_insertion_point(field_mutable:CDOTAMsg_SendStatPopup.movie_name)
  return _s;
}
inline const std::string& CDOTAMsg_SendStatPopup::_internal_movie_name() const {
  return _impl_.movie_name_.Get();
}
inline void CDOTAMsg_SendStatPopup::_internal_set_movie_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.movie_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CDOTAMsg_SendStatPopup::_internal_mutable_movie_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.movie_name_.Mutable(GetArenaForAllocation());
}
inline std::string* CDOTAMsg_SendStatPopup::release_movie_name() {
  // @@protoc_insertion_point(field_release:CDOTAMsg_SendStatPopup.movie_name)
  if (!_internal_has_movie_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.movie_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.movie_name_.IsDefault()) {
    _impl_.movie_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CDOTAMsg_SendStatPopup::set_allocated_movie_name(std::string* movie_name) {
  if (movie_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.movie_name_.SetAllocated(movie_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.movie_name_.IsDefault()) {
    _impl_.movie_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CDOTAMsg_SendStatPopup.movie_name)
}

// -------------------------------------------------------------------

// CDOTAMsg_DismissAllStatPopups

// optional float time_delay = 1;
inline bool CDOTAMsg_DismissAllStatPopups::_internal_has_time_delay() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDOTAMsg_DismissAllStatPopups::has_time_delay() const {
  return _internal_has_time_delay();
}
inline void CDOTAMsg_DismissAllStatPopups::clear_time_delay() {
  _impl_.time_delay_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline float CDOTAMsg_DismissAllStatPopups::_internal_time_delay() const {
  return _impl_.time_delay_;
}
inline float CDOTAMsg_DismissAllStatPopups::time_delay() const {
  // @@protoc_insertion_point(field_get:CDOTAMsg_DismissAllStatPopups.time_delay)
  return _internal_time_delay();
}
inline void CDOTAMsg_DismissAllStatPopups::_internal_set_time_delay(float value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.time_delay_ = value;
}
inline void CDOTAMsg_DismissAllStatPopups::set_time_delay(float value) {
  _internal_set_time_delay(value);
  // @@protoc_insertion_point(field_set:CDOTAMsg_DismissAllStatPopups.time_delay)
}

// -------------------------------------------------------------------

// CDOTAMsg_CoachHUDPing

// optional uint32 x = 1;
inline bool CDOTAMsg_CoachHUDPing::_internal_has_x() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CDOTAMsg_CoachHUDPing::has_x() const {
  return _internal_has_x();
}
inline void CDOTAMsg_CoachHUDPing::clear_x() {
  _impl_.x_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CDOTAMsg_CoachHUDPing::_internal_x() const {
  return _impl_.x_;
}
inline uint32_t CDOTAMsg_CoachHUDPing::x() const {
  // @@protoc_insertion_point(field_get:CDOTAMsg_CoachHUDPing.x)
  return _internal_x();
}
inline void CDOTAMsg_CoachHUDPing::_internal_set_x(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.x_ = value;
}
inline void CDOTAMsg_CoachHUDPing::set_x(uint32_t value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:CDOTAMsg_CoachHUDPing.x)
}

// optional uint32 y = 2;
inline bool CDOTAMsg_CoachHUDPing::_internal_has_y() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CDOTAMsg_CoachHUDPing::has_y() const {
  return _internal_has_y();
}
inline void CDOTAMsg_CoachHUDPing::clear_y() {
  _impl_.y_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CDOTAMsg_CoachHUDPing::_internal_y() const {
  return _impl_.y_;
}
inline uint32_t CDOTAMsg_CoachHUDPing::y() const {
  // @@protoc_insertion_point(field_get:CDOTAMsg_CoachHUDPing.y)
  return _internal_y();
}
inline void CDOTAMsg_CoachHUDPing::_internal_set_y(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.y_ = value;
}
inline void CDOTAMsg_CoachHUDPing::set_y(uint32_t value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:CDOTAMsg_CoachHUDPing.y)
}

// optional string tgtpath = 3;
inline bool CDOTAMsg_CoachHUDPing::_internal_has_tgtpath() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDOTAMsg_CoachHUDPing::has_tgtpath() const {
  return _internal_has_tgtpath();
}
inline void CDOTAMsg_CoachHUDPing::clear_tgtpath() {
  _impl_.tgtpath_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CDOTAMsg_CoachHUDPing::tgtpath() const {
  // @@protoc_insertion_point(field_get:CDOTAMsg_CoachHUDPing.tgtpath)
  return _internal_tgtpath();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CDOTAMsg_CoachHUDPing::set_tgtpath(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.tgtpath_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CDOTAMsg_CoachHUDPing.tgtpath)
}
inline std::string* CDOTAMsg_CoachHUDPing::mutable_tgtpath() {
  std::string* _s = _internal_mutable_tgtpath();
  // @@protoc_insertion_point(field_mutable:CDOTAMsg_CoachHUDPing.tgtpath)
  return _s;
}
inline const std::string& CDOTAMsg_CoachHUDPing::_internal_tgtpath() const {
  return _impl_.tgtpath_.Get();
}
inline void CDOTAMsg_CoachHUDPing::_internal_set_tgtpath(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.tgtpath_.Set(value, GetArenaForAllocation());
}
inline std::string* CDOTAMsg_CoachHUDPing::_internal_mutable_tgtpath() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.tgtpath_.Mutable(GetArenaForAllocation());
}
inline std::string* CDOTAMsg_CoachHUDPing::release_tgtpath() {
  // @@protoc_insertion_point(field_release:CDOTAMsg_CoachHUDPing.tgtpath)
  if (!_internal_has_tgtpath()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.tgtpath_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.tgtpath_.IsDefault()) {
    _impl_.tgtpath_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CDOTAMsg_CoachHUDPing::set_allocated_tgtpath(std::string* tgtpath) {
  if (tgtpath != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.tgtpath_.SetAllocated(tgtpath, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.tgtpath_.IsDefault()) {
    _impl_.tgtpath_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CDOTAMsg_CoachHUDPing.tgtpath)
}

// -------------------------------------------------------------------

// CDOTAMsg_UnitOrder

// optional .dotaunitorder_t order_type = 2 [default = DOTA_UNIT_ORDER_NONE];
inline bool CDOTAMsg_UnitOrder::_internal_has_order_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CDOTAMsg_UnitOrder::has_order_type() const {
  return _internal_has_order_type();
}
inline void CDOTAMsg_UnitOrder::clear_order_type() {
  _impl_.order_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::dotaunitorder_t CDOTAMsg_UnitOrder::_internal_order_type() const {
  return static_cast< ::dotaunitorder_t >(_impl_.order_type_);
}
inline ::dotaunitorder_t CDOTAMsg_UnitOrder::order_type() const {
  // @@protoc_insertion_point(field_get:CDOTAMsg_UnitOrder.order_type)
  return _internal_order_type();
}
inline void CDOTAMsg_UnitOrder::_internal_set_order_type(::dotaunitorder_t value) {
  assert(::dotaunitorder_t_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.order_type_ = value;
}
inline void CDOTAMsg_UnitOrder::set_order_type(::dotaunitorder_t value) {
  _internal_set_order_type(value);
  // @@protoc_insertion_point(field_set:CDOTAMsg_UnitOrder.order_type)
}

// repeated int32 units = 3;
inline int CDOTAMsg_UnitOrder::_internal_units_size() const {
  return _impl_.units_.size();
}
inline int CDOTAMsg_UnitOrder::units_size() const {
  return _internal_units_size();
}
inline void CDOTAMsg_UnitOrder::clear_units() {
  _impl_.units_.Clear();
}
inline int32_t CDOTAMsg_UnitOrder::_internal_units(int index) const {
  return _impl_.units_.Get(index);
}
inline int32_t CDOTAMsg_UnitOrder::units(int index) const {
  // @@protoc_insertion_point(field_get:CDOTAMsg_UnitOrder.units)
  return _internal_units(index);
}
inline void CDOTAMsg_UnitOrder::set_units(int index, int32_t value) {
  _impl_.units_.Set(index, value);
  // @@protoc_insertion_point(field_set:CDOTAMsg_UnitOrder.units)
}
inline void CDOTAMsg_UnitOrder::_internal_add_units(int32_t value) {
  _impl_.units_.Add(value);
}
inline void CDOTAMsg_UnitOrder::add_units(int32_t value) {
  _internal_add_units(value);
  // @@protoc_insertion_point(field_add:CDOTAMsg_UnitOrder.units)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
CDOTAMsg_UnitOrder::_internal_units() const {
  return _impl_.units_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
CDOTAMsg_UnitOrder::units() const {
  // @@protoc_insertion_point(field_list:CDOTAMsg_UnitOrder.units)
  return _internal_units();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
CDOTAMsg_UnitOrder::_internal_mutable_units() {
  return &_impl_.units_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
CDOTAMsg_UnitOrder::mutable_units() {
  // @@protoc_insertion_point(field_mutable_list:CDOTAMsg_UnitOrder.units)
  return _internal_mutable_units();
}

// optional int32 target_index = 4 [default = 0];
inline bool CDOTAMsg_UnitOrder::_internal_has_target_index() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CDOTAMsg_UnitOrder::has_target_index() const {
  return _internal_has_target_index();
}
inline void CDOTAMsg_UnitOrder::clear_target_index() {
  _impl_.target_index_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t CDOTAMsg_UnitOrder::_internal_target_index() const {
  return _impl_.target_index_;
}
inline int32_t CDOTAMsg_UnitOrder::target_index() const {
  // @@protoc_insertion_point(field_get:CDOTAMsg_UnitOrder.target_index)
  return _internal_target_index();
}
inline void CDOTAMsg_UnitOrder::_internal_set_target_index(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.target_index_ = value;
}
inline void CDOTAMsg_UnitOrder::set_target_index(int32_t value) {
  _internal_set_target_index(value);
  // @@protoc_insertion_point(field_set:CDOTAMsg_UnitOrder.target_index)
}

// optional int32 ability_index = 5 [default = -1];
inline bool CDOTAMsg_UnitOrder::_internal_has_ability_index() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CDOTAMsg_UnitOrder::has_ability_index() const {
  return _internal_has_ability_index();
}
inline void CDOTAMsg_UnitOrder::clear_ability_index() {
  _impl_.ability_index_ = -1;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline int32_t CDOTAMsg_UnitOrder::_internal_ability_index() const {
  return _impl_.ability_index_;
}
inline int32_t CDOTAMsg_UnitOrder::ability_index() const {
  // @@protoc_insertion_point(field_get:CDOTAMsg_UnitOrder.ability_index)
  return _internal_ability_index();
}
inline void CDOTAMsg_UnitOrder::_internal_set_ability_index(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.ability_index_ = value;
}
inline void CDOTAMsg_UnitOrder::set_ability_index(int32_t value) {
  _internal_set_ability_index(value);
  // @@protoc_insertion_point(field_set:CDOTAMsg_UnitOrder.ability_index)
}

// optional .CMsgVector position = 6;
inline bool CDOTAMsg_UnitOrder::_internal_has_position() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.position_ != nullptr);
  return value;
}
inline bool CDOTAMsg_UnitOrder::has_position() const {
  return _internal_has_position();
}
inline const ::CMsgVector& CDOTAMsg_UnitOrder::_internal_position() const {
  const ::CMsgVector* p = _impl_.position_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgVector&>(
      ::_CMsgVector_default_instance_);
}
inline const ::CMsgVector& CDOTAMsg_UnitOrder::position() const {
  // @@protoc_insertion_point(field_get:CDOTAMsg_UnitOrder.position)
  return _internal_position();
}
inline void CDOTAMsg_UnitOrder::unsafe_arena_set_allocated_position(
    ::CMsgVector* position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.position_);
  }
  _impl_.position_ = position;
  if (position) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CDOTAMsg_UnitOrder.position)
}
inline ::CMsgVector* CDOTAMsg_UnitOrder::release_position() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgVector* temp = _impl_.position_;
  _impl_.position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgVector* CDOTAMsg_UnitOrder::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:CDOTAMsg_UnitOrder.position)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgVector* temp = _impl_.position_;
  _impl_.position_ = nullptr;
  return temp;
}
inline ::CMsgVector* CDOTAMsg_UnitOrder::_internal_mutable_position() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.position_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgVector>(GetArenaForAllocation());
    _impl_.position_ = p;
  }
  return _impl_.position_;
}
inline ::CMsgVector* CDOTAMsg_UnitOrder::mutable_position() {
  ::CMsgVector* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:CDOTAMsg_UnitOrder.position)
  return _msg;
}
inline void CDOTAMsg_UnitOrder::set_allocated_position(::CMsgVector* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.position_);
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position));
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.position_ = position;
  // @@protoc_insertion_point(field_set_allocated:CDOTAMsg_UnitOrder.position)
}

// optional int32 sequence_number = 8;
inline bool CDOTAMsg_UnitOrder::_internal_has_sequence_number() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CDOTAMsg_UnitOrder::has_sequence_number() const {
  return _internal_has_sequence_number();
}
inline void CDOTAMsg_UnitOrder::clear_sequence_number() {
  _impl_.sequence_number_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int32_t CDOTAMsg_UnitOrder::_internal_sequence_number() const {
  return _impl_.sequence_number_;
}
inline int32_t CDOTAMsg_UnitOrder::sequence_number() const {
  // @@protoc_insertion_point(field_get:CDOTAMsg_UnitOrder.sequence_number)
  return _internal_sequence_number();
}
inline void CDOTAMsg_UnitOrder::_internal_set_sequence_number(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.sequence_number_ = value;
}
inline void CDOTAMsg_UnitOrder::set_sequence_number(int32_t value) {
  _internal_set_sequence_number(value);
  // @@protoc_insertion_point(field_set:CDOTAMsg_UnitOrder.sequence_number)
}

// optional uint32 flags = 9;
inline bool CDOTAMsg_UnitOrder::_internal_has_flags() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CDOTAMsg_UnitOrder::has_flags() const {
  return _internal_has_flags();
}
inline void CDOTAMsg_UnitOrder::clear_flags() {
  _impl_.flags_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CDOTAMsg_UnitOrder::_internal_flags() const {
  return _impl_.flags_;
}
inline uint32_t CDOTAMsg_UnitOrder::flags() const {
  // @@protoc_insertion_point(field_get:CDOTAMsg_UnitOrder.flags)
  return _internal_flags();
}
inline void CDOTAMsg_UnitOrder::_internal_set_flags(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.flags_ = value;
}
inline void CDOTAMsg_UnitOrder::set_flags(uint32_t value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:CDOTAMsg_UnitOrder.flags)
}

// -------------------------------------------------------------------

// VersusScene_PlayActivity_ActivityInfo

// optional string activity = 1;
inline bool VersusScene_PlayActivity_ActivityInfo::_internal_has_activity() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool VersusScene_PlayActivity_ActivityInfo::has_activity() const {
  return _internal_has_activity();
}
inline void VersusScene_PlayActivity_ActivityInfo::clear_activity() {
  _impl_.activity_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& VersusScene_PlayActivity_ActivityInfo::activity() const {
  // @@protoc_insertion_point(field_get:VersusScene_PlayActivity.ActivityInfo.activity)
  return _internal_activity();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VersusScene_PlayActivity_ActivityInfo::set_activity(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.activity_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:VersusScene_PlayActivity.ActivityInfo.activity)
}
inline std::string* VersusScene_PlayActivity_ActivityInfo::mutable_activity() {
  std::string* _s = _internal_mutable_activity();
  // @@protoc_insertion_point(field_mutable:VersusScene_PlayActivity.ActivityInfo.activity)
  return _s;
}
inline const std::string& VersusScene_PlayActivity_ActivityInfo::_internal_activity() const {
  return _impl_.activity_.Get();
}
inline void VersusScene_PlayActivity_ActivityInfo::_internal_set_activity(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.activity_.Set(value, GetArenaForAllocation());
}
inline std::string* VersusScene_PlayActivity_ActivityInfo::_internal_mutable_activity() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.activity_.Mutable(GetArenaForAllocation());
}
inline std::string* VersusScene_PlayActivity_ActivityInfo::release_activity() {
  // @@protoc_insertion_point(field_release:VersusScene_PlayActivity.ActivityInfo.activity)
  if (!_internal_has_activity()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.activity_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.activity_.IsDefault()) {
    _impl_.activity_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void VersusScene_PlayActivity_ActivityInfo::set_allocated_activity(std::string* activity) {
  if (activity != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.activity_.SetAllocated(activity, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.activity_.IsDefault()) {
    _impl_.activity_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:VersusScene_PlayActivity.ActivityInfo.activity)
}

// optional bool disable_auto_kill = 2;
inline bool VersusScene_PlayActivity_ActivityInfo::_internal_has_disable_auto_kill() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool VersusScene_PlayActivity_ActivityInfo::has_disable_auto_kill() const {
  return _internal_has_disable_auto_kill();
}
inline void VersusScene_PlayActivity_ActivityInfo::clear_disable_auto_kill() {
  _impl_.disable_auto_kill_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool VersusScene_PlayActivity_ActivityInfo::_internal_disable_auto_kill() const {
  return _impl_.disable_auto_kill_;
}
inline bool VersusScene_PlayActivity_ActivityInfo::disable_auto_kill() const {
  // @@protoc_insertion_point(field_get:VersusScene_PlayActivity.ActivityInfo.disable_auto_kill)
  return _internal_disable_auto_kill();
}
inline void VersusScene_PlayActivity_ActivityInfo::_internal_set_disable_auto_kill(bool value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.disable_auto_kill_ = value;
}
inline void VersusScene_PlayActivity_ActivityInfo::set_disable_auto_kill(bool value) {
  _internal_set_disable_auto_kill(value);
  // @@protoc_insertion_point(field_set:VersusScene_PlayActivity.ActivityInfo.disable_auto_kill)
}

// optional bool force_looping = 3;
inline bool VersusScene_PlayActivity_ActivityInfo::_internal_has_force_looping() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool VersusScene_PlayActivity_ActivityInfo::has_force_looping() const {
  return _internal_has_force_looping();
}
inline void VersusScene_PlayActivity_ActivityInfo::clear_force_looping() {
  _impl_.force_looping_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool VersusScene_PlayActivity_ActivityInfo::_internal_force_looping() const {
  return _impl_.force_looping_;
}
inline bool VersusScene_PlayActivity_ActivityInfo::force_looping() const {
  // @@protoc_insertion_point(field_get:VersusScene_PlayActivity.ActivityInfo.force_looping)
  return _internal_force_looping();
}
inline void VersusScene_PlayActivity_ActivityInfo::_internal_set_force_looping(bool value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.force_looping_ = value;
}
inline void VersusScene_PlayActivity_ActivityInfo::set_force_looping(bool value) {
  _internal_set_force_looping(value);
  // @@protoc_insertion_point(field_set:VersusScene_PlayActivity.ActivityInfo.force_looping)
}

// -------------------------------------------------------------------

// VersusScene_PlayActivity

// repeated .VersusScene_PlayActivity.ActivityInfo activities = 1;
inline int VersusScene_PlayActivity::_internal_activities_size() const {
  return _impl_.activities_.size();
}
inline int VersusScene_PlayActivity::activities_size() const {
  return _internal_activities_size();
}
inline void VersusScene_PlayActivity::clear_activities() {
  _impl_.activities_.Clear();
}
inline ::VersusScene_PlayActivity_ActivityInfo* VersusScene_PlayActivity::mutable_activities(int index) {
  // @@protoc_insertion_point(field_mutable:VersusScene_PlayActivity.activities)
  return _impl_.activities_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VersusScene_PlayActivity_ActivityInfo >*
VersusScene_PlayActivity::mutable_activities() {
  // @@protoc_insertion_point(field_mutable_list:VersusScene_PlayActivity.activities)
  return &_impl_.activities_;
}
inline const ::VersusScene_PlayActivity_ActivityInfo& VersusScene_PlayActivity::_internal_activities(int index) const {
  return _impl_.activities_.Get(index);
}
inline const ::VersusScene_PlayActivity_ActivityInfo& VersusScene_PlayActivity::activities(int index) const {
  // @@protoc_insertion_point(field_get:VersusScene_PlayActivity.activities)
  return _internal_activities(index);
}
inline ::VersusScene_PlayActivity_ActivityInfo* VersusScene_PlayActivity::_internal_add_activities() {
  return _impl_.activities_.Add();
}
inline ::VersusScene_PlayActivity_ActivityInfo* VersusScene_PlayActivity::add_activities() {
  ::VersusScene_PlayActivity_ActivityInfo* _add = _internal_add_activities();
  // @@protoc_insertion_point(field_add:VersusScene_PlayActivity.activities)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VersusScene_PlayActivity_ActivityInfo >&
VersusScene_PlayActivity::activities() const {
  // @@protoc_insertion_point(field_list:VersusScene_PlayActivity.activities)
  return _impl_.activities_;
}

// optional float playback_rate = 2;
inline bool VersusScene_PlayActivity::_internal_has_playback_rate() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool VersusScene_PlayActivity::has_playback_rate() const {
  return _internal_has_playback_rate();
}
inline void VersusScene_PlayActivity::clear_playback_rate() {
  _impl_.playback_rate_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline float VersusScene_PlayActivity::_internal_playback_rate() const {
  return _impl_.playback_rate_;
}
inline float VersusScene_PlayActivity::playback_rate() const {
  // @@protoc_insertion_point(field_get:VersusScene_PlayActivity.playback_rate)
  return _internal_playback_rate();
}
inline void VersusScene_PlayActivity::_internal_set_playback_rate(float value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.playback_rate_ = value;
}
inline void VersusScene_PlayActivity::set_playback_rate(float value) {
  _internal_set_playback_rate(value);
  // @@protoc_insertion_point(field_set:VersusScene_PlayActivity.playback_rate)
}

// -------------------------------------------------------------------

// VersusScene_ChatWheel

// optional uint32 chat_message_id = 1 [default = 4294967295];
inline bool VersusScene_ChatWheel::_internal_has_chat_message_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool VersusScene_ChatWheel::has_chat_message_id() const {
  return _internal_has_chat_message_id();
}
inline void VersusScene_ChatWheel::clear_chat_message_id() {
  _impl_.chat_message_id_ = 4294967295u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t VersusScene_ChatWheel::_internal_chat_message_id() const {
  return _impl_.chat_message_id_;
}
inline uint32_t VersusScene_ChatWheel::chat_message_id() const {
  // @@protoc_insertion_point(field_get:VersusScene_ChatWheel.chat_message_id)
  return _internal_chat_message_id();
}
inline void VersusScene_ChatWheel::_internal_set_chat_message_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.chat_message_id_ = value;
}
inline void VersusScene_ChatWheel::set_chat_message_id(uint32_t value) {
  _internal_set_chat_message_id(value);
  // @@protoc_insertion_point(field_set:VersusScene_ChatWheel.chat_message_id)
}

// optional uint32 emoticon_id = 2;
inline bool VersusScene_ChatWheel::_internal_has_emoticon_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool VersusScene_ChatWheel::has_emoticon_id() const {
  return _internal_has_emoticon_id();
}
inline void VersusScene_ChatWheel::clear_emoticon_id() {
  _impl_.emoticon_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t VersusScene_ChatWheel::_internal_emoticon_id() const {
  return _impl_.emoticon_id_;
}
inline uint32_t VersusScene_ChatWheel::emoticon_id() const {
  // @@protoc_insertion_point(field_get:VersusScene_ChatWheel.emoticon_id)
  return _internal_emoticon_id();
}
inline void VersusScene_ChatWheel::_internal_set_emoticon_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.emoticon_id_ = value;
}
inline void VersusScene_ChatWheel::set_emoticon_id(uint32_t value) {
  _internal_set_emoticon_id(value);
  // @@protoc_insertion_point(field_set:VersusScene_ChatWheel.emoticon_id)
}

// -------------------------------------------------------------------

// VersusScene_PlaybackRate

// optional float rate = 1;
inline bool VersusScene_PlaybackRate::_internal_has_rate() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool VersusScene_PlaybackRate::has_rate() const {
  return _internal_has_rate();
}
inline void VersusScene_PlaybackRate::clear_rate() {
  _impl_.rate_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline float VersusScene_PlaybackRate::_internal_rate() const {
  return _impl_.rate_;
}
inline float VersusScene_PlaybackRate::rate() const {
  // @@protoc_insertion_point(field_get:VersusScene_PlaybackRate.rate)
  return _internal_rate();
}
inline void VersusScene_PlaybackRate::_internal_set_rate(float value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.rate_ = value;
}
inline void VersusScene_PlaybackRate::set_rate(float value) {
  _internal_set_rate(value);
  // @@protoc_insertion_point(field_set:VersusScene_PlaybackRate.rate)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::EPingSource> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EPingSource>() {
  return ::EPingSource_descriptor();
}
template <> struct is_proto_enum< ::EDOTAStatPopupTypes> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EDOTAStatPopupTypes>() {
  return ::EDOTAStatPopupTypes_descriptor();
}
template <> struct is_proto_enum< ::dotaunitorder_t> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::dotaunitorder_t>() {
  return ::dotaunitorder_t_descriptor();
}
template <> struct is_proto_enum< ::EDOTAVersusScenePlayerBehavior> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EDOTAVersusScenePlayerBehavior>() {
  return ::EDOTAVersusScenePlayerBehavior_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_dota_5fcommonmessages_2eproto
